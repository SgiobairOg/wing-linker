var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

var require_package = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/package.json"(exports2, module2) {
    module2.exports = {
      name: "@winglang/sdk",
      repository: {
        type: "git",
        url: "https://github.com/winglang/wing.git",
        directory: "libs/wingsdk"
      },
      author: {
        name: "Wing Cloud",
        email: "ping@monada.co",
        organization: true
      },
      peerDependencies: {
        constructs: "~10.2.69"
      },
      dependencies: {
        "@aws-sdk/client-cloudwatch-logs": "3.405.0",
        "@aws-sdk/client-dynamodb": "3.405.0",
        "@aws-sdk/client-elasticache": "3.405.0",
        "@aws-sdk/client-lambda": "3.405.0",
        "@aws-sdk/client-s3": "3.405.0",
        "@aws-sdk/client-secrets-manager": "3.405.0",
        "@aws-sdk/client-sns": "3.405.0",
        "@aws-sdk/client-sqs": "3.405.0",
        "@aws-sdk/is-array-buffer": "3.201.0",
        "@aws-sdk/types": "3.398.0",
        "@aws-sdk/util-buffer-from": "3.208.0",
        "@aws-sdk/util-dynamodb": "3.405.0",
        "@aws-sdk/util-stream-node": "3.350.0",
        "@aws-sdk/util-utf8-node": "3.259.0",
        "@azure/core-paging": "^1.5.0",
        "@azure/identity": "3.1.3",
        "@azure/storage-blob": "12.14.0",
        "@types/aws-lambda": "^8.10.119",
        cdktf: "0.17.0",
        constructs: "~10.2.69",
        "cron-parser": "^4.9.0",
        "esbuild-wasm": "^0.18.20",
        express: "^4.18.2",
        ioredis: "^5.3.2",
        jsonschema: "^1.4.1",
        "mime-types": "^2.1.35",
        nanoid: "^3.3.6",
        "safe-stable-stringify": "^2.4.3",
        uuid: "^8.3.2"
      },
      bundledDependencies: [
        "@aws-sdk/client-cloudwatch-logs",
        "@aws-sdk/client-dynamodb",
        "@aws-sdk/client-elasticache",
        "@aws-sdk/client-lambda",
        "@aws-sdk/client-s3",
        "@aws-sdk/client-secrets-manager",
        "@aws-sdk/client-sns",
        "@aws-sdk/client-sqs",
        "@aws-sdk/is-array-buffer",
        "@aws-sdk/types",
        "@aws-sdk/util-buffer-from",
        "@aws-sdk/util-dynamodb",
        "@aws-sdk/util-stream-node",
        "@aws-sdk/util-utf8-node",
        "@azure/core-paging",
        "@azure/identity",
        "@azure/storage-blob",
        "@types/aws-lambda",
        "cdktf",
        "cron-parser",
        "esbuild-wasm",
        "express",
        "ioredis",
        "jsonschema",
        "mime-types",
        "nanoid",
        "safe-stable-stringify",
        "uuid"
      ],
      engines: {
        node: ">= 18.13.0"
      },
      main: "lib/index.js",
      license: "MIT",
      version: "0.31.8",
      types: "lib/index.d.ts",
      stability: "experimental",
      jsii: {
        outdir: "dist",
        targets: {},
        tsc: {
          outDir: "lib",
          rootDir: "src"
        }
      },
      files: [
        "lib",
        ".jsii",
        "API.md",
        "patches"
      ],
      "//": '~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".',
      scripts: {
        "api-check": "pnpm exec projen api-check",
        "api-check:watch": "pnpm exec projen api-check:watch",
        build: "pnpm exec projen build",
        bump: "pnpm exec projen bump",
        clobber: "pnpm exec projen clobber",
        compat: "pnpm exec projen compat",
        compile: "pnpm exec projen compile",
        default: "pnpm exec projen default",
        docgen: "pnpm exec projen docgen",
        eject: "pnpm exec projen eject",
        eslint: "pnpm exec projen eslint",
        package: "pnpm exec projen package",
        "package-all": "pnpm exec projen package-all",
        "package:js": "pnpm exec projen package:js",
        "post-compile": "pnpm exec projen post-compile",
        "post-upgrade": "pnpm exec projen post-upgrade",
        "pre-compile": "pnpm exec projen pre-compile",
        release: "pnpm exec projen release",
        test: "pnpm exec projen test",
        "test:watch": "pnpm exec projen test:watch",
        unbump: "pnpm exec projen unbump",
        upgrade: "pnpm exec projen upgrade",
        watch: "pnpm exec projen watch",
        projen: "pnpm exec projen"
      }
    };
  }
});

var require_constants = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fqnForType = exports2.SDK_PACKAGE_NAME = exports2.SDK_VERSION = void 0;
    var PKG = require_package();
    exports2.SDK_VERSION = PKG.version;
    exports2.SDK_PACKAGE_NAME = PKG.name;
    if (!exports2.SDK_VERSION) {
      throw new Error("SDK_VERSION is not defined");
    }
    if (!exports2.SDK_PACKAGE_NAME) {
      throw new Error("SDK_PACKAGE_NAME is not defined");
    }
    function fqnForType(type) {
      return `${exports2.SDK_PACKAGE_NAME}.${type}`;
    }
    exports2.fqnForType = fqnForType;
  }
});

var require_dependency = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/constructs/lib/dependency.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Dependable = exports2.DependencyGroup = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var DependencyGroup = class {
      constructor(...deps) {
        this._deps = new Array();
        const self = this;
        Dependable.implement(this, {
          get dependencyRoots() {
            const result = new Array();
            for (const d of self._deps) {
              result.push(...Dependable.of(d).dependencyRoots);
            }
            return result;
          }
        });
        this.add(...deps);
      }
      /**
       * Add a construct to the dependency roots
       */
      add(...scopes) {
        this._deps.push(...scopes);
      }
    };
    _a = JSII_RTTI_SYMBOL_1;
    DependencyGroup[_a] = { fqn: "constructs.DependencyGroup", version: "10.2.70" };
    exports2.DependencyGroup = DependencyGroup;
    var DEPENDABLE_SYMBOL = Symbol.for("@aws-cdk/core.DependableTrait");
    var Dependable = class {
      /**
       * Turn any object into an IDependable.
       */
      static implement(instance, trait) {
        instance[DEPENDABLE_SYMBOL] = trait;
      }
      /**
       * Return the matching Dependable for the given class instance.
       */
      static of(instance) {
        const ret = instance[DEPENDABLE_SYMBOL];
        if (!ret) {
          throw new Error(`${instance} does not implement IDependable. Use "Dependable.implement()" to implement`);
        }
        return ret;
      }
      /**
       * Return the matching Dependable for the given class instance.
       * @deprecated use `of`
       */
      static get(instance) {
        return this.of(instance);
      }
    };
    _b = JSII_RTTI_SYMBOL_1;
    Dependable[_b] = { fqn: "constructs.Dependable", version: "10.2.70" };
    exports2.Dependable = Dependable;
  }
});

var require_stack_trace = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/constructs/lib/private/stack-trace.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.captureStackTrace = void 0;
    function captureStackTrace(below) {
      below = below || captureStackTrace;
      const object = { stack: "" };
      const previousLimit = Error.stackTraceLimit;
      try {
        Error.stackTraceLimit = Number.MAX_SAFE_INTEGER;
        Error.captureStackTrace(object, below);
      } finally {
        Error.stackTraceLimit = previousLimit;
      }
      if (!object.stack) {
        return [];
      }
      return object.stack.split("\n").slice(1).map((s) => s.replace(/^\s*at\s+/, ""));
    }
    exports2.captureStackTrace = captureStackTrace;
  }
});

var require_uniqueid = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/constructs/lib/private/uniqueid.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.addressOf = void 0;
    var crypto4 = require("crypto");
    var HIDDEN_ID = "Default";
    function addressOf(components) {
      const hash = crypto4.createHash("sha1");
      for (const c of components) {
        if (c === HIDDEN_ID) {
          continue;
        }
        hash.update(c);
        hash.update("\n");
      }
      return "c8" + hash.digest("hex");
    }
    exports2.addressOf = addressOf;
  }
});

var require_construct = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/constructs/lib/construct.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ConstructOrder = exports2.Construct = exports2.Node = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var dependency_1 = require_dependency();
    var stack_trace_1 = require_stack_trace();
    var uniqueid_1 = require_uniqueid();
    var CONSTRUCT_SYM = Symbol.for("constructs.Construct");
    var Node = class _Node {
      /**
       * Returns the node associated with a construct.
       * @param construct the construct
       *
       * @deprecated use `construct.node` instead
       */
      static of(construct) {
        return construct.node;
      }
      constructor(host, scope, id) {
        this.host = host;
        this._locked = false;
        this._children = {};
        this._context = {};
        this._metadata = new Array();
        this._dependencies = /* @__PURE__ */ new Set();
        this._validations = new Array();
        id = id ?? "";
        this.id = sanitizeId(id);
        this.scope = scope;
        if (scope && !this.id) {
          throw new Error("Only root constructs may have an empty ID");
        }
        scope?.node.addChild(host, this.id);
      }
      /**
       * The full, absolute path of this construct in the tree.
       *
       * Components are separated by '/'.
       */
      get path() {
        const components = [];
        for (const scope of this.scopes) {
          if (scope.node.id) {
            components.push(scope.node.id);
          }
        }
        return components.join(_Node.PATH_SEP);
      }
      /**
       * Returns an opaque tree-unique address for this construct.
       *
       * Addresses are 42 characters hexadecimal strings. They begin with "c8"
       * followed by 40 lowercase hexadecimal characters (0-9a-f).
       *
       * Addresses are calculated using a SHA-1 of the components of the construct
       * path.
       *
       * To enable refactorings of construct trees, constructs with the ID `Default`
       * will be excluded from the calculation. In those cases constructs in the
       * same tree may have the same addreess.
       *
       * @example c83a2846e506bcc5f10682b564084bca2d275709ee
       */
      get addr() {
        if (!this._addr) {
          this._addr = (0, uniqueid_1.addressOf)(this.scopes.map((c) => c.node.id));
        }
        return this._addr;
      }
      /**
       * Return a direct child by id, or undefined
       *
       * @param id Identifier of direct child
       * @returns the child if found, or undefined
       */
      tryFindChild(id) {
        return this._children[sanitizeId(id)];
      }
      /**
       * Return a direct child by id
       *
       * Throws an error if the child is not found.
       *
       * @param id Identifier of direct child
       * @returns Child with the given id.
       */
      findChild(id) {
        const ret = this.tryFindChild(id);
        if (!ret) {
          throw new Error(`No child with id: '${id}'`);
        }
        return ret;
      }
      /**
       * Returns the child construct that has the id `Default` or `Resource"`.
       * This is usually the construct that provides the bulk of the underlying functionality.
       * Useful for modifications of the underlying construct that are not available at the higher levels.
       *
       * @throws if there is more than one child
       * @returns a construct or undefined if there is no default child
       */
      get defaultChild() {
        if (this._defaultChild !== void 0) {
          return this._defaultChild;
        }
        const resourceChild = this.tryFindChild("Resource");
        const defaultChild = this.tryFindChild("Default");
        if (resourceChild && defaultChild) {
          throw new Error(`Cannot determine default child for ${this.path}. There is both a child with id "Resource" and id "Default"`);
        }
        return defaultChild || resourceChild;
      }
      /**
       * Override the defaultChild property.
       *
       * This should only be used in the cases where the correct
       * default child is not named 'Resource' or 'Default' as it
       * should be.
       *
       * If you set this to undefined, the default behavior of finding
       * the child named 'Resource' or 'Default' will be used.
       */
      set defaultChild(value) {
        this._defaultChild = value;
      }
      /**
       * All direct children of this construct.
       */
      get children() {
        return Object.values(this._children);
      }
      /**
       * Return this construct and all of its children in the given order
       */
      findAll(order = ConstructOrder.PREORDER) {
        const ret = new Array();
        visit(this.host);
        return ret;
        function visit(c) {
          if (order === ConstructOrder.PREORDER) {
            ret.push(c);
          }
          for (const child of c.node.children) {
            visit(child);
          }
          if (order === ConstructOrder.POSTORDER) {
            ret.push(c);
          }
        }
      }
      /**
       * This can be used to set contextual values.
       * Context must be set before any children are added, since children may consult context info during construction.
       * If the key already exists, it will be overridden.
       * @param key The context key
       * @param value The context value
       */
      setContext(key, value) {
        if (this.children.length > 0) {
          const names = this.children.map((c) => c.node.id);
          throw new Error("Cannot set context after children have been added: " + names.join(","));
        }
        this._context[key] = value;
      }
      /**
       * Retrieves a value from tree context if present. Otherwise, would throw an error.
       *
       * Context is usually initialized at the root, but can be overridden at any point in the tree.
       *
       * @param key The context key
       * @returns The context value or throws error if there is no context value for this key
       */
      getContext(key) {
        const value = this._context[key];
        if (value !== void 0) {
          return value;
        }
        if (value === void 0 && !this.scope?.node) {
          throw new Error(`No context value present for ${key} key`);
        }
        return this.scope && this.scope.node.getContext(key);
      }
      /**
       * Retrieves a value from tree context.
       *
       * Context is usually initialized at the root, but can be overridden at any point in the tree.
       *
       * @param key The context key
       * @returns The context value or `undefined` if there is no context value for this key.
       */
      tryGetContext(key) {
        const value = this._context[key];
        if (value !== void 0) {
          return value;
        }
        return this.scope && this.scope.node.tryGetContext(key);
      }
      /**
       * An immutable array of metadata objects associated with this construct.
       * This can be used, for example, to implement support for deprecation notices, source mapping, etc.
       */
      get metadata() {
        return [...this._metadata];
      }
      /**
       * Adds a metadata entry to this construct.
       * Entries are arbitrary values and will also include a stack trace to allow tracing back to
       * the code location for when the entry was added. It can be used, for example, to include source
       * mapping in CloudFormation templates to improve diagnostics.
       *
       * @param type a string denoting the type of metadata
       * @param data the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
       * @param options options
       */
      addMetadata(type, data, options = {}) {
        if (data == null) {
          return;
        }
        const shouldTrace = options.stackTrace ?? false;
        const trace = shouldTrace ? (0, stack_trace_1.captureStackTrace)(options.traceFromFunction ?? this.addMetadata) : void 0;
        this._metadata.push({ type, data, trace });
      }
      /**
       * All parent scopes of this construct.
       *
       * @returns a list of parent scopes. The last element in the list will always
       * be the current construct and the first element will be the root of the
       * tree.
       */
      get scopes() {
        const ret = new Array();
        let curr = this.host;
        while (curr) {
          ret.unshift(curr);
          curr = curr.node.scope;
        }
        return ret;
      }
      /**
       * Returns the root of the construct tree.
       * @returns The root of the construct tree.
       */
      get root() {
        return this.scopes[0];
      }
      /**
       * Returns true if this construct or the scopes in which it is defined are
       * locked.
       */
      get locked() {
        if (this._locked) {
          return true;
        }
        if (this.scope && this.scope.node.locked) {
          return true;
        }
        return false;
      }
      /**
       * Add an ordering dependency on another construct.
       *
       * An `IDependable`
       */
      addDependency(...deps) {
        for (const d of deps) {
          this._dependencies.add(d);
        }
      }
      /**
       * Return all dependencies registered on this node (non-recursive).
       */
      get dependencies() {
        const result = new Array();
        for (const dep of this._dependencies) {
          for (const root of dependency_1.Dependable.of(dep).dependencyRoots) {
            result.push(root);
          }
        }
        return result;
      }
      /**
       * Remove the child with the given name, if present.
       *
       * @returns Whether a child with the given name was deleted.
       * @experimental
       */
      tryRemoveChild(childName) {
        if (!(childName in this._children)) {
          return false;
        }
        delete this._children[childName];
        return true;
      }
      /**
       * Adds a validation to this construct.
       *
       * When `node.validate()` is called, the `validate()` method will be called on
       * all validations and all errors will be returned.
       *
       * @param validation The validation object
       */
      addValidation(validation) {
        this._validations.push(validation);
      }
      /**
       * Validates this construct.
       *
       * Invokes the `validate()` method on all validations added through
       * `addValidation()`.
       *
       * @returns an array of validation error messages associated with this
       * construct.
       */
      validate() {
        const deprecated = ["validate", "onValidate", "synthesize", "onSynthesize", "prepare", "onPrepare"];
        for (const method of deprecated) {
          if (typeof this.host[method] === "function") {
            throw new Error(`the construct "${this.path}" has a "${method}()" method which is no longer supported. Use "construct.node.addValidation()" to add validations to a construct`);
          }
        }
        const errors = new Array();
        for (const v of this._validations) {
          errors.push(...v.validate());
        }
        return errors;
      }
      /**
       * Locks this construct from allowing more children to be added. After this
       * call, no more children can be added to this construct or to any children.
       */
      lock() {
        this._locked = true;
      }
      /**
       * Adds a child construct to this node.
       *
       * @param child The child construct
       * @param childName The type name of the child construct.
       * @returns The resolved path part name of the child
       */
      addChild(child, childName) {
        if (this.locked) {
          if (!this.path) {
            throw new Error("Cannot add children during synthesis");
          }
          throw new Error(`Cannot add children to "${this.path}" during synthesis`);
        }
        if (this._children[childName]) {
          const name = this.id ?? "";
          const typeName = this.host.constructor.name;
          throw new Error(`There is already a Construct with name '${childName}' in ${typeName}${name.length > 0 ? " [" + name + "]" : ""}`);
        }
        this._children[childName] = child;
      }
    };
    _a = JSII_RTTI_SYMBOL_1;
    Node[_a] = { fqn: "constructs.Node", version: "10.2.70" };
    Node.PATH_SEP = "/";
    exports2.Node = Node;
    var Construct = class {
      /**
       * Checks if `x` is a construct.
       *
       * Use this method instead of `instanceof` to properly detect `Construct`
       * instances, even when the construct library is symlinked.
       *
       * Explanation: in JavaScript, multiple copies of the `constructs` library on
       * disk are seen as independent, completely different libraries. As a
       * consequence, the class `Construct` in each copy of the `constructs` library
       * is seen as a different class, and an instance of one class will not test as
       * `instanceof` the other class. `npm install` will not create installations
       * like this, but users may manually symlink construct libraries together or
       * use a monorepo tool: in those cases, multiple copies of the `constructs`
       * library can be accidentally installed, and `instanceof` will behave
       * unpredictably. It is safest to avoid using `instanceof`, and using
       * this type-testing method instead.
       *
       * @returns true if `x` is an object created from a class which extends `Construct`.
       * @param x Any object
       */
      static isConstruct(x) {
        return x && typeof x === "object" && x[CONSTRUCT_SYM];
      }
      /**
       * Creates a new construct node.
       *
       * @param scope The scope in which to define this construct
       * @param id The scoped construct ID. Must be unique amongst siblings. If
       * the ID includes a path separator (`/`), then it will be replaced by double
       * dash `--`.
       */
      constructor(scope, id) {
        this.node = new Node(this, scope, id);
        dependency_1.Dependable.implement(this, {
          dependencyRoots: [this]
        });
      }
      /**
       * Returns a string representation of this construct.
       */
      toString() {
        return this.node.path || "<root>";
      }
    };
    _b = JSII_RTTI_SYMBOL_1;
    Construct[_b] = { fqn: "constructs.Construct", version: "10.2.70" };
    exports2.Construct = Construct;
    var ConstructOrder;
    (function(ConstructOrder2) {
      ConstructOrder2[ConstructOrder2["PREORDER"] = 0] = "PREORDER";
      ConstructOrder2[ConstructOrder2["POSTORDER"] = 1] = "POSTORDER";
    })(ConstructOrder = exports2.ConstructOrder || (exports2.ConstructOrder = {}));
    var PATH_SEP_REGEX = new RegExp(`${Node.PATH_SEP}`, "g");
    function sanitizeId(id) {
      return id.replace(PATH_SEP_REGEX, "--");
    }
    Object.defineProperty(Construct.prototype, CONSTRUCT_SYM, {
      value: true,
      enumerable: false,
      writable: false
    });
  }
});

var require_metadata = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/constructs/lib/metadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_lib = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/constructs/lib/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding2(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_construct(), exports2);
    __exportStar2(require_metadata(), exports2);
    __exportStar2(require_dependency(), exports2);
  }
});

var require_app = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/core/app.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.preSynthesizeAllConstructs = exports2.App = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var constructs_1 = require_lib();
    var App = class _App extends constructs_1.Construct {
      /**
       * Returns the root app.
       */
      static of(scope) {
        if (scope instanceof _App) {
          return scope;
        }
        if (!scope.node.scope) {
          throw new Error("Cannot find root app");
        }
        return _App.of(scope.node.scope);
      }
      /**
       * Loads the `App` class for the given target.
       * @param target one of the supported targets
       * @returns an `App` class constructor
       */
      static for(target) {
        try {
          return require(`../target-${target}/app`).App;
        } catch (e) {
          if (e.code === "MODULE_NOT_FOUND") {
            const cannotFindModule = e.message.split("\n")[0];
            throw new Error(`${cannotFindModule}. The target "${target}" requires this module to be installed globally (using "npm i -g").`);
          }
          throw new Error(`Unknown compilation target: "${target}": ${e.message}`);
        }
      }
      constructor(scope, id, props) {
        super(scope, id);
        this.entrypointDir = props.entrypointDir;
      }
      /**
       * The ".wing" directory, which is where the compiler emits its output. We are taking an implicit
       * assumption here that it is always set to be `$outdir/.wing` which is currently hard coded into
       * the `cli/compile.ts` file.
       */
      get workdir() {
        return `${this.outdir}/.wing`;
      }
      /**
       * Creates a new object of the given FQN.
       * @param fqn the fqn of the class to instantiate
       * @param ctor the constructor of the class to instantiate (undefined for abstract classes)
       * @param scope the scope of the resource
       * @param id the id of the resource
       * @param args the arguments to pass to the resource
       * @returns the new instance
       * @throws if the FQN is not supported
       */
      new(fqn, ctor, scope, id, ...args) {
        const instance = this.tryNew(fqn, scope, id, ...args);
        if (instance) {
          return instance;
        }
        return new ctor(scope, id, ...args);
      }
      /**
       * Creates a new object of the given abstract class FQN.
       */
      newAbstract(fqn, scope, id, ...args) {
        const instance = this.tryNew(fqn, scope, id, ...args);
        if (!instance) {
          throw new Error(`Unable to create an instance of abstract type "${fqn}" for this target`);
        }
        return instance;
      }
      /**
       * Can be overridden by derived classes to inject dependencies.
       *
       * @param fqn The fully qualified name of the class to instantiate (jsii).
       * @param scope The construct scope.
       * @param id The construct id.
       * @param args The arguments to pass to the constructor.
       */
      tryNew(fqn, scope, id, ...args) {
        fqn;
        scope;
        id;
        args;
        return void 0;
      }
      /**
       * Synthesize the root construct if one was given. If this is a test environment, then
       * we will synthesize one root construct per test. Otherwise, we will synthesize exactly
       * one root construct.
       *
       * @param props The App props
       * @param testRunner The test runner
       */
      synthRoots(props, testRunner) {
        if (props.rootConstruct) {
          const Root = props.rootConstruct;
          if (this.isTestEnvironment) {
            new Root(this, "env0");
            const tests = testRunner.findTests();
            for (let i = 1; i < tests.length; i++) {
              new Root(this, "env" + i);
            }
          } else {
            new Root(this, "Default");
          }
        }
      }
    };
    _a = JSII_RTTI_SYMBOL_1;
    App[_a] = { fqn: "@winglang/sdk.core.App", version: "0.0.0" };
    exports2.App = App;
    function preSynthesizeAllConstructs(app) {
      for (const c of app.node.findAll()) {
        if (typeof c._preSynthesize === "function") {
          c._preSynthesize();
        }
      }
    }
    exports2.preSynthesizeAllConstructs = preSynthesizeAllConstructs;
  }
});

var require_attributes = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/core/attributes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WING_ATTRIBUTE_RESOURCE_CONNECTIONS = void 0;
    exports2.WING_ATTRIBUTE_RESOURCE_CONNECTIONS = "wing:resource:connections";
  }
});

var require_connections = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/core/connections.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Connections = exports2.CONNECTIONS_FILE_PATH = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var fs = __importStar2(require("fs"));
    var path = __importStar2(require("path"));
    var CONNECTIONS_SYMBOL = Symbol.for("@winglang/sdk.core.Connections");
    exports2.CONNECTIONS_FILE_PATH = "connections.json";
    var Connections = class _Connections {
      /**
       * Return the matching Connections of the given construct tree.
       */
      static of(construct) {
        let connections = construct.node.root[CONNECTIONS_SYMBOL];
        if (!connections) {
          connections = new _Connections();
          construct.node.root[CONNECTIONS_SYMBOL] = connections;
        }
        return connections;
      }
      constructor() {
        this._connections = [];
      }
      /**
       * Adds a connection between two constructs. A connection is a piece of
       * metadata describing how one construct is related to another construct.
       */
      add(props) {
        const connection = {
          source: props.source,
          target: props.target,
          name: props.name
        };
        if (this._connections.some((c) => c.source === connection.source && c.target === connection.target && c.name === connection.name)) {
          return;
        }
        this._connections.push(connection);
      }
      /**
       * Synthesize `connections.json` to the given directory.
       */
      synth(outdir) {
        const connections = this._connections.map((c) => ({
          source: c.source.node.path,
          target: c.target.node.path,
          name: c.name
        }));
        const tree = {
          version: "connections-0.1",
          connections
        };
        fs.writeFileSync(path.join(outdir, exports2.CONNECTIONS_FILE_PATH), JSON.stringify(tree, void 0, 2), { encoding: "utf8" });
      }
    };
    _a = JSII_RTTI_SYMBOL_1;
    Connections[_a] = { fqn: "@winglang/sdk.core.Connections", version: "0.0.0" };
    exports2.Connections = Connections;
  }
});

var require_dependency2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/core/dependency.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DependencyVertex = exports2.DependencyGraph = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var constructs_1 = require_lib();
    var DependencyGraph = class {
      constructor(node) {
        this._fosterParent = new DependencyVertex();
        const nodes = {};
        function putVertex(construct) {
          nodes[constructs_1.Node.of(construct).path] = new DependencyVertex(construct);
        }
        function getVertex(construct) {
          return nodes[constructs_1.Node.of(construct).path];
        }
        for (const n of node.findAll()) {
          putVertex(n);
        }
        const deps = [];
        for (const child of node.findAll()) {
          for (const dep of child.node.dependencies) {
            deps.push({ source: child, target: dep });
          }
        }
        for (const dep of deps) {
          if (!getVertex(dep.target)) {
            continue;
          }
          const sourceDepNode = getVertex(dep.source);
          const targetDepNode = getVertex(dep.target);
          sourceDepNode.addChild(targetDepNode);
        }
        for (const n of Object.values(nodes)) {
          if (n.inbound.length === 0) {
            this._fosterParent.addChild(n);
          }
        }
      }
      /**
       * Returns the root of the graph.
       *
       * Note that this vertex will always have `null` as its `.value` since it is an artifical root
       * that binds all the connected spaces of the graph.
       */
      get root() {
        return this._fosterParent;
      }
      /**
       * Returns a topologically sorted array of the constructs in the sub-graph.
       */
      topology() {
        return this._fosterParent.topology();
      }
    };
    _a = JSII_RTTI_SYMBOL_1;
    DependencyGraph[_a] = { fqn: "@winglang/sdk.core.DependencyGraph", version: "0.0.0" };
    exports2.DependencyGraph = DependencyGraph;
    var DependencyVertex = class {
      constructor(value = void 0) {
        this._children = /* @__PURE__ */ new Set();
        this._parents = /* @__PURE__ */ new Set();
        this._value = value;
      }
      /**
       * Returns the IConstruct this graph vertex represents.
       *
       * `null` in case this is the root of the graph.
       */
      get value() {
        return this._value;
      }
      /**
       * Returns the children of the vertex (i.e dependencies)
       */
      get outbound() {
        return Array.from(this._children);
      }
      /**
       * Returns the parents of the vertex (i.e dependants)
       */
      get inbound() {
        return Array.from(this._parents);
      }
      /**
       * Returns a topologically sorted array of the constructs in the sub-graph.
       */
      topology() {
        const found = /* @__PURE__ */ new Set();
        const topology = [];
        function visit(n) {
          for (const c of n.outbound) {
            visit(c);
          }
          if (!found.has(n)) {
            topology.push(n);
            found.add(n);
          }
        }
        visit(this);
        return topology.filter((d) => d.value).map((d) => d.value);
      }
      /**
       * Adds a vertex as a dependency of the current node.
       * Also updates the parents of `dep`, so that it contains this node as a parent.
       *
       * This operation will fail in case it creates a cycle in the graph.
       *
       * @param dep The dependency
       */
      addChild(dep) {
        const cycle = dep.findRoute(this);
        if (cycle.length !== 0) {
          cycle.push(dep);
          throw new Error(`Dependency cycle detected: ${cycle.filter((d) => d.value).map((d) => constructs_1.Node.of(d.value).path).join(" => ")}`);
        }
        this._children.add(dep);
        dep.addParent(this);
      }
      addParent(dep) {
        this._parents.add(dep);
      }
      findRoute(dst) {
        const route = [];
        visit(this);
        return route;
        function visit(n) {
          route.push(n);
          let found = false;
          for (const c of n.outbound) {
            if (c === dst) {
              route.push(c);
              return true;
            }
            found = visit(c);
          }
          if (!found) {
            route.pop();
          }
          return found;
        }
      }
    };
    _b = JSII_RTTI_SYMBOL_1;
    DependencyVertex[_b] = { fqn: "@winglang/sdk.core.DependencyVertex", version: "0.0.0" };
    exports2.DependencyVertex = DependencyVertex;
  }
});

var require_misc = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/shared/misc.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.runCommand = exports2.normalPath = exports2.readJsonSync = void 0;
    var child_process_1 = require("child_process");
    var fs_1 = require("fs");
    function readJsonSync(file) {
      return JSON.parse((0, fs_1.readFileSync)(file, "utf-8"));
    }
    exports2.readJsonSync = readJsonSync;
    function normalPath(path) {
      if (process.platform === "win32") {
        return path.replace(/\\+/g, "/");
      } else {
        return path;
      }
    }
    exports2.normalPath = normalPath;
    async function runCommand(cmd, args) {
      const raw = await new Promise((resolve, reject) => {
        (0, child_process_1.execFile)(cmd, args, (error, stdout, stderr) => {
          if (error) {
            console.error(stderr);
            reject(error);
          }
          resolve(stdout);
        });
      });
      return raw;
    }
    exports2.runCommand = runCommand;
  }
});

var require_inflight = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/core/inflight.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InflightClient = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var path_1 = require("path");
    var misc_1 = require_misc();
    var InflightClient = class {
      /**
       * Returns code for creating an inflight client.
       */
      static for(dirname, filename, clientClass, args) {
        const inflightDir = dirname;
        const inflightFile = (0, path_1.basename)(filename).split(".")[0] + ".inflight";
        return `new (require("${(0, misc_1.normalPath)(`${inflightDir}/${inflightFile}`)}")).${clientClass}(${args.join(", ")})`;
      }
      /**
       * Returns code for implementing `_toInflightType()`.
       */
      static forType(filename, clientClass) {
        return `require("${(0, misc_1.normalPath)(filename)}").${clientClass}`;
      }
      constructor() {
      }
    };
    _a = JSII_RTTI_SYMBOL_1;
    InflightClient[_a] = { fqn: "@winglang/sdk.core.InflightClient", version: "0.0.0" };
    exports2.InflightClient = InflightClient;
  }
});

var require_array = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/std/array.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MutArray = exports2.Array = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_core();
    var Array2 = class {
      /**
       * @internal
       */
      static _toInflightType() {
        return core_1.InflightClient.forType(__filename, this.name);
      }
      constructor() {
      }
      /**
       * The length of the array
       * @returns the length of the array
       */
      get length() {
        throw new Error("Abstract");
      }
      /**
       * Get the value at the given index
       * @param index index of the value to get
       * @returns the value at the given index
       */
      at(index) {
        index;
        throw new Error("Abstract");
      }
      /**
       * Get the value at the given index, returning nil if the index is out of bounds.
       *
       * @macro ($self$.at($args$))
       *
       * @param index index of the value to get
       * @returns the value at the given index, or undefined if the index is out of bounds
       */
      tryAt(index) {
        index;
        throw new Error("Macro");
      }
      /**
       * Merge arr to the end of this array
       * @param arr array to merge
       *
       * @returns a new ImmutableArray with the values of this array followed by the values of arr
       */
      concat(arr) {
        arr;
        throw new Error("Abstract");
      }
      /**
       * Checks if this array includes searchElement.
       *
       * @macro $self$.includes($args$)
       *
       * @param searchElement to search for.
       * @returns true if this array includes searchElement.
       */
      contains(searchElement) {
        searchElement;
        throw new Error("Macro");
      }
      /**
       * Create a mutable shallow copy of this array
       *
       * @macro [...($self$)]
       *
       * @returns a MutableArray with the same values as this array
       */
      copyMut() {
        throw new Error("Macro");
      }
      /**
       * Returns the index of the first occurrence of searchElement found.
       *
       * @macro $self$.indexOf($args$)
       *
       * @param searchElement to search for.
       * @returns the index of the first occurrence of searchElement found, or -1 if not found.
       */
      indexOf(searchElement) {
        searchElement;
        throw new Error("Macro");
      }
      /**
       * Returns a new string containing the concatenated values in this array,
       * separated by commas or a specified separator string. If the array has only
       * one item, then that item will be returned without using the separator.
       *
       * @returns a string containing the concatenated values in this array,
       * separated by commas or a specified separator string.
       */
      join(separator) {
        separator;
        throw new Error("Abstract");
      }
      /**
       * Returns the index of the last occurrence of searchElement found.
       *
       * @macro $self$.lastIndexOf($args$)
       *
       * @param searchElement to search for.
       * @returns the index of the last occurrence of searchElement found, or -1 if not found.
       */
      lastIndexOf(searchElement) {
        searchElement;
        throw new Error("Macro");
      }
    };
    _a = JSII_RTTI_SYMBOL_1;
    Array2[_a] = { fqn: "@winglang/sdk.std.Array", version: "0.0.0" };
    exports2.Array = Array2;
    var MutArray = class {
      /**
       * @internal
       */
      static _toInflightType() {
        return core_1.InflightClient.forType(__filename, this.name);
      }
      constructor() {
      }
      /**
       * The length of the array
       * @returns the length of the array
       */
      get length() {
        throw new Error("Abstract");
      }
      /**
       * Get the value at the given index
       * @param index index of the value to get
       * @returns the value at the given index
       */
      at(index) {
        index;
        throw new Error("Abstract");
      }
      /**
       * Merge arr to the end of this array
       * @param arr array to merge
       *
       * @returns a new MutableArray with the values of this array followed by the values of arr
       */
      concat(arr) {
        arr;
        throw new Error("Abstract");
      }
      /**
       * Checks if this array includes searchElement.
       *
       * @macro $self$.includes($args$)
       *
       * @param searchElement to search for.
       * @returns true if this array includes searchElement.
       */
      contains(searchElement) {
        searchElement;
        throw new Error("Macro");
      }
      /**
       * Create an immutable shallow copy of this array
       *
       * @macro [...($self$)]
       *
       * @returns an ImmutableArray with the same values as this array
       */
      copy() {
        throw new Error("Macro");
      }
      /**
       * Returns the index of the first occurrence of searchElement found.
       *
       * @macro $self$.indexOf($args$)
       *
       * @param searchElement to search for.
       * @returns the index of the first occurrence of searchElement found, or -1 if not found.
       */
      indexOf(searchElement) {
        searchElement;
        throw new Error("Macro");
      }
      /**
       * Returns a new string containing the concatenated values in this array,
       * separated by commas or a specified separator string. If the array has only
       * one item, then that item will be returned without using the separator.
       *
       * @returns a string containing the concatenated values in this array,
       * separated by commas or a specified separator string.
       */
      join(separator) {
        separator;
        throw new Error("Abstract");
      }
      /**
       * Returns the index of the last occurrence of searchElement found.
       *
       * @macro $self$.lastIndexOf($args$)
       *
       * @param searchElement to search for.
       * @returns the index of the last occurrence of searchElement found, or -1 if not found.
       */
      lastIndexOf(searchElement) {
        searchElement;
        throw new Error("Macro");
      }
      /**
       * Add value to end of array
       * @param value value to add
       */
      push(value) {
        value;
        throw new Error("Abstract");
      }
      /**
       * Remove value from end of array
       * @returns the value removed
       */
      pop() {
        throw new Error("Abstract");
      }
      /**
       * Removes value from the given index of an array
       *
       * @macro ((obj, args) => { if (args[0] < 0 || args[0] >= $self$.length) throw new Error("Index out of bounds"); return obj.splice(args[0], 1)[0]; })($self$, [$args$])
       *
       * @param index the index to remove the value at
       * @returns the value removed
       * @throws index out of bounds error if the given index does not exist for the array
       */
      popAt(index) {
        index;
        throw new Error("Macro");
      }
      /**
       * Sets a new value at the given index of an array
       *
       * @macro ((obj, args) => { if (args[0] < 0 || args[0] >= $self$.length) throw new Error("Index out of bounds"); obj[args[0]] = args[1]; })($self$, [$args$])
       *
       * @param index the index to set the value at
       * @param value the value to set at the given index
       * @throws index out of bounds error if the given index does not exist for the array
       */
      set(index, value) {
        index;
        value;
        throw new Error("Macro");
      }
      /**
       * Inserts a new value at the given index of an array
       *
       * @macro ((obj, args) => { if (args[0] < 0 || args[0] > $self$.length) throw new Error("Index out of bounds"); obj.splice(args[0], 0, args[1]); })($self$, [$args$])
       *
       * @param index the index to insert the value at
       * @param value the value to insert at the given index
       * @throws index out of bounds error if the given index isn't valid
       */
      insert(index, value) {
        index;
        value;
        throw new Error("Macro");
      }
      /**
       * Removes first occurence of a given value in an array
       *
       * @macro ((obj, args) => { if (obj.indexOf(args[0]) !== -1) { obj.splice(obj.indexOf(args[0]), 1); return true; } return false; })($self$, [$args$])
       *
       * @param value the value to remove
       * @returns true if value was removed
       */
      removeFirst(value) {
        value;
        throw new Error("Macro");
      }
    };
    _b = JSII_RTTI_SYMBOL_1;
    MutArray[_b] = { fqn: "@winglang/sdk.std.MutArray", version: "0.0.0" };
    exports2.MutArray = MutArray;
  }
});

var require_bool = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/std/bool.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Boolean = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_core();
    var Boolean2 = class {
      /**
       * Parse a boolean from Json.
       *
       * @param json to parse boolean from.
       * @returns a boolean.
       */
      static fromJson(json) {
        if (typeof json !== "boolean") {
          throw new Error("unable to parse " + typeof json + " " + json + " as a boolean");
        }
        return JSON.parse(JSON.stringify(json));
      }
      /**
       * @internal
       */
      static _toInflightType() {
        return core_1.InflightClient.forType(__filename, this.name);
      }
      constructor() {
      }
    };
    _a = JSII_RTTI_SYMBOL_1;
    Boolean2[_a] = { fqn: "@winglang/sdk.std.Boolean", version: "0.0.0" };
    exports2.Boolean = Boolean2;
  }
});

var require_datetime = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/std/datetime.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Datetime = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_core();
    var Datetime = class _Datetime {
      /**
       * @internal
       */
      static _toInflightType() {
        return core_1.InflightClient.forType(__filename, this.name);
      }
      /**
       * Create a Datetime from UTC timezone
       *
       * @returns a new `Datetime` from current time in UTC timezone
       */
      static utcNow() {
        return new _Datetime();
      }
      /**
       * Create a Datetime from local system timezone
       *
       * @returns a new `Datetime` from current time in system timezone
       */
      static systemNow() {
        const date = /* @__PURE__ */ new Date();
        date.setTime(date.getTime() - date.getTimezoneOffset() * 60 * 1e3);
        return new _Datetime(date, date.getTimezoneOffset());
      }
      /**
       * Create a Datetime from an ISO-8601 string
       *
       * @returns a new `Datetime` in UTC timezone
       * @param iso ISO-8601 string
       */
      static fromIso(iso) {
        return new _Datetime(new Date(iso));
      }
      /**
       * Create a Datetime from Datetime components
       *
       * @param c DatetimeComponents
       * @returns a new `Datetime`
       */
      static fromComponents(c) {
        const date = new Date(Date.UTC(c.year, c.month, c.day, c.hour, c.min, c.sec, c.ms));
        return new _Datetime(date, c.tz);
      }
      constructor(date = /* @__PURE__ */ new Date(), timezoneOffset = 0) {
        this._timezoneOffset = 0;
        this._date = date;
        this._timezoneOffset = timezoneOffset;
      }
      /**
       * Return a timestamp of non-leap year seconds since epoch
       *
       * @returns a number representing the current timestamp in seconds
       */
      get timestamp() {
        return this.timestampMs / 1e3;
      }
      /**
       * Return a timestamp of non-leap year milliseconds since epoch
       *
       * @returns a number representing the current timestamp in milliseconds
       */
      get timestampMs() {
        return this._date.valueOf() + this._timezoneOffset * 60 * 1e3;
      }
      /**
       * Returns the hour of the local machine time or in utc
       *
       * @returns a number representing the datetime's hour
       */
      get hours() {
        return this._date.getUTCHours();
      }
      /**
       * Returns the minute of the local machine time or in utc
       *
       * @returns a number representing the datetime's minute
       */
      get min() {
        return this._date.getUTCMinutes();
      }
      /**
       * Returns the seconds of the local machine time or in utc
       *
       * @returns a number representing the datetime's seconds
       */
      get sec() {
        return this._date.getUTCSeconds();
      }
      /**
       * Returns the milliseconds of the local machine time or in utc
       *  *
       * @returns a number representing the datetime's milliseconds
       */
      get ms() {
        return this._date.getUTCMilliseconds();
      }
      /**
       * Returns the day of month in the local machine time or in utc (1 - 31)
       *
       * @returns a number representing the datetime's day of month
       */
      get dayOfMonth() {
        return this._date.getUTCDate();
      }
      /**
       * Returns the day in month of the local machine time or in utc (0 - 6)
       *
       * @returns a number representing the datetime's day of week
       */
      get dayOfWeek() {
        return this._date.getUTCDay();
      }
      /**
       * Returns the month of the local machine time or in utc (0 - 11)
       *
       * @returns a number representing the datetime's month
       */
      get month() {
        return this._date.getUTCMonth();
      }
      /**
       * Returns the year of the local machine time or in utc
       *
       * @returns a number representing the datetime's year
       */
      get year() {
        return this._date.getUTCFullYear();
      }
      /**
       * Returns the offset in minutes from UTC
       *
       * @returns a number representing the datetime's offset in minutes from UTC
       */
      get timezone() {
        return this._timezoneOffset;
      }
      /**
       * Returns a Datetime represents the same date in utc
       *
       * @returns a datetime representing the datetime's date in UTC
       */
      toUtc() {
        return new _Datetime(new Date(this.timestampMs));
      }
      /**
       * Returns ISO-8601 string
       *
       * @returns a ISO-8601 string representation of the datetime
       */
      toIso() {
        return new Date(this.timestampMs).toISOString();
      }
    };
    _a = JSII_RTTI_SYMBOL_1;
    Datetime[_a] = { fqn: "@winglang/sdk.std.Datetime", version: "0.0.0" };
    exports2.Datetime = Datetime;
  }
});

var require_duration = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/std/duration.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Duration = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_core();
    var Duration = class _Duration {
      /**
       * @internal
       */
      static _toInflightType() {
        return core_1.InflightClient.forType(__filename, this.name);
      }
      /**
       * Create a Duration representing an amount of years
       *
       * @param amount the amount of Years the `Duration` will represent.
       * @returns a new `Duration` representing `amount` Years.
       */
      static fromYears(amount) {
        return new _Duration(amount * 60 * 60 * 24 * 365);
      }
      /**
       * Create a Duration representing an amount of months
       *
       * @param amount the amount of Months the `Duration` will represent.
       * @returns a new `Duration` representing `amount` Months.
       */
      static fromMonths(amount) {
        return new _Duration(amount * 60 * 60 * 24 * 365 / 12);
      }
      /**
       * Create a Duration representing an amount of days
       *
       * @param amount the amount of Days the `Duration` will represent.
       * @returns a new `Duration` representing `amount` Days.
       */
      static fromDays(amount) {
        return new _Duration(amount * 60 * 60 * 24);
      }
      /**
       * Create a Duration representing an amount of hours
       *
       * @param amount the amount of Hours the `Duration` will represent.
       * @returns a new `Duration` representing `amount` Hours.
       */
      static fromHours(amount) {
        return new _Duration(amount * 60 * 60);
      }
      /**
       * Create a Duration representing an amount of minutes
       *
       * @param amount the amount of Minutes the `Duration` will represent.
       * @returns a new `Duration` representing `amount` Minutes.
       */
      static fromMinutes(amount) {
        return new _Duration(amount * 60);
      }
      /**
       * Create a Duration representing an amount of seconds
       *
       * @param amount the amount of Seconds the `Duration` will represent.
       * @returns a new `Duration` representing `amount` Seconds.
       */
      static fromSeconds(amount) {
        return new _Duration(amount);
      }
      /**
       * Create a Duration representing an amount of milliseconds
       *
       * @param amount the amount of Milliseconds the `Duration` will represent.
       * @returns a new `Duration` representing `amount` Milliseconds.
       */
      static fromMilliseconds(amount) {
        return new _Duration(amount / 1e3);
      }
      constructor(seconds) {
        this.seconds = seconds;
      }
      /**
       * Return the total number of milliseconds in this Duration
       *
       * @returns the value of this `Duration` expressed in Milliseconds.
       */
      get milliseconds() {
        return this.seconds * 1e3;
      }
      /**
       * Return the total number of minutes in this Duration
       *
       * @returns the value of this `Duration` expressed in Minutes.
       */
      get minutes() {
        return this.seconds / 60;
      }
      /**
       * Return the total number of hours in this Duration
       *
       * @returns the value of this `Duration` expressed in Hours.
       */
      get hours() {
        return this.minutes / 60;
      }
      /**
       * Return the total number of days in this Duration
       *
       * @returns the value of this `Duration` expressed in Days.
       */
      get days() {
        return this.hours / 24;
      }
      /**
       * Return the total number of months in this Duration
       *
       * @returns the value of this `Duration` expressed in Months.
       */
      get months() {
        return this.years * 12;
      }
      /**
       * Return the total number of years in this Duration
       *
       * @returns the value of this `Duration` expressed in Years.
       */
      get years() {
        return this.days / 365;
      }
    };
    _a = JSII_RTTI_SYMBOL_1;
    Duration[_a] = { fqn: "@winglang/sdk.std.Duration", version: "0.0.0" };
    exports2.Duration = Duration;
  }
});

var require_generics = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/std/generics.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.T1 = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var T1 = class {
    };
    _a = JSII_RTTI_SYMBOL_1;
    T1[_a] = { fqn: "@winglang/sdk.std.T1", version: "0.0.0" };
    exports2.T1 = T1;
  }
});

var require_json = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/std/json.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MutJson = exports2.Json = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_core();
    var Json = class {
      /**
       * @internal
       */
      static _toInflightType() {
        return core_1.InflightClient.forType(__filename, this.name);
      }
      /**
       * Returns the keys from the Json.
       *
       * @macro (Object.keys($args$))
       *
       * @param json map to get the keys from
       * @returns the keys as Array<String>
       */
      static keys(json) {
        json;
        throw new Error("Macro");
      }
      /**
       * Returns the values from the Json.
       *
       * @macro (Object.values($args$))
       *
       * @param json map to get the values from
       * @returns the values as Array<Json>
       */
      static values(json) {
        json;
        throw new Error("Macro");
      }
      /**
       * Returns the entries from the Json.
       *
       * @macro (Object.entries($args$))
       *
       * @param json map to get the entries from
       * @returns the entries as Array<Json> consisting of enumerable [key, value] pairs
       */
      static entries(json) {
        json;
        throw new Error("Macro");
      }
      /**
       * Deletes a key in a given Json
       *
       * @macro ((args) => { delete (args[0])[args[1]]; })([$args$])
       *
       * @param json to delete key from
       * @param key the key to delete
       */
      static delete(json, key) {
        json;
        key;
        throw new Error("Macro");
      }
      /**
       * Formats Json as string
       *
       * @macro ((args) => { return JSON.stringify(args[0], null, args[1]?.indent) })([$args$])
       *
       * @param json to format as string
       * @returns string representation of the Json
       */
      static stringify(json, options) {
        json;
        options;
        throw new Error("Macro");
      }
      /**
       * Creates an immutable deep copy of the Json.
       *
       * @macro JSON.parse(JSON.stringify($args$))
       *
       * @param json to copy
       * @returns the immutable copy of the Json
       */
      static deepCopy(json) {
        json;
        throw new Error("Macro");
      }
      /**
       * Creates a mutable deep copy of the Json.
       *
       * @macro (JSON.parse(JSON.stringify($args$)))
       *
       * @param json to copy
       * @returns the mutable copy of the Json
       */
      static deepCopyMut(json) {
        json;
        throw new Error("Macro");
      }
      /**
       * Parse a string into a Json
       *
       * @macro (JSON.parse($args$))
       *
       * @param str to parse as Json
       * @returns Json representation of the string
       */
      static parse(str) {
        str;
        throw new Error("Macro");
      }
      /**
       * Try to parse a string into a Json
       *
       * @macro ((args) => { try { return (args === undefined) ? undefined : JSON.parse(args); } catch (err) { return undefined; } })($args$)
       *
       * @param str to parse as Json
       * @returns Json representation of the string or undefined if string is not parsable
       */
      static tryParse(str) {
        str;
        throw new Error("Macro");
      }
      /**
       * Checks if a Json object has a given key
       *
       * @macro ((args) => { return args[0].hasOwnProperty(args[1]); })([$args$])
       *
       * @param json The json object to inspect
       * @param key The key to check
       * @returns Boolean value corresponding to whether the key exists
       */
      static has(json, key) {
        json;
        key;
        throw new Error("Macro");
      }
      constructor() {
      }
      /**
       * Returns the value associated with the specified Json key
       *
       * @macro ((obj, args) => { if (obj[args] === undefined) throw new Error(`Json property "${args}" does not exist`); return obj[args] })($self$, $args$)
       *
       * @param key The key of the Json property
       * @returns The value associated with the specified Json key
       * @throws Json property does not exist if the given key is not part of an existing property
       */
      get(key) {
        key;
        throw new Error("Macro");
      }
      /**
       * Returns a specified element at a given index from Json Array
       *
       * @macro ((obj, args) => { if (obj[args] === undefined) throw new Error("Index out of bounds"); return obj[args] })($self$, $args$)
       *
       * @param index The index of the element in the Json Array to return
       * @returns The element at given index in Json Array
       * @throws index out of bounds error if the given index does not exist for the Json Array
       */
      getAt(index) {
        index;
        throw new Error("Macro");
      }
      /**
       * Optionally returns an specified element from the Json.
       *
       * @macro ($self$)?.[$args$]
       *
       * @param key The key of the element to return
       * @returns The element associated with the specified key, or undefined if the key can't be found
       */
      tryGet(key) {
        key;
        throw new Error("Macro");
      }
      /**
       * Optionally returns a specified element at a given index from Json Array
       *
       * @macro ($self$)?.[$args$]
       *
       * @param index The index of the element in the Json Array to return
       * @returns The element at given index in Json Array, or undefined if index is not valid
       */
      tryGetAt(index) {
        index;
        throw new Error("Macro");
      }
      /**
       * Convert Json element to string if possible.
       *
       * @macro ((arg) => { if (typeof arg !== "string") {throw new Error("unable to parse " + typeof arg + " " + arg + " as a string")}; return JSON.parse(JSON.stringify(arg)) })($self$)
       *
       * @returns a string.
       */
      asStr() {
        throw new Error("Macro");
      }
      /**
       * Convert Json element to string if possible.
       *
       * @macro ((arg) => { return (typeof arg === "string") ? JSON.parse(JSON.stringify(arg)) : undefined })($self$)
       *
       * @returns a string.
       */
      tryAsStr() {
        throw new Error("Macro");
      }
      /**
       * Convert Json element to number if possible.
       *
       * @macro ((arg) => { if (typeof arg !== "number") {throw new Error("unable to parse " + typeof arg + " " + arg + " as a number")}; return JSON.parse(JSON.stringify(arg)) })($self$)
       *
       * @returns a number.
       */
      asNum() {
        throw new Error("Macro");
      }
      /**
       * Convert Json element to number if possible.
       *
       * @macro ((arg) => { return (typeof arg === "number") ? JSON.parse(JSON.stringify(arg)) : undefined })($self$)
       *
       * @returns a number.
       */
      tryAsNum() {
        throw new Error("Macro");
      }
      /**
       * Convert Json element to boolean if possible.
       *
       * @macro ((arg) => { if (typeof arg !== "boolean") {throw new Error("unable to parse " + typeof arg + " " + arg + " as a boolean")}; return JSON.parse(JSON.stringify(arg)) })($self$)
       *
       * @returns a boolean.
       */
      asBool() {
        throw new Error("Macro");
      }
      /**
       * Convert Json element to boolean if possible.
       *
       * @macro ((arg) => { return (typeof arg === "boolean") ? JSON.parse(JSON.stringify(arg)) : undefined })($self$)
       *
       * @returns a boolean.
       */
      tryAsBool() {
        throw new Error("Macro");
      }
    };
    _a = JSII_RTTI_SYMBOL_1;
    Json[_a] = { fqn: "@winglang/sdk.std.Json", version: "0.0.0" };
    exports2.Json = Json;
    var MutJson = class {
      /**
       * @internal
       */
      static _toInflightType() {
        return core_1.InflightClient.forType(__filename, this.name);
      }
      constructor() {
      }
      /**
       * Returns the value associated with the specified Json key
       *
       * @macro ((obj, args) => { if (obj[args] === undefined) throw new Error(`Json property "${args}" does not exist`); return obj[args] })($self$, $args$)
       *
       * @param key The key of the Json property
       * @returns The value associated with the specified Json key
       * @throws Json property does not exist if the given key is not part of an existing property
       */
      get(key) {
        key;
        throw new Error("Macro");
      }
      /**
       * Returns a specified element at a given index from MutJson Array
       *
       * @macro ((obj, args) => { if (obj[args] === undefined) throw new Error("Index out of bounds"); return obj[args] })($self$, $args$)
       *
       * @param index The index of the element in the MutJson Array to return
       * @returns The element at given index in MutJson Array
       * @throws index out of bounds error if the given index does not exist for the MutJson Array
       */
      getAt(index) {
        index;
        throw new Error("Macro");
      }
      /**
       * Adds or updates an element in MutJson with a specific key and value
       *
       * @macro ((obj, args) => { obj[args[0]] = args[1]; })($self$, [$args$])
       *
       * @param key The key of the element to add
       * @param value The value of the element to add
       */
      set(key, value) {
        key;
        value;
        throw new Error("Macro");
      }
      /**
       * Set element in MutJson Array with a specific key and value
       *
       * @macro ((obj, args) => { obj[args[0]] = args[1]; })($self$, [$args$])
       *
       * @param value The value of the element to set
       */
      setAt(index, value) {
        index;
        value;
        throw new Error("Macro");
      }
      /**
       * Optionally returns an specified element from the Json.
       *
       * @macro ($self$)?.[$args$]
       *
       * @param key The key of the element to return
       * @returns The element associated with the specified key, or undefined if the key can't be found
       */
      tryGet(key) {
        key;
        throw new Error("Macro");
      }
      /**
       * Optionally returns a specified element at a given index from Json Array
       *
       * @macro ($self$)?.[$args$]
       *
       * @param index The index of the element in the Json Array to return
       * @returns The element at given index in Json Array, or undefined if index is not valid
       */
      tryGetAt(index) {
        index;
        throw new Error("Macro");
      }
      /**
       * Convert Json element to string if possible.
       *
       * @macro ((arg) => { if (typeof arg !== "string") {throw new Error("unable to parse " + typeof arg + " " + arg + " as a string")}; return JSON.parse(JSON.stringify(arg)) })($self$)
       *
       * @returns a string.
       */
      asStr() {
        throw new Error("Macro");
      }
      /**
       * Convert Json element to string if possible.
       *
       * @macro ((arg) => { return (typeof arg === "string") ? JSON.parse(JSON.stringify(arg)) : undefined })($self$)
       *
       * @returns a string.
       */
      tryAsStr() {
        throw new Error("Macro");
      }
      /**
       * Convert Json element to number if possible.
       *
       * @macro ((arg) => { if (typeof arg !== "number") {throw new Error("unable to parse " + typeof arg + " " + arg + " as a number")}; return JSON.parse(JSON.stringify(arg)) })($self$)
       *
       * @returns a number.
       */
      asNum() {
        throw new Error("Macro");
      }
      /**
       * Convert Json element to number if possible.
       *
       * @macro ((arg) => { return (typeof arg === "number") ? JSON.parse(JSON.stringify(arg)) : undefined })($self$)
       *
       * @returns a number.
       */
      tryAsNum() {
        throw new Error("Macro");
      }
      /**
       * Convert Json element to boolean if possible.
       *
       * @macro ((arg) => { if (typeof arg !== "boolean") {throw new Error("unable to parse " + typeof arg + " " + arg + " as a boolean")}; return JSON.parse(JSON.stringify(arg)) })($self$)
       *
       * @returns a boolean.
       */
      asBool() {
        throw new Error("Macro");
      }
      /**
       * Convert Json element to boolean if possible.
       *
       * @macro ((arg) => { return (typeof arg === "boolean") ? JSON.parse(JSON.stringify(arg)) : undefined })($self$)
       *
       * @returns a boolean.
       */
      tryAsBool() {
        throw new Error("Macro");
      }
    };
    _b = JSII_RTTI_SYMBOL_1;
    MutJson[_b] = { fqn: "@winglang/sdk.std.MutJson", version: "0.0.0" };
    exports2.MutJson = MutJson;
  }
});

var require_helpers = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/jsonschema/lib/helpers.js"(exports2, module2) {
    "use strict";
    var uri = require("url");
    var ValidationError = exports2.ValidationError = function ValidationError2(message, instance, schema, path, name, argument) {
      if (Array.isArray(path)) {
        this.path = path;
        this.property = path.reduce(function(sum, item) {
          return sum + makeSuffix(item);
        }, "instance");
      } else if (path !== void 0) {
        this.property = path;
      }
      if (message) {
        this.message = message;
      }
      if (schema) {
        var id = schema.$id || schema.id;
        this.schema = id || schema;
      }
      if (instance !== void 0) {
        this.instance = instance;
      }
      this.name = name;
      this.argument = argument;
      this.stack = this.toString();
    };
    ValidationError.prototype.toString = function toString() {
      return this.property + " " + this.message;
    };
    var ValidatorResult = exports2.ValidatorResult = function ValidatorResult2(instance, schema, options, ctx) {
      this.instance = instance;
      this.schema = schema;
      this.options = options;
      this.path = ctx.path;
      this.propertyPath = ctx.propertyPath;
      this.errors = [];
      this.throwError = options && options.throwError;
      this.throwFirst = options && options.throwFirst;
      this.throwAll = options && options.throwAll;
      this.disableFormat = options && options.disableFormat === true;
    };
    ValidatorResult.prototype.addError = function addError(detail) {
      var err;
      if (typeof detail == "string") {
        err = new ValidationError(detail, this.instance, this.schema, this.path);
      } else {
        if (!detail)
          throw new Error("Missing error detail");
        if (!detail.message)
          throw new Error("Missing error message");
        if (!detail.name)
          throw new Error("Missing validator type");
        err = new ValidationError(detail.message, this.instance, this.schema, this.path, detail.name, detail.argument);
      }
      this.errors.push(err);
      if (this.throwFirst) {
        throw new ValidatorResultError(this);
      } else if (this.throwError) {
        throw err;
      }
      return err;
    };
    ValidatorResult.prototype.importErrors = function importErrors(res) {
      if (typeof res == "string" || res && res.validatorType) {
        this.addError(res);
      } else if (res && res.errors) {
        this.errors = this.errors.concat(res.errors);
      }
    };
    function stringizer(v, i) {
      return i + ": " + v.toString() + "\n";
    }
    ValidatorResult.prototype.toString = function toString(res) {
      return this.errors.map(stringizer).join("");
    };
    Object.defineProperty(ValidatorResult.prototype, "valid", { get: function() {
      return !this.errors.length;
    } });
    module2.exports.ValidatorResultError = ValidatorResultError;
    function ValidatorResultError(result) {
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, ValidatorResultError);
      }
      this.instance = result.instance;
      this.schema = result.schema;
      this.options = result.options;
      this.errors = result.errors;
    }
    ValidatorResultError.prototype = new Error();
    ValidatorResultError.prototype.constructor = ValidatorResultError;
    ValidatorResultError.prototype.name = "Validation Error";
    var SchemaError = exports2.SchemaError = function SchemaError2(msg, schema) {
      this.message = msg;
      this.schema = schema;
      Error.call(this, msg);
      Error.captureStackTrace(this, SchemaError2);
    };
    SchemaError.prototype = Object.create(
      Error.prototype,
      {
        constructor: { value: SchemaError, enumerable: false },
        name: { value: "SchemaError", enumerable: false }
      }
    );
    var SchemaContext = exports2.SchemaContext = function SchemaContext2(schema, options, path, base, schemas) {
      this.schema = schema;
      this.options = options;
      if (Array.isArray(path)) {
        this.path = path;
        this.propertyPath = path.reduce(function(sum, item) {
          return sum + makeSuffix(item);
        }, "instance");
      } else {
        this.propertyPath = path;
      }
      this.base = base;
      this.schemas = schemas;
    };
    SchemaContext.prototype.resolve = function resolve(target) {
      return uri.resolve(this.base, target);
    };
    SchemaContext.prototype.makeChild = function makeChild(schema, propertyName) {
      var path = propertyName === void 0 ? this.path : this.path.concat([propertyName]);
      var id = schema.$id || schema.id;
      var base = uri.resolve(this.base, id || "");
      var ctx = new SchemaContext(schema, this.options, path, base, Object.create(this.schemas));
      if (id && !ctx.schemas[base]) {
        ctx.schemas[base] = schema;
      }
      return ctx;
    };
    var FORMAT_REGEXPS = exports2.FORMAT_REGEXPS = {
      // 7.3.1. Dates, Times, and Duration
      "date-time": /^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])[tT ](2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])(\.\d+)?([zZ]|[+-]([0-5][0-9]):(60|[0-5][0-9]))$/,
      "date": /^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])$/,
      "time": /^(2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])$/,
      "duration": /P(T\d+(H(\d+M(\d+S)?)?|M(\d+S)?|S)|\d+(D|M(\d+D)?|Y(\d+M(\d+D)?)?)(T\d+(H(\d+M(\d+S)?)?|M(\d+S)?|S))?|\d+W)/i,
      // 7.3.2. Email Addresses
      // TODO: fix the email production
      "email": /^(?:[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+\.)*[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!\.)){0,61}[a-zA-Z0-9]?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\[(?:(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\.){3}(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\]))$/,
      "idn-email": /^("(?:[!#-\[\]-\u{10FFFF}]|\\[\t -\u{10FFFF}])*"|[!#-'*+\-/-9=?A-Z\^-\u{10FFFF}](?:\.?[!#-'*+\-/-9=?A-Z\^-\u{10FFFF}])*)@([!#-'*+\-/-9=?A-Z\^-\u{10FFFF}](?:\.?[!#-'*+\-/-9=?A-Z\^-\u{10FFFF}])*|\[[!-Z\^-\u{10FFFF}]*\])$/u,
      // 7.3.3. Hostnames
      // 7.3.4. IP Addresses
      "ip-address": /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,
      // FIXME whitespace is invalid
      "ipv6": /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/,
      // 7.3.5. Resource Identifiers
      // TODO: A more accurate regular expression for "uri" goes:
      // [A-Za-z][+\-.0-9A-Za-z]*:((/(/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?)?)?#(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|(/(/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?[/?]|[!$&-.0-;=?-Z_a-z~])|/?%[0-9A-Fa-f]{2}|[!$&-.0-;=?-Z_a-z~])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*(#(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*)?|/(/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+(:\d*)?|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?:\d*|\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?)?)?
      "uri": /^[a-zA-Z][a-zA-Z0-9+.-]*:[^\s]*$/,
      "uri-reference": /^(((([A-Za-z][+\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~]|[/?])|\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|([A-Za-z][+\-.0-9A-Za-z]*:?)?)|([A-Za-z][+\-.0-9A-Za-z]*:)?\/((%[0-9A-Fa-f]{2}|\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?[/?]|[!$&-.0-;=?-Z_a-z~])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|(\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?)?))#(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|(([A-Za-z][+\-.0-9A-Za-z]*)?%[0-9A-Fa-f]{2}|[!$&-.0-9;=@_~]|[A-Za-z][+\-.0-9A-Za-z]*[!$&-*,;=@_~])(%[0-9A-Fa-f]{2}|[!$&-.0-9;=@-Z_a-z~])*((([/?](%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*)?#|[/?])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*)?|([A-Za-z][+\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~]|[/?])|\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|([A-Za-z][+\-.0-9A-Za-z]*:)?\/((%[0-9A-Fa-f]{2}|\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?[/?]|[!$&-.0-;=?-Z_a-z~])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+(:\d*)?|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?:\d*|\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?)?|[A-Za-z][+\-.0-9A-Za-z]*:?)?$/,
      "iri": /^[a-zA-Z][a-zA-Z0-9+.-]*:[^\s]*$/,
      "iri-reference": /^(((([A-Za-z][+\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~-\u{10FFFF}]|[/?])|\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\u{10FFFF}])*|([A-Za-z][+\-.0-9A-Za-z]*:?)?)|([A-Za-z][+\-.0-9A-Za-z]*:)?\/((%[0-9A-Fa-f]{2}|\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\u{10FFFF}])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~-\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?[/?]|[!$&-.0-;=?-Z_a-z~-\u{10FFFF}])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\u{10FFFF}])*|(\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\u{10FFFF}])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~-\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?)?))#(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\u{10FFFF}])*|(([A-Za-z][+\-.0-9A-Za-z]*)?%[0-9A-Fa-f]{2}|[!$&-.0-9;=@_~-\u{10FFFF}]|[A-Za-z][+\-.0-9A-Za-z]*[!$&-*,;=@_~-\u{10FFFF}])(%[0-9A-Fa-f]{2}|[!$&-.0-9;=@-Z_a-z~-\u{10FFFF}])*((([/?](%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\u{10FFFF}])*)?#|[/?])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\u{10FFFF}])*)?|([A-Za-z][+\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~-\u{10FFFF}]|[/?])|\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\u{10FFFF}])*|([A-Za-z][+\-.0-9A-Za-z]*:)?\/((%[0-9A-Fa-f]{2}|\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\u{10FFFF}])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~-\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?[/?]|[!$&-.0-;=?-Z_a-z~-\u{10FFFF}])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\u{10FFFF}])*|\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\u{10FFFF}])+(:\d*)?|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~-\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\])?:\d*|\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~-\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\])?)?|[A-Za-z][+\-.0-9A-Za-z]*:?)?$/u,
      "uuid": /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i,
      // 7.3.6. uri-template
      "uri-template": /(%[0-9a-f]{2}|[!#$&(-;=?@\[\]_a-z~]|\{[!#&+,./;=?@|]?(%[0-9a-f]{2}|[0-9_a-z])(\.?(%[0-9a-f]{2}|[0-9_a-z]))*(:[1-9]\d{0,3}|\*)?(,(%[0-9a-f]{2}|[0-9_a-z])(\.?(%[0-9a-f]{2}|[0-9_a-z]))*(:[1-9]\d{0,3}|\*)?)*\})*/iu,
      // 7.3.7. JSON Pointers
      "json-pointer": /^(\/([\x00-\x2e0-@\[-}\x7f]|~[01])*)*$/iu,
      "relative-json-pointer": /^\d+(#|(\/([\x00-\x2e0-@\[-}\x7f]|~[01])*)*)$/iu,
      // hostname regex from: http://stackoverflow.com/a/1420225/5628
      "hostname": /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/,
      "host-name": /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/,
      "utc-millisec": function(input) {
        return typeof input === "string" && parseFloat(input) === parseInt(input, 10) && !isNaN(input);
      },
      // 7.3.8. regex
      "regex": function(input) {
        var result = true;
        try {
          new RegExp(input);
        } catch (e) {
          result = false;
        }
        return result;
      },
      // Other definitions
      // "style" was removed from JSON Schema in draft-4 and is deprecated
      "style": /[\r\n\t ]*[^\r\n\t ][^:]*:[\r\n\t ]*[^\r\n\t ;]*[\r\n\t ]*;?/,
      // "color" was removed from JSON Schema in draft-4 and is deprecated
      "color": /^(#?([0-9A-Fa-f]{3}){1,2}\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\(\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*\))|(rgb\(\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*\)))$/,
      "phone": /^\+(?:[0-9] ?){6,14}[0-9]$/,
      "alpha": /^[a-zA-Z]+$/,
      "alphanumeric": /^[a-zA-Z0-9]+$/
    };
    FORMAT_REGEXPS.regexp = FORMAT_REGEXPS.regex;
    FORMAT_REGEXPS.pattern = FORMAT_REGEXPS.regex;
    FORMAT_REGEXPS.ipv4 = FORMAT_REGEXPS["ip-address"];
    exports2.isFormat = function isFormat(input, format, validator) {
      if (typeof input === "string" && FORMAT_REGEXPS[format] !== void 0) {
        if (FORMAT_REGEXPS[format] instanceof RegExp) {
          return FORMAT_REGEXPS[format].test(input);
        }
        if (typeof FORMAT_REGEXPS[format] === "function") {
          return FORMAT_REGEXPS[format](input);
        }
      } else if (validator && validator.customFormats && typeof validator.customFormats[format] === "function") {
        return validator.customFormats[format](input);
      }
      return true;
    };
    var makeSuffix = exports2.makeSuffix = function makeSuffix2(key) {
      key = key.toString();
      if (!key.match(/[.\s\[\]]/) && !key.match(/^[\d]/)) {
        return "." + key;
      }
      if (key.match(/^\d+$/)) {
        return "[" + key + "]";
      }
      return "[" + JSON.stringify(key) + "]";
    };
    exports2.deepCompareStrict = function deepCompareStrict(a, b) {
      if (typeof a !== typeof b) {
        return false;
      }
      if (Array.isArray(a)) {
        if (!Array.isArray(b)) {
          return false;
        }
        if (a.length !== b.length) {
          return false;
        }
        return a.every(function(v, i) {
          return deepCompareStrict(a[i], b[i]);
        });
      }
      if (typeof a === "object") {
        if (!a || !b) {
          return a === b;
        }
        var aKeys = Object.keys(a);
        var bKeys = Object.keys(b);
        if (aKeys.length !== bKeys.length) {
          return false;
        }
        return aKeys.every(function(v) {
          return deepCompareStrict(a[v], b[v]);
        });
      }
      return a === b;
    };
    function deepMerger(target, dst, e, i) {
      if (typeof e === "object") {
        dst[i] = deepMerge(target[i], e);
      } else {
        if (target.indexOf(e) === -1) {
          dst.push(e);
        }
      }
    }
    function copyist(src, dst, key) {
      dst[key] = src[key];
    }
    function copyistWithDeepMerge(target, src, dst, key) {
      if (typeof src[key] !== "object" || !src[key]) {
        dst[key] = src[key];
      } else {
        if (!target[key]) {
          dst[key] = src[key];
        } else {
          dst[key] = deepMerge(target[key], src[key]);
        }
      }
    }
    function deepMerge(target, src) {
      var array = Array.isArray(src);
      var dst = array && [] || {};
      if (array) {
        target = target || [];
        dst = dst.concat(target);
        src.forEach(deepMerger.bind(null, target, dst));
      } else {
        if (target && typeof target === "object") {
          Object.keys(target).forEach(copyist.bind(null, target, dst));
        }
        Object.keys(src).forEach(copyistWithDeepMerge.bind(null, target, src, dst));
      }
      return dst;
    }
    module2.exports.deepMerge = deepMerge;
    exports2.objectGetPath = function objectGetPath(o, s) {
      var parts = s.split("/").slice(1);
      var k;
      while (typeof (k = parts.shift()) == "string") {
        var n = decodeURIComponent(k.replace(/~0/, "~").replace(/~1/g, "/"));
        if (!(n in o))
          return;
        o = o[n];
      }
      return o;
    };
    function pathEncoder(v) {
      return "/" + encodeURIComponent(v).replace(/~/g, "%7E");
    }
    exports2.encodePath = function encodePointer(a) {
      return a.map(pathEncoder).join("");
    };
    exports2.getDecimalPlaces = function getDecimalPlaces(number) {
      var decimalPlaces = 0;
      if (isNaN(number))
        return decimalPlaces;
      if (typeof number !== "number") {
        number = Number(number);
      }
      var parts = number.toString().split("e");
      if (parts.length === 2) {
        if (parts[1][0] !== "-") {
          return decimalPlaces;
        } else {
          decimalPlaces = Number(parts[1].slice(1));
        }
      }
      var decimalParts = parts[0].split(".");
      if (decimalParts.length === 2) {
        decimalPlaces += decimalParts[1].length;
      }
      return decimalPlaces;
    };
    exports2.isSchema = function isSchema(val2) {
      return typeof val2 === "object" && val2 || typeof val2 === "boolean";
    };
  }
});

var require_attribute = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/jsonschema/lib/attribute.js"(exports2, module2) {
    "use strict";
    var helpers = require_helpers();
    var ValidatorResult = helpers.ValidatorResult;
    var SchemaError = helpers.SchemaError;
    var attribute = {};
    attribute.ignoreProperties = {
      // informative properties
      "id": true,
      "default": true,
      "description": true,
      "title": true,
      // arguments to other properties
      "additionalItems": true,
      "then": true,
      "else": true,
      // special-handled properties
      "$schema": true,
      "$ref": true,
      "extends": true
    };
    var validators = attribute.validators = {};
    validators.type = function validateType(instance, schema, options, ctx) {
      if (instance === void 0) {
        return null;
      }
      var result = new ValidatorResult(instance, schema, options, ctx);
      var types = Array.isArray(schema.type) ? schema.type : [schema.type];
      if (!types.some(this.testType.bind(this, instance, schema, options, ctx))) {
        var list = types.map(function(v) {
          if (!v)
            return;
          var id = v.$id || v.id;
          return id ? "<" + id + ">" : v + "";
        });
        result.addError({
          name: "type",
          argument: list,
          message: "is not of a type(s) " + list
        });
      }
      return result;
    };
    function testSchemaNoThrow(instance, options, ctx, callback, schema) {
      var throwError = options.throwError;
      var throwAll = options.throwAll;
      options.throwError = false;
      options.throwAll = false;
      var res = this.validateSchema(instance, schema, options, ctx);
      options.throwError = throwError;
      options.throwAll = throwAll;
      if (!res.valid && callback instanceof Function) {
        callback(res);
      }
      return res.valid;
    }
    validators.anyOf = function validateAnyOf(instance, schema, options, ctx) {
      if (instance === void 0) {
        return null;
      }
      var result = new ValidatorResult(instance, schema, options, ctx);
      var inner = new ValidatorResult(instance, schema, options, ctx);
      if (!Array.isArray(schema.anyOf)) {
        throw new SchemaError("anyOf must be an array");
      }
      if (!schema.anyOf.some(
        testSchemaNoThrow.bind(
          this,
          instance,
          options,
          ctx,
          function(res) {
            inner.importErrors(res);
          }
        )
      )) {
        var list = schema.anyOf.map(function(v, i) {
          var id = v.$id || v.id;
          if (id)
            return "<" + id + ">";
          return v.title && JSON.stringify(v.title) || v["$ref"] && "<" + v["$ref"] + ">" || "[subschema " + i + "]";
        });
        if (options.nestedErrors) {
          result.importErrors(inner);
        }
        result.addError({
          name: "anyOf",
          argument: list,
          message: "is not any of " + list.join(",")
        });
      }
      return result;
    };
    validators.allOf = function validateAllOf(instance, schema, options, ctx) {
      if (instance === void 0) {
        return null;
      }
      if (!Array.isArray(schema.allOf)) {
        throw new SchemaError("allOf must be an array");
      }
      var result = new ValidatorResult(instance, schema, options, ctx);
      var self = this;
      schema.allOf.forEach(function(v, i) {
        var valid = self.validateSchema(instance, v, options, ctx);
        if (!valid.valid) {
          var id = v.$id || v.id;
          var msg = id || v.title && JSON.stringify(v.title) || v["$ref"] && "<" + v["$ref"] + ">" || "[subschema " + i + "]";
          result.addError({
            name: "allOf",
            argument: { id: msg, length: valid.errors.length, valid },
            message: "does not match allOf schema " + msg + " with " + valid.errors.length + " error[s]:"
          });
          result.importErrors(valid);
        }
      });
      return result;
    };
    validators.oneOf = function validateOneOf(instance, schema, options, ctx) {
      if (instance === void 0) {
        return null;
      }
      if (!Array.isArray(schema.oneOf)) {
        throw new SchemaError("oneOf must be an array");
      }
      var result = new ValidatorResult(instance, schema, options, ctx);
      var inner = new ValidatorResult(instance, schema, options, ctx);
      var count = schema.oneOf.filter(
        testSchemaNoThrow.bind(
          this,
          instance,
          options,
          ctx,
          function(res) {
            inner.importErrors(res);
          }
        )
      ).length;
      var list = schema.oneOf.map(function(v, i) {
        var id = v.$id || v.id;
        return id || v.title && JSON.stringify(v.title) || v["$ref"] && "<" + v["$ref"] + ">" || "[subschema " + i + "]";
      });
      if (count !== 1) {
        if (options.nestedErrors) {
          result.importErrors(inner);
        }
        result.addError({
          name: "oneOf",
          argument: list,
          message: "is not exactly one from " + list.join(",")
        });
      }
      return result;
    };
    validators.if = function validateIf(instance, schema, options, ctx) {
      if (instance === void 0)
        return null;
      if (!helpers.isSchema(schema.if))
        throw new Error('Expected "if" keyword to be a schema');
      var ifValid = testSchemaNoThrow.call(this, instance, options, ctx, null, schema.if);
      var result = new ValidatorResult(instance, schema, options, ctx);
      var res;
      if (ifValid) {
        if (schema.then === void 0)
          return;
        if (!helpers.isSchema(schema.then))
          throw new Error('Expected "then" keyword to be a schema');
        res = this.validateSchema(instance, schema.then, options, ctx.makeChild(schema.then));
        result.importErrors(res);
      } else {
        if (schema.else === void 0)
          return;
        if (!helpers.isSchema(schema.else))
          throw new Error('Expected "else" keyword to be a schema');
        res = this.validateSchema(instance, schema.else, options, ctx.makeChild(schema.else));
        result.importErrors(res);
      }
      return result;
    };
    function getEnumerableProperty(object, key) {
      if (Object.hasOwnProperty.call(object, key))
        return object[key];
      if (!(key in object))
        return;
      while (object = Object.getPrototypeOf(object)) {
        if (Object.propertyIsEnumerable.call(object, key))
          return object[key];
      }
    }
    validators.propertyNames = function validatePropertyNames(instance, schema, options, ctx) {
      if (!this.types.object(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var subschema = schema.propertyNames !== void 0 ? schema.propertyNames : {};
      if (!helpers.isSchema(subschema))
        throw new SchemaError('Expected "propertyNames" to be a schema (object or boolean)');
      for (var property in instance) {
        if (getEnumerableProperty(instance, property) !== void 0) {
          var res = this.validateSchema(property, subschema, options, ctx.makeChild(subschema));
          result.importErrors(res);
        }
      }
      return result;
    };
    validators.properties = function validateProperties(instance, schema, options, ctx) {
      if (!this.types.object(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var properties = schema.properties || {};
      for (var property in properties) {
        var subschema = properties[property];
        if (subschema === void 0) {
          continue;
        } else if (subschema === null) {
          throw new SchemaError('Unexpected null, expected schema in "properties"');
        }
        if (typeof options.preValidateProperty == "function") {
          options.preValidateProperty(instance, property, subschema, options, ctx);
        }
        var prop = getEnumerableProperty(instance, property);
        var res = this.validateSchema(prop, subschema, options, ctx.makeChild(subschema, property));
        if (res.instance !== result.instance[property])
          result.instance[property] = res.instance;
        result.importErrors(res);
      }
      return result;
    };
    function testAdditionalProperty(instance, schema, options, ctx, property, result) {
      if (!this.types.object(instance))
        return;
      if (schema.properties && schema.properties[property] !== void 0) {
        return;
      }
      if (schema.additionalProperties === false) {
        result.addError({
          name: "additionalProperties",
          argument: property,
          message: "is not allowed to have the additional property " + JSON.stringify(property)
        });
      } else {
        var additionalProperties = schema.additionalProperties || {};
        if (typeof options.preValidateProperty == "function") {
          options.preValidateProperty(instance, property, additionalProperties, options, ctx);
        }
        var res = this.validateSchema(instance[property], additionalProperties, options, ctx.makeChild(additionalProperties, property));
        if (res.instance !== result.instance[property])
          result.instance[property] = res.instance;
        result.importErrors(res);
      }
    }
    validators.patternProperties = function validatePatternProperties(instance, schema, options, ctx) {
      if (!this.types.object(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var patternProperties = schema.patternProperties || {};
      for (var property in instance) {
        var test = true;
        for (var pattern in patternProperties) {
          var subschema = patternProperties[pattern];
          if (subschema === void 0) {
            continue;
          } else if (subschema === null) {
            throw new SchemaError('Unexpected null, expected schema in "patternProperties"');
          }
          try {
            var regexp = new RegExp(pattern, "u");
          } catch (_e) {
            regexp = new RegExp(pattern);
          }
          if (!regexp.test(property)) {
            continue;
          }
          test = false;
          if (typeof options.preValidateProperty == "function") {
            options.preValidateProperty(instance, property, subschema, options, ctx);
          }
          var res = this.validateSchema(instance[property], subschema, options, ctx.makeChild(subschema, property));
          if (res.instance !== result.instance[property])
            result.instance[property] = res.instance;
          result.importErrors(res);
        }
        if (test) {
          testAdditionalProperty.call(this, instance, schema, options, ctx, property, result);
        }
      }
      return result;
    };
    validators.additionalProperties = function validateAdditionalProperties(instance, schema, options, ctx) {
      if (!this.types.object(instance))
        return;
      if (schema.patternProperties) {
        return null;
      }
      var result = new ValidatorResult(instance, schema, options, ctx);
      for (var property in instance) {
        testAdditionalProperty.call(this, instance, schema, options, ctx, property, result);
      }
      return result;
    };
    validators.minProperties = function validateMinProperties(instance, schema, options, ctx) {
      if (!this.types.object(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var keys = Object.keys(instance);
      if (!(keys.length >= schema.minProperties)) {
        result.addError({
          name: "minProperties",
          argument: schema.minProperties,
          message: "does not meet minimum property length of " + schema.minProperties
        });
      }
      return result;
    };
    validators.maxProperties = function validateMaxProperties(instance, schema, options, ctx) {
      if (!this.types.object(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var keys = Object.keys(instance);
      if (!(keys.length <= schema.maxProperties)) {
        result.addError({
          name: "maxProperties",
          argument: schema.maxProperties,
          message: "does not meet maximum property length of " + schema.maxProperties
        });
      }
      return result;
    };
    validators.items = function validateItems(instance, schema, options, ctx) {
      var self = this;
      if (!this.types.array(instance))
        return;
      if (schema.items === void 0)
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      instance.every(function(value, i) {
        if (Array.isArray(schema.items)) {
          var items = schema.items[i] === void 0 ? schema.additionalItems : schema.items[i];
        } else {
          var items = schema.items;
        }
        if (items === void 0) {
          return true;
        }
        if (items === false) {
          result.addError({
            name: "items",
            message: "additionalItems not permitted"
          });
          return false;
        }
        var res = self.validateSchema(value, items, options, ctx.makeChild(items, i));
        if (res.instance !== result.instance[i])
          result.instance[i] = res.instance;
        result.importErrors(res);
        return true;
      });
      return result;
    };
    validators.contains = function validateContains(instance, schema, options, ctx) {
      var self = this;
      if (!this.types.array(instance))
        return;
      if (schema.contains === void 0)
        return;
      if (!helpers.isSchema(schema.contains))
        throw new Error('Expected "contains" keyword to be a schema');
      var result = new ValidatorResult(instance, schema, options, ctx);
      var count = instance.some(function(value, i) {
        var res = self.validateSchema(value, schema.contains, options, ctx.makeChild(schema.contains, i));
        return res.errors.length === 0;
      });
      if (count === false) {
        result.addError({
          name: "contains",
          argument: schema.contains,
          message: "must contain an item matching given schema"
        });
      }
      return result;
    };
    validators.minimum = function validateMinimum(instance, schema, options, ctx) {
      if (!this.types.number(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      if (schema.exclusiveMinimum && schema.exclusiveMinimum === true) {
        if (!(instance > schema.minimum)) {
          result.addError({
            name: "minimum",
            argument: schema.minimum,
            message: "must be greater than " + schema.minimum
          });
        }
      } else {
        if (!(instance >= schema.minimum)) {
          result.addError({
            name: "minimum",
            argument: schema.minimum,
            message: "must be greater than or equal to " + schema.minimum
          });
        }
      }
      return result;
    };
    validators.maximum = function validateMaximum(instance, schema, options, ctx) {
      if (!this.types.number(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      if (schema.exclusiveMaximum && schema.exclusiveMaximum === true) {
        if (!(instance < schema.maximum)) {
          result.addError({
            name: "maximum",
            argument: schema.maximum,
            message: "must be less than " + schema.maximum
          });
        }
      } else {
        if (!(instance <= schema.maximum)) {
          result.addError({
            name: "maximum",
            argument: schema.maximum,
            message: "must be less than or equal to " + schema.maximum
          });
        }
      }
      return result;
    };
    validators.exclusiveMinimum = function validateExclusiveMinimum(instance, schema, options, ctx) {
      if (typeof schema.exclusiveMinimum === "boolean")
        return;
      if (!this.types.number(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var valid = instance > schema.exclusiveMinimum;
      if (!valid) {
        result.addError({
          name: "exclusiveMinimum",
          argument: schema.exclusiveMinimum,
          message: "must be strictly greater than " + schema.exclusiveMinimum
        });
      }
      return result;
    };
    validators.exclusiveMaximum = function validateExclusiveMaximum(instance, schema, options, ctx) {
      if (typeof schema.exclusiveMaximum === "boolean")
        return;
      if (!this.types.number(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var valid = instance < schema.exclusiveMaximum;
      if (!valid) {
        result.addError({
          name: "exclusiveMaximum",
          argument: schema.exclusiveMaximum,
          message: "must be strictly less than " + schema.exclusiveMaximum
        });
      }
      return result;
    };
    var validateMultipleOfOrDivisbleBy = function validateMultipleOfOrDivisbleBy2(instance, schema, options, ctx, validationType, errorMessage) {
      if (!this.types.number(instance))
        return;
      var validationArgument = schema[validationType];
      if (validationArgument == 0) {
        throw new SchemaError(validationType + " cannot be zero");
      }
      var result = new ValidatorResult(instance, schema, options, ctx);
      var instanceDecimals = helpers.getDecimalPlaces(instance);
      var divisorDecimals = helpers.getDecimalPlaces(validationArgument);
      var maxDecimals = Math.max(instanceDecimals, divisorDecimals);
      var multiplier = Math.pow(10, maxDecimals);
      if (Math.round(instance * multiplier) % Math.round(validationArgument * multiplier) !== 0) {
        result.addError({
          name: validationType,
          argument: validationArgument,
          message: errorMessage + JSON.stringify(validationArgument)
        });
      }
      return result;
    };
    validators.multipleOf = function validateMultipleOf(instance, schema, options, ctx) {
      return validateMultipleOfOrDivisbleBy.call(this, instance, schema, options, ctx, "multipleOf", "is not a multiple of (divisible by) ");
    };
    validators.divisibleBy = function validateDivisibleBy(instance, schema, options, ctx) {
      return validateMultipleOfOrDivisbleBy.call(this, instance, schema, options, ctx, "divisibleBy", "is not divisible by (multiple of) ");
    };
    validators.required = function validateRequired(instance, schema, options, ctx) {
      var result = new ValidatorResult(instance, schema, options, ctx);
      if (instance === void 0 && schema.required === true) {
        result.addError({
          name: "required",
          message: "is required"
        });
      } else if (this.types.object(instance) && Array.isArray(schema.required)) {
        schema.required.forEach(function(n) {
          if (getEnumerableProperty(instance, n) === void 0) {
            result.addError({
              name: "required",
              argument: n,
              message: "requires property " + JSON.stringify(n)
            });
          }
        });
      }
      return result;
    };
    validators.pattern = function validatePattern(instance, schema, options, ctx) {
      if (!this.types.string(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var pattern = schema.pattern;
      try {
        var regexp = new RegExp(pattern, "u");
      } catch (_e) {
        regexp = new RegExp(pattern);
      }
      if (!instance.match(regexp)) {
        result.addError({
          name: "pattern",
          argument: schema.pattern,
          message: "does not match pattern " + JSON.stringify(schema.pattern.toString())
        });
      }
      return result;
    };
    validators.format = function validateFormat(instance, schema, options, ctx) {
      if (instance === void 0)
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      if (!result.disableFormat && !helpers.isFormat(instance, schema.format, this)) {
        result.addError({
          name: "format",
          argument: schema.format,
          message: "does not conform to the " + JSON.stringify(schema.format) + " format"
        });
      }
      return result;
    };
    validators.minLength = function validateMinLength(instance, schema, options, ctx) {
      if (!this.types.string(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var hsp = instance.match(/[\uDC00-\uDFFF]/g);
      var length = instance.length - (hsp ? hsp.length : 0);
      if (!(length >= schema.minLength)) {
        result.addError({
          name: "minLength",
          argument: schema.minLength,
          message: "does not meet minimum length of " + schema.minLength
        });
      }
      return result;
    };
    validators.maxLength = function validateMaxLength(instance, schema, options, ctx) {
      if (!this.types.string(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var hsp = instance.match(/[\uDC00-\uDFFF]/g);
      var length = instance.length - (hsp ? hsp.length : 0);
      if (!(length <= schema.maxLength)) {
        result.addError({
          name: "maxLength",
          argument: schema.maxLength,
          message: "does not meet maximum length of " + schema.maxLength
        });
      }
      return result;
    };
    validators.minItems = function validateMinItems(instance, schema, options, ctx) {
      if (!this.types.array(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      if (!(instance.length >= schema.minItems)) {
        result.addError({
          name: "minItems",
          argument: schema.minItems,
          message: "does not meet minimum length of " + schema.minItems
        });
      }
      return result;
    };
    validators.maxItems = function validateMaxItems(instance, schema, options, ctx) {
      if (!this.types.array(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      if (!(instance.length <= schema.maxItems)) {
        result.addError({
          name: "maxItems",
          argument: schema.maxItems,
          message: "does not meet maximum length of " + schema.maxItems
        });
      }
      return result;
    };
    function testArrays(v, i, a) {
      var j, len = a.length;
      for (j = i + 1, len; j < len; j++) {
        if (helpers.deepCompareStrict(v, a[j])) {
          return false;
        }
      }
      return true;
    }
    validators.uniqueItems = function validateUniqueItems(instance, schema, options, ctx) {
      if (schema.uniqueItems !== true)
        return;
      if (!this.types.array(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      if (!instance.every(testArrays)) {
        result.addError({
          name: "uniqueItems",
          message: "contains duplicate item"
        });
      }
      return result;
    };
    validators.dependencies = function validateDependencies(instance, schema, options, ctx) {
      if (!this.types.object(instance))
        return;
      var result = new ValidatorResult(instance, schema, options, ctx);
      for (var property in schema.dependencies) {
        if (instance[property] === void 0) {
          continue;
        }
        var dep = schema.dependencies[property];
        var childContext = ctx.makeChild(dep, property);
        if (typeof dep == "string") {
          dep = [dep];
        }
        if (Array.isArray(dep)) {
          dep.forEach(function(prop) {
            if (instance[prop] === void 0) {
              result.addError({
                // FIXME there's two different "dependencies" errors here with slightly different outputs
                // Can we make these the same? Or should we create different error types?
                name: "dependencies",
                argument: childContext.propertyPath,
                message: "property " + prop + " not found, required by " + childContext.propertyPath
              });
            }
          });
        } else {
          var res = this.validateSchema(instance, dep, options, childContext);
          if (result.instance !== res.instance)
            result.instance = res.instance;
          if (res && res.errors.length) {
            result.addError({
              name: "dependencies",
              argument: childContext.propertyPath,
              message: "does not meet dependency required by " + childContext.propertyPath
            });
            result.importErrors(res);
          }
        }
      }
      return result;
    };
    validators["enum"] = function validateEnum(instance, schema, options, ctx) {
      if (instance === void 0) {
        return null;
      }
      if (!Array.isArray(schema["enum"])) {
        throw new SchemaError("enum expects an array", schema);
      }
      var result = new ValidatorResult(instance, schema, options, ctx);
      if (!schema["enum"].some(helpers.deepCompareStrict.bind(null, instance))) {
        result.addError({
          name: "enum",
          argument: schema["enum"],
          message: "is not one of enum values: " + schema["enum"].map(String).join(",")
        });
      }
      return result;
    };
    validators["const"] = function validateEnum(instance, schema, options, ctx) {
      if (instance === void 0) {
        return null;
      }
      var result = new ValidatorResult(instance, schema, options, ctx);
      if (!helpers.deepCompareStrict(schema["const"], instance)) {
        result.addError({
          name: "const",
          argument: schema["const"],
          message: "does not exactly match expected constant: " + schema["const"]
        });
      }
      return result;
    };
    validators.not = validators.disallow = function validateNot(instance, schema, options, ctx) {
      var self = this;
      if (instance === void 0)
        return null;
      var result = new ValidatorResult(instance, schema, options, ctx);
      var notTypes = schema.not || schema.disallow;
      if (!notTypes)
        return null;
      if (!Array.isArray(notTypes))
        notTypes = [notTypes];
      notTypes.forEach(function(type) {
        if (self.testType(instance, schema, options, ctx, type)) {
          var id = type && (type.$id || type.id);
          var schemaId = id || type;
          result.addError({
            name: "not",
            argument: schemaId,
            message: "is of prohibited type " + schemaId
          });
        }
      });
      return result;
    };
    module2.exports = attribute;
  }
});

var require_scan = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/jsonschema/lib/scan.js"(exports2, module2) {
    "use strict";
    var urilib = require("url");
    var helpers = require_helpers();
    module2.exports.SchemaScanResult = SchemaScanResult;
    function SchemaScanResult(found, ref) {
      this.id = found;
      this.ref = ref;
    }
    module2.exports.scan = function scan(base, schema) {
      function scanSchema(baseuri, schema2) {
        if (!schema2 || typeof schema2 != "object")
          return;
        if (schema2.$ref) {
          var resolvedUri = urilib.resolve(baseuri, schema2.$ref);
          ref[resolvedUri] = ref[resolvedUri] ? ref[resolvedUri] + 1 : 0;
          return;
        }
        var id = schema2.$id || schema2.id;
        var ourBase = id ? urilib.resolve(baseuri, id) : baseuri;
        if (ourBase) {
          if (ourBase.indexOf("#") < 0)
            ourBase += "#";
          if (found[ourBase]) {
            if (!helpers.deepCompareStrict(found[ourBase], schema2)) {
              throw new Error("Schema <" + ourBase + "> already exists with different definition");
            }
            return found[ourBase];
          }
          found[ourBase] = schema2;
          if (ourBase[ourBase.length - 1] == "#") {
            found[ourBase.substring(0, ourBase.length - 1)] = schema2;
          }
        }
        scanArray(ourBase + "/items", Array.isArray(schema2.items) ? schema2.items : [schema2.items]);
        scanArray(ourBase + "/extends", Array.isArray(schema2.extends) ? schema2.extends : [schema2.extends]);
        scanSchema(ourBase + "/additionalItems", schema2.additionalItems);
        scanObject(ourBase + "/properties", schema2.properties);
        scanSchema(ourBase + "/additionalProperties", schema2.additionalProperties);
        scanObject(ourBase + "/definitions", schema2.definitions);
        scanObject(ourBase + "/patternProperties", schema2.patternProperties);
        scanObject(ourBase + "/dependencies", schema2.dependencies);
        scanArray(ourBase + "/disallow", schema2.disallow);
        scanArray(ourBase + "/allOf", schema2.allOf);
        scanArray(ourBase + "/anyOf", schema2.anyOf);
        scanArray(ourBase + "/oneOf", schema2.oneOf);
        scanSchema(ourBase + "/not", schema2.not);
      }
      function scanArray(baseuri, schemas) {
        if (!Array.isArray(schemas))
          return;
        for (var i = 0; i < schemas.length; i++) {
          scanSchema(baseuri + "/" + i, schemas[i]);
        }
      }
      function scanObject(baseuri, schemas) {
        if (!schemas || typeof schemas != "object")
          return;
        for (var p in schemas) {
          scanSchema(baseuri + "/" + p, schemas[p]);
        }
      }
      var found = {};
      var ref = {};
      scanSchema(base, schema);
      return new SchemaScanResult(found, ref);
    };
  }
});

var require_validator = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/jsonschema/lib/validator.js"(exports2, module2) {
    "use strict";
    var urilib = require("url");
    var attribute = require_attribute();
    var helpers = require_helpers();
    var scanSchema = require_scan().scan;
    var ValidatorResult = helpers.ValidatorResult;
    var ValidatorResultError = helpers.ValidatorResultError;
    var SchemaError = helpers.SchemaError;
    var SchemaContext = helpers.SchemaContext;
    var anonymousBase = "/";
    var Validator = function Validator2() {
      this.customFormats = Object.create(Validator2.prototype.customFormats);
      this.schemas = {};
      this.unresolvedRefs = [];
      this.types = Object.create(types);
      this.attributes = Object.create(attribute.validators);
    };
    Validator.prototype.customFormats = {};
    Validator.prototype.schemas = null;
    Validator.prototype.types = null;
    Validator.prototype.attributes = null;
    Validator.prototype.unresolvedRefs = null;
    Validator.prototype.addSchema = function addSchema(schema, base) {
      var self = this;
      if (!schema) {
        return null;
      }
      var scan = scanSchema(base || anonymousBase, schema);
      var ourUri = base || schema.$id || schema.id;
      for (var uri in scan.id) {
        this.schemas[uri] = scan.id[uri];
      }
      for (var uri in scan.ref) {
        this.unresolvedRefs.push(uri);
      }
      this.unresolvedRefs = this.unresolvedRefs.filter(function(uri2) {
        return typeof self.schemas[uri2] === "undefined";
      });
      return this.schemas[ourUri];
    };
    Validator.prototype.addSubSchemaArray = function addSubSchemaArray(baseuri, schemas) {
      if (!Array.isArray(schemas))
        return;
      for (var i = 0; i < schemas.length; i++) {
        this.addSubSchema(baseuri, schemas[i]);
      }
    };
    Validator.prototype.addSubSchemaObject = function addSubSchemaArray(baseuri, schemas) {
      if (!schemas || typeof schemas != "object")
        return;
      for (var p in schemas) {
        this.addSubSchema(baseuri, schemas[p]);
      }
    };
    Validator.prototype.setSchemas = function setSchemas(schemas) {
      this.schemas = schemas;
    };
    Validator.prototype.getSchema = function getSchema(urn) {
      return this.schemas[urn];
    };
    Validator.prototype.validate = function validate2(instance, schema, options, ctx) {
      if (typeof schema !== "boolean" && typeof schema !== "object" || schema === null) {
        throw new SchemaError("Expected `schema` to be an object or boolean");
      }
      if (!options) {
        options = {};
      }
      var id = schema.$id || schema.id;
      var base = urilib.resolve(options.base || anonymousBase, id || "");
      if (!ctx) {
        ctx = new SchemaContext(schema, options, [], base, Object.create(this.schemas));
        if (!ctx.schemas[base]) {
          ctx.schemas[base] = schema;
        }
        var found = scanSchema(base, schema);
        for (var n in found.id) {
          var sch = found.id[n];
          ctx.schemas[n] = sch;
        }
      }
      if (options.required && instance === void 0) {
        var result = new ValidatorResult(instance, schema, options, ctx);
        result.addError("is required, but is undefined");
        return result;
      }
      var result = this.validateSchema(instance, schema, options, ctx);
      if (!result) {
        throw new Error("Result undefined");
      } else if (options.throwAll && result.errors.length) {
        throw new ValidatorResultError(result);
      }
      return result;
    };
    function shouldResolve(schema) {
      var ref = typeof schema === "string" ? schema : schema.$ref;
      if (typeof ref == "string")
        return ref;
      return false;
    }
    Validator.prototype.validateSchema = function validateSchema(instance, schema, options, ctx) {
      var result = new ValidatorResult(instance, schema, options, ctx);
      if (typeof schema === "boolean") {
        if (schema === true) {
          schema = {};
        } else if (schema === false) {
          schema = { type: [] };
        }
      } else if (!schema) {
        throw new Error("schema is undefined");
      }
      if (schema["extends"]) {
        if (Array.isArray(schema["extends"])) {
          var schemaobj = { schema, ctx };
          schema["extends"].forEach(this.schemaTraverser.bind(this, schemaobj));
          schema = schemaobj.schema;
          schemaobj.schema = null;
          schemaobj.ctx = null;
          schemaobj = null;
        } else {
          schema = helpers.deepMerge(schema, this.superResolve(schema["extends"], ctx));
        }
      }
      var switchSchema = shouldResolve(schema);
      if (switchSchema) {
        var resolved = this.resolve(schema, switchSchema, ctx);
        var subctx = new SchemaContext(resolved.subschema, options, ctx.path, resolved.switchSchema, ctx.schemas);
        return this.validateSchema(instance, resolved.subschema, options, subctx);
      }
      var skipAttributes = options && options.skipAttributes || [];
      for (var key in schema) {
        if (!attribute.ignoreProperties[key] && skipAttributes.indexOf(key) < 0) {
          var validatorErr = null;
          var validator = this.attributes[key];
          if (validator) {
            validatorErr = validator.call(this, instance, schema, options, ctx);
          } else if (options.allowUnknownAttributes === false) {
            throw new SchemaError("Unsupported attribute: " + key, schema);
          }
          if (validatorErr) {
            result.importErrors(validatorErr);
          }
        }
      }
      if (typeof options.rewrite == "function") {
        var value = options.rewrite.call(this, instance, schema, options, ctx);
        result.instance = value;
      }
      return result;
    };
    Validator.prototype.schemaTraverser = function schemaTraverser(schemaobj, s) {
      schemaobj.schema = helpers.deepMerge(schemaobj.schema, this.superResolve(s, schemaobj.ctx));
    };
    Validator.prototype.superResolve = function superResolve(schema, ctx) {
      var ref = shouldResolve(schema);
      if (ref) {
        return this.resolve(schema, ref, ctx).subschema;
      }
      return schema;
    };
    Validator.prototype.resolve = function resolve(schema, switchSchema, ctx) {
      switchSchema = ctx.resolve(switchSchema);
      if (ctx.schemas[switchSchema]) {
        return { subschema: ctx.schemas[switchSchema], switchSchema };
      }
      var parsed = urilib.parse(switchSchema);
      var fragment = parsed && parsed.hash;
      var document2 = fragment && fragment.length && switchSchema.substr(0, switchSchema.length - fragment.length);
      if (!document2 || !ctx.schemas[document2]) {
        throw new SchemaError("no such schema <" + switchSchema + ">", schema);
      }
      var subschema = helpers.objectGetPath(ctx.schemas[document2], fragment.substr(1));
      if (subschema === void 0) {
        throw new SchemaError("no such schema " + fragment + " located in <" + document2 + ">", schema);
      }
      return { subschema, switchSchema };
    };
    Validator.prototype.testType = function validateType(instance, schema, options, ctx, type) {
      if (type === void 0) {
        return;
      } else if (type === null) {
        throw new SchemaError('Unexpected null in "type" keyword');
      }
      if (typeof this.types[type] == "function") {
        return this.types[type].call(this, instance);
      }
      if (type && typeof type == "object") {
        var res = this.validateSchema(instance, type, options, ctx);
        return res === void 0 || !(res && res.errors.length);
      }
      return true;
    };
    var types = Validator.prototype.types = {};
    types.string = function testString(instance) {
      return typeof instance == "string";
    };
    types.number = function testNumber(instance) {
      return typeof instance == "number" && isFinite(instance);
    };
    types.integer = function testInteger(instance) {
      return typeof instance == "number" && instance % 1 === 0;
    };
    types.boolean = function testBoolean(instance) {
      return typeof instance == "boolean";
    };
    types.array = function testArray(instance) {
      return Array.isArray(instance);
    };
    types["null"] = function testNull(instance) {
      return instance === null;
    };
    types.date = function testDate(instance) {
      return instance instanceof Date;
    };
    types.any = function testAny(instance) {
      return true;
    };
    types.object = function testObject(instance) {
      return instance && typeof instance === "object" && !Array.isArray(instance) && !(instance instanceof Date);
    };
    module2.exports = Validator;
  }
});

var require_lib2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/jsonschema/lib/index.js"(exports2, module2) {
    "use strict";
    var Validator = module2.exports.Validator = require_validator();
    module2.exports.ValidatorResult = require_helpers().ValidatorResult;
    module2.exports.ValidatorResultError = require_helpers().ValidatorResultError;
    module2.exports.ValidationError = require_helpers().ValidationError;
    module2.exports.SchemaError = require_helpers().SchemaError;
    module2.exports.SchemaScanResult = require_scan().SchemaScanResult;
    module2.exports.scan = require_scan().scan;
    module2.exports.validate = function(instance, schema, options) {
      var v = new Validator();
      return v.validate(instance, schema, options);
    };
  }
});

var require_json_schema = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/std/json_schema.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.JsonSchema = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var jsonschema_1 = require_lib2();
    var core_1 = require_core();
    var JsonSchema = class _JsonSchema {
      /**
       * @internal
       */
      static _toInflightType(schema) {
        return core_1.InflightClient.forType(__filename, `${this.name}._createJsonSchema(${JSON.stringify(schema)})`);
      }
      /**
       * Static method for creating a StructSchema used for lifting a struct to an inflight type
       *
       * @internal
       */
      static _createJsonSchema(schema) {
        return new _JsonSchema(schema);
      }
      constructor(schema) {
        this.jsonSchema = schema;
        this.validator = new jsonschema_1.Validator();
      }
      /**
       * Attempt to validate a json object against the schema
       *
       * @param obj the Json object to validate
       * @throws an error if the json object is not valid
       */
      validate(obj) {
        const result = this.validator.validate(obj, this.jsonSchema);
        if (result.errors.length > 0) {
          throw new Error(`unable to parse ${this.jsonSchema.id.replace("/", "")}:
- ${result.errors.join("\n- ")}`);
        }
      }
      /**
       * Retrieve the json schema as a string
       *
       * @returns the schema as a string
       */
      asStr() {
        return JSON.stringify(this.jsonSchema);
      }
      /** @internal */
      _fromJson(obj) {
        this.validate(obj);
        return obj;
      }
      /** @internal */
      _tryFromJson(obj) {
        try {
          return this._fromJson(obj);
        } catch {
          return void 0;
        }
      }
      /** @internal */
      _toInflightType() {
        return _JsonSchema._toInflightType(this.jsonSchema);
      }
    };
    _a = JSII_RTTI_SYMBOL_1;
    JsonSchema[_a] = { fqn: "@winglang/sdk.std.JsonSchema", version: "0.0.0" };
    exports2.JsonSchema = JsonSchema;
  }
});

var require_map = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/std/map.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MutMap = exports2.Map = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_core();
    var Map2 = class {
      /**
       * @internal
       */
      static _toInflightType() {
        return core_1.InflightClient.forType(__filename, this.name);
      }
      constructor() {
      }
      /**
       * Returns the number of elements in the map.
       *
       * TODO: For now this has to be a method rather than a getter as macros only work on methods https://github.com/winglang/wing/issues/1658
       * @macro Object.keys($self$).length
       *
       * @returns The number of elements in map
       */
      size() {
        throw new Error("Macro");
      }
      /**
       * Returns a specified element from the map.
       *
       * If the value that is associated to the provided key is an object, then you will get a reference
       * to that object and any change made to that object will effectively modify it inside the map.
       *
       * @macro ($self$)[$args$]
       *
       * @param key The key of the element to return.
       * @returns The element associated with the specified key, or undefined if the key can't be found
       */
      get(key) {
        key;
        throw new Error("Macro");
      }
      /**
       * Returns a boolean indicating whether an element with the specified key exists or not.
       *
       * @macro ($args$ in ($self$))
       *
       * @param key The key of the element to test for presence
       * @returns true if an element with the specified key exists in the map; otherwise false.
       */
      has(key) {
        key;
        throw new Error("Macro");
      }
      /**
       * Create a mutable shallow copy of this map
       *
       * @macro {...($self$)}
       *
       * @returns a MutableMap with the same values as this map
       */
      copyMut() {
        throw new Error("Macro");
      }
      /**
       * Returns the keys of this map
       *
       * @macro Object.keys($self$)
       *
       * @returns an array containing the keys of this map
       */
      keys() {
        throw new Error("Macro");
      }
      /**
       * Returns the values of this map
       *
       * @macro Object.values($self$)
       *
       * @returns an array of type T containing the values of this map
       */
      values() {
        throw new Error("Macro");
      }
    };
    _a = JSII_RTTI_SYMBOL_1;
    Map2[_a] = { fqn: "@winglang/sdk.std.Map", version: "0.0.0" };
    exports2.Map = Map2;
    var MutMap = class {
      /**
       * @internal
       */
      static _toInflightType() {
        return core_1.InflightClient.forType(__filename, this.name);
      }
      constructor() {
      }
      /**
       * Returns the number of elements in the map.
       *
       * TODO: For now this has to be a method rather than a getter as macros only work on methods https://github.com/winglang/wing/issues/1658
       * @macro Object.keys($self$).length
       *
       * @returns The number of elements in map
       */
      size() {
        throw new Error("Macro");
      }
      /**
       * Removes all elements
       *
       * @macro ((map) => { for(const k in map){delete map[k]}; })($self$)
       */
      clear() {
        throw new Error("Macro");
      }
      /**
       * Create an immutable shallow copy of this map
       *
       * @macro ({...($self$)})
       *
       * @returns an ImmutableMap with the same values as this map
       */
      copy() {
        throw new Error("Macro");
      }
      /**
       * Removes the specified element from a map.
       *
       * @macro (delete ($self$)[$args$])
       *
       * @param key The key
       * @returns true if the given key is no longer present
       */
      delete(key) {
        key;
        throw new Error("Macro");
      }
      /**
       * Returns a specified element from the map.
       *
       * If the value that is associated to the provided key is an object, then you will get a reference
       * to that object and any change made to that object will effectively modify it inside the map.
       *
       * @macro ($self$)[$args$]
       *
       * @param key The key of the element to return.
       * @returns The element associated with the specified key, or undefined if the key can't be found
       */
      get(key) {
        key;
        throw new Error("Macro");
      }
      /**
       * Returns a boolean indicating whether an element with the specified key exists or not.
       *
       * @macro ($args$ in ($self$))
       *
       * @param key The key of the element to test for presence
       * @returns true if an element with the specified key exists in the map; otherwise false.
       */
      has(key) {
        key;
        throw new Error("Macro");
      }
      /**
       * Adds or updates an entry in a Map object with a specified key and a value.
       *
       * TODO: revisit this macro after we support indexed args https://github.com/winglang/wing/issues/1659
       * @macro ((obj, args) => { obj[args[0]] = args[1]; })($self$, [$args$])
       *
       * @param key The key of the element to add
       * @param value The value of the element to add
       */
      set(key, value) {
        key;
        value;
        throw new Error("Macro");
      }
      /**
       * Returns the keys of this map
       *
       * @macro Object.keys($self$)
       *
       * @returns an array containing the keys of this map
       */
      keys() {
        throw new Error("Macro");
      }
      /**
       * Returns the values of this map
       *
       * @macro Object.values($self$)
       *
       * @returns an array containing of type T the values of this map
       */
      values() {
        throw new Error("Macro");
      }
    };
    _b = JSII_RTTI_SYMBOL_1;
    MutMap[_b] = { fqn: "@winglang/sdk.std.MutMap", version: "0.0.0" };
    exports2.MutMap = MutMap;
  }
});

var require_node = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/std/node.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Node = exports2.SDK_SOURCE_MODULE = exports2.CONNECTIONS_FILE_PATH = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var constructs_1 = require_lib();
    var core_1 = require_core();
    var NODE_SYMBOL = Symbol.for("@winglang/sdk.std.Node");
    exports2.CONNECTIONS_FILE_PATH = "connections.json";
    exports2.SDK_SOURCE_MODULE = "@winglang/sdk";
    var Node = class _Node {
      /**
       * Return the internal construct node.
       */
      static of(construct) {
        let node = construct[NODE_SYMBOL];
        if (!node) {
          node = new _Node(construct);
          construct[NODE_SYMBOL] = node;
        }
        return node;
      }
      constructor(construct) {
        this._constructsNode = construct.node;
        this._connections = core_1.Connections.of(construct);
      }
      /**
       * Adds a connection between two constructs. A connection is a piece of
       * metadata describing how one construct is related to another construct.
       */
      addConnection(props) {
        this._connections.add(props);
      }
      // ---- constructs 10.x APIs ----
      // https://github.com/aws/constructs/blob/10.x/src/construct.ts
      /**
       * Returns the scope in which this construct is defined.
       *
       * The value is `undefined` at the root of the construct scope tree.
       */
      get scope() {
        return this._constructsNode.scope;
      }
      /**
       * The id of this construct within the current scope.
       *
       * This is a a scope-unique id. To obtain an app-unique id for this construct, use `addr`.
       */
      get id() {
        return this._constructsNode.id;
      }
      /**
       * The full, absolute path of this construct in the tree.
       *
       * Components are separated by '/'.
       */
      get path() {
        return this._constructsNode.path;
      }
      /**
       * Returns an opaque tree-unique address for this construct.
       *
       * Addresses are 42 characters hexadecimal strings. They begin with "c8"
       * followed by 40 lowercase hexadecimal characters (0-9a-f).
       *
       * Addresses are calculated using a SHA-1 of the components of the construct
       * path.
       *
       * To enable refactorings of construct trees, constructs with the ID `Default`
       * will be excluded from the calculation. In those cases constructs in the
       * same tree may have the same addreess.
       *
       * @example c83a2846e506bcc5f10682b564084bca2d275709ee
       */
      get addr() {
        return this._constructsNode.addr;
      }
      /**
       * Return a direct child by id, or undefined
       *
       * @param id Identifier of direct child
       * @returns the child if found, or undefined
       */
      tryFindChild(id) {
        return this._constructsNode.tryFindChild(id);
      }
      /**
       * Return a direct child by id
       *
       * Throws an error if the child is not found.
       *
       * @param id Identifier of direct child
       * @returns Child with the given id.
       */
      findChild(id) {
        return this._constructsNode.findChild(id);
      }
      /**
       * Returns the child construct that has the id `Default` or `Resource"`.
       * This is usually the construct that provides the bulk of the underlying functionality.
       * Useful for modifications of the underlying construct that are not available at the higher levels.
       *
       * @throws if there is more than one child
       * @returns a construct or undefined if there is no default child
       */
      get defaultChild() {
        return this._constructsNode.defaultChild;
      }
      /**
       * Override the defaultChild property.
       *
       * This should only be used in the cases where the correct
       * default child is not named 'Resource' or 'Default' as it
       * should be.
       *
       * If you set this to undefined, the default behavior of finding
       * the child named 'Resource' or 'Default' will be used.
       */
      set defaultChild(value) {
        this._constructsNode.defaultChild = value;
      }
      /**
       * All direct children of this construct.
       */
      get children() {
        return this._constructsNode.children;
      }
      /**
       * Return this construct and all of its children in the given order
       */
      findAll(order = constructs_1.ConstructOrder.PREORDER) {
        return this._constructsNode.findAll(order);
      }
      /**
       * This can be used to set contextual values.
       * Context must be set before any children are added, since children may consult context info during construction.
       * If the key already exists, it will be overridden.
       * @param key The context key
       * @param value The context value
       */
      setContext(key, value) {
        this._constructsNode.setContext(key, value);
      }
      /**
       * Retrieves a value from tree context if present. Otherwise, would throw an error.
       *
       * Context is usually initialized at the root, but can be overridden at any point in the tree.
       *
       * @param key The context key
       * @returns The context value or throws error if there is no context value for this key
       */
      getContext(key) {
        return this._constructsNode.getContext(key);
      }
      /**
       * Retrieves a value from tree context.
       *
       * Context is usually initialized at the root, but can be overridden at any point in the tree.
       *
       * @param key The context key
       * @returns The context value or `undefined` if there is no context value for this key.
       */
      tryGetContext(key) {
        return this._constructsNode.tryGetContext(key);
      }
      /**
       * An immutable array of metadata objects associated with this construct.
       * This can be used, for example, to implement support for deprecation notices, source mapping, etc.
       */
      get metadata() {
        return this._constructsNode.metadata;
      }
      /**
       * Adds a metadata entry to this construct.
       * Entries are arbitrary values and will also include a stack trace to allow tracing back to
       * the code location for when the entry was added. It can be used, for example, to include source
       * mapping in CloudFormation templates to improve diagnostics.
       *
       * @param type a string denoting the type of metadata
       * @param data the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
       * @param options options
       */
      addMetadata(type, data, options = {}) {
        this._constructsNode.addMetadata(type, data, options);
      }
      /**
       * All parent scopes of this construct.
       *
       * @returns a list of parent scopes. The last element in the list will always
       * be the current construct and the first element will be the root of the
       * tree.
       */
      get scopes() {
        return this._constructsNode.scopes;
      }
      /**
       * Returns the root of the construct tree.
       * @returns The root of the construct tree.
       */
      get root() {
        return this._constructsNode.root;
      }
      /**
       * Returns true if this construct or the scopes in which it is defined are
       * locked.
       */
      get locked() {
        return this._constructsNode.locked;
      }
      /**
       * Add an ordering dependency on another construct.
       *
       * An `IDependable`
       */
      addDependency(...deps) {
        this._constructsNode.addDependency(...deps);
      }
      /**
       * Return all dependencies registered on this node (non-recursive).
       */
      get dependencies() {
        return this._constructsNode.dependencies;
      }
      /**
       * Remove the child with the given name, if present.
       *
       * @returns Whether a child with the given name was deleted.
       * @experimental
       */
      tryRemoveChild(childName) {
        return this._constructsNode.tryRemoveChild(childName);
      }
      /**
       * Adds a validation to this construct.
       *
       * When `node.validate()` is called, the `validate()` method will be called on
       * all validations and all errors will be returned.
       *
       * @param validation The validation object
       */
      addValidation(validation) {
        this._constructsNode.addValidation(validation);
      }
      /**
       * Validates this construct.
       *
       * Invokes the `validate()` method on all validations added through
       * `addValidation()`.
       *
       * @returns an array of validation error messages associated with this
       * construct.
       */
      validate() {
        return this._constructsNode.validate();
      }
      /**
       * Locks this construct from allowing more children to be added. After this
       * call, no more children can be added to this construct or to any children.
       */
      lock() {
        this._constructsNode.lock();
      }
    };
    _a = JSII_RTTI_SYMBOL_1;
    Node[_a] = { fqn: "@winglang/sdk.std.Node", version: "0.0.0" };
    exports2.Node = Node;
  }
});

var require_number = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/std/number.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Number = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_core();
    var Number2 = class {
      /**
       * Parse a number from Json.
       *
       * @macro ((args) => { if (typeof args !== "number") {throw new Error("unable to parse " + typeof args + " " + args + " as a number")}; return JSON.parse(JSON.stringify(args)) })($args$)
       *
       * @param json to parse number from.
       * @returns a number.
       */
      static fromJson(json) {
        json;
        throw new Error("Macro");
      }
      /**
       * Parse a number from string.
       *
       * @macro ((args) => { if (isNaN(args)) {throw new Error("unable to parse \"" + args + "\" as a number")}; return parseInt(args) })($args$)
       *
       * @param str to parse number from.
       * @returns a number.
       */
      static fromStr(str) {
        str;
        throw new Error("Macro");
      }
      /**
       * @internal
       */
      static _toInflightType() {
        return core_1.InflightClient.forType(__filename, this.name);
      }
      constructor() {
      }
    };
    _a = JSII_RTTI_SYMBOL_1;
    Number2[_a] = { fqn: "@winglang/sdk.std.Number", version: "0.0.0" };
    exports2.Number = Number2;
  }
});

var require_range = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/std/range.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Range = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_core();
    var Range = class {
      /**
       * Generate a range of numbers.
       *
       * @param start lower bound of the range.
       * @param end upper bound of the range.
       * @param inclusive if true, the upper bound value is included.
       * @returns a iterator.
       */
      static of(start, end, inclusive = false) {
        function* iterator(s, e, i) {
          let x = s;
          let limit = i ? e < s ? e - 1 : e + 1 : e;
          while (x < limit)
            yield x++;
          while (x > limit)
            yield x--;
        }
        return Array.from(iterator(start, end, inclusive));
      }
      /**
       * @internal
       */
      static _toInflightType() {
        return core_1.InflightClient.forType(__filename, this.name);
      }
      constructor() {
      }
    };
    _a = JSII_RTTI_SYMBOL_1;
    Range[_a] = { fqn: "@winglang/sdk.std.Range", version: "0.0.0" };
    exports2.Range = Range;
  }
});

var require_internal = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/core/internal.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.liftObject = void 0;
    var app_1 = require_app();
    var duration_1 = require_duration();
    function liftObject(scope, obj) {
      if (obj == null) {
        return JSON.stringify(obj);
      }
      const tokens = app_1.App.of(scope)._tokens;
      if (tokens.isToken(obj)) {
        return tokens.lift(obj);
      }
      if (typeof obj?._toInflightType === "function") {
        return obj._toInflightType(scope);
      }
      switch (typeof obj) {
        case "string":
        case "boolean":
        case "number":
          return JSON.stringify(obj);
        case "object":
          if (Array.isArray(obj)) {
            return `[${obj.map((o) => liftObject(scope, o)).join(",")}]`;
          }
          if (obj instanceof duration_1.Duration) {
            return liftObject(scope, {
              seconds: obj.seconds,
              minutes: obj.minutes,
              hours: obj.hours
            });
          }
          if (obj instanceof Set) {
            return `new Set(${liftObject(scope, Array.from(obj))})`;
          }
          if (obj instanceof Map) {
            return `new Map(${liftObject(scope, Array.from(obj))})`;
          }
          if (typeof obj._toInflight === "function") {
            return obj._toInflight();
          }
          if (obj.constructor.name === "Object") {
            const lines = [];
            lines.push("{");
            for (const [k, v] of Object.entries(obj)) {
              lines.push(`"${k.replace(/"/g, '\\"')}": ${liftObject(scope, v)},`);
            }
            lines.push("}");
            return lines.join("");
          }
          break;
      }
      throw new Error(`Unable to lift object of type ${obj?.constructor?.name}`);
    }
    exports2.liftObject = liftObject;
  }
});

var require_log = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/shared/log.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.log = void 0;
    function log(...args) {
      if (process.env.DEBUG) {
        console.error(...args);
      }
    }
    exports2.log = log;
  }
});

var require_resource = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/std/resource.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Resource = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var constructs_1 = require_lib();
    var duration_1 = require_duration();
    var core_1 = require_core();
    var internal_1 = require_internal();
    var log_1 = require_log();
    var std_1 = require_std();
    var Resource = class extends constructs_1.Construct {
      constructor() {
        super(...arguments);
        this.bindMap = /* @__PURE__ */ new Map();
      }
      /**
       * Register that the resource type needs to be bound to the host for the given
       * operations. A type being bound to a host means that that type's static members
       * will be bound to the host.
       *
       * @internal
       */
      static _registerTypeBind(host, ops) {
        host;
        ops;
      }
      /**
       * Register a binding between an object (either data or resource) and a host.
       *
       * - Primitives and Duration objects are ignored.
       * - Arrays, sets and maps and structs (Objects) are recursively bound.
       * - Resources are bound to the host by calling their bind() method.
       *
       * @param obj The object to bind.
       * @param host The host to bind to
       * @param ops The set of operations that may access the object (use "?" to indicate that we don't
       * know the operation)
       *
       * @internal
       */
      static _registerBindObject(obj, host, ops = []) {
        const tokens = core_1.App.of(host)._tokens;
        if (tokens.isToken(obj)) {
          return tokens.bindValue(host, obj);
        }
        switch (typeof obj) {
          case "string":
          case "boolean":
          case "number":
          case "undefined":
            return;
          case "object":
            if (Array.isArray(obj)) {
              obj.forEach((item) => this._registerBindObject(item, host));
              return;
            }
            if (obj instanceof duration_1.Duration) {
              return;
            }
            if (obj instanceof Set) {
              return Array.from(obj).forEach((item) => this._registerBindObject(item, host));
            }
            if (obj instanceof Map) {
              Array.from(obj.values()).forEach((item) => this._registerBindObject(item, host));
              return;
            }
            if (isResource(obj)) {
              obj._addBind(host, [...ops, "$inflight_init"]);
              return;
            }
            if (obj.constructor.name === "Object") {
              Object.values(obj).forEach((item) => this._registerBindObject(item, host, ops));
              return;
            }
            break;
          case "function":
            if (isResourceType(obj)) {
              obj._registerTypeBind(host, ops);
              return;
            }
            break;
        }
        throw new Error(`unable to serialize immutable data object of type ${obj.constructor?.name}`);
      }
      /**
       * Binds the resource to the host so that it can be used by inflight code.
       *
       * You can override this method to perform additional logic like granting
       * IAM permissions to the host based on what methods are being called. But
       * you must call `super.bind(host, ops)` to ensure that the resource is
       * actually bound.
       */
      bind(host, ops) {
        host;
        ops;
      }
      /**
       * Register that the resource needs to be bound to the host for the given
       * operations. This means that the resource's `bind` method will be called
       * during pre-synthesis.
       *
       * @internal
       */
      _registerBind(_host, _ops) {
        return;
      }
      /**
       * Adds a binding between this resource and the host.
       * @param host The host to bind to
       * @param ops The operations that may access this resource
       * @returns `true` if a new bind was added or `false` if there was already a bind
       */
      _addBind(host, ops) {
        (0, log_1.log)(`Registering a binding for a resource (${this.node.path}) to a host (${host.node.path}) with ops: ${JSON.stringify(ops)}`);
        if (!this.bindMap.has(host)) {
          this.bindMap.set(host, /* @__PURE__ */ new Set());
        }
        const opsForHost = this.bindMap.get(host);
        const supportedOps = [...this._getInflightOps() ?? [], "$inflight_init"];
        for (const op of ops) {
          if (!supportedOps.includes(op)) {
            throw new Error(`Resource ${this.node.path} does not support inflight operation ${op} (requested by ${host.node.path})`);
          }
          if (!opsForHost.has(op)) {
            opsForHost.add(op);
            this._registerBind(host, [op]);
            std_1.Node.of(this).addConnection({
              source: host,
              target: this,
              name: op.endsWith("()") ? op : `${op}()`
            });
          }
        }
      }
      /**
       * A hook for performing operations after the tree of resources has been
       * created, but before they are synthesized.
       *
       * Currently used for binding resources to hosts.
       *
       * @internal
       */
      _preSynthesize() {
        for (const [host, ops] of this.bindMap.entries()) {
          this.bind(host, Array.from(ops));
        }
      }
      /**
       * "Lifts" a value into an inflight context. If the value is a resource (i.e. has a `_toInflight`
       * method), this method will be called and the result will be returned. Otherwise, the value is
       * returned as-is.
       *
       * @param value The value to lift.
       * @returns a string representation of the value in an inflight context.
       * @internal
       */
      _lift(value) {
        return (0, internal_1.liftObject)(this, value);
      }
    };
    _a = JSII_RTTI_SYMBOL_1;
    Resource[_a] = { fqn: "@winglang/sdk.std.Resource", version: "0.0.0" };
    exports2.Resource = Resource;
    function isResource(obj) {
      return isIResourceType(obj.constructor);
    }
    function isIResourceType(t) {
      return t instanceof Function && "prototype" in t && typeof t.prototype.bind === "function" && typeof t.prototype._registerBind === "function";
    }
    function isResourceType(t) {
      return typeof t._registerTypeBind === "function" && isIResourceType(t);
    }
  }
});

var require_set = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/std/set.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MutSet = exports2.Set = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_core();
    var Set2 = class {
      /**
       * @internal
       */
      static _toInflightType() {
        return core_1.InflightClient.forType(__filename, this.name);
      }
      constructor() {
      }
      /**
       * The length of the set
       * @returns the length of the set
       */
      get size() {
        throw new Error("Abstract");
      }
      /**
       * Returns a boolean indicating whether an element with the specified value exists in the set.
       * @param value The value to test for presence in the Set object.
       * @returns `true` if an element with the specified value exists in the set; otherwise `false`.
       */
      has(value) {
        value;
        throw new Error("Abstract");
      }
      /**
       * Create a mutable shallow copy of this set
       *
       * @macro new Set($self$)
       *
       * @returns a MutableSet with the same values as this set
       */
      copyMut() {
        throw new Error("Macro");
      }
      /**
       * Create an immutable array shallow copy of this set
       *
       * @macro [...($self$)]
       *
       * @returns an ImmutableArray with the same values as this set
       */
      toArray() {
        throw new Error("Macro");
      }
    };
    _a = JSII_RTTI_SYMBOL_1;
    Set2[_a] = { fqn: "@winglang/sdk.std.Set", version: "0.0.0" };
    exports2.Set = Set2;
    var MutSet = class {
      /**
       * @internal
       */
      static _toInflightType() {
        return core_1.InflightClient.forType(__filename, this.name);
      }
      constructor() {
      }
      /**
       * The length of the set
       * @returns the length of the set
       */
      get size() {
        throw new Error("Abstract");
      }
      /**
       * Add value to set
       * @param value value to add
       * @returns true if the value was added, false if it was already in the set
       */
      add(value) {
        value;
        throw new Error("Abstract");
      }
      /**
       * The clear() method removes all elements from a set.
       */
      clear() {
        throw new Error("Abstract");
      }
      /**
       * Create an immutable shallow copy of this set
       *
       * @macro new Set($self$)
       *
       * @returns an ImmutableSet with the same values as this set
       */
      copy() {
        throw new Error("Macro");
      }
      /**
       * Removes a specified value from a set, if it is in the set.
       * @param value The value to remove from the set.
       * @returns Returns `true` if `value` was already in the set; otherwise `false`.
       */
      delete(value) {
        value;
        throw new Error("Abstract");
      }
      /**
       * Returns a boolean indicating whether an element with the specified value exists in the set.
       * @param value The value to test for presence in the Set object.
       * @returns `true` if an element with the specified value exists in the set; otherwise `false`.
       */
      has(value) {
        value;
        throw new Error("Abstract");
      }
      /**
       * Create an immutable array shallow copy of this set
       *
       * @macro [...($self$)]
       *
       * @returns an ImmutableArray with the same values as this set
       */
      toArray() {
        throw new Error("Macro");
      }
    };
    _b = JSII_RTTI_SYMBOL_1;
    MutSet[_b] = { fqn: "@winglang/sdk.std.MutSet", version: "0.0.0" };
    exports2.MutSet = MutSet;
  }
});

var require_string = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/std/string.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.String = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var core_1 = require_core();
    var String2 = class {
      /**
       * @internal
       */
      static _toInflightType() {
        return core_1.InflightClient.forType(__filename, this.name);
      }
      /**
       * Parse string from Json.
       *
       * @macro ((args) => { if (typeof args !== "string") {throw new Error("unable to parse " + typeof args + " " + args + " as a string")}; return JSON.parse(JSON.stringify(args)) })($args$)
       *
       * @param json to create string from.
       * @returns a string.
       */
      static fromJson(json) {
        json;
        throw new Error("Macro");
      }
      constructor() {
      }
      /**
       * The length of the string.
       */
      get length() {
        throw new Error("Abstract");
      }
      /**
       * Returns the character at the specified index.
       *
       * @macro ((args) => { if ($args$ >= $self$.length || $args$ + $self$.length < 0) {throw new Error("index out of bounds")}; return $self$.at($args$) })($args$)
       *
       * @param index position of the character.
       * @returns string at the specified index.
       */
      at(index) {
        index;
        throw new Error("Abstract");
      }
      /**
       * Combines the text of two (or more) strings and returns a new string.
       *
       * @param strN one or more strings to concatenate to this string.
       * @returns a new combined string.
       */
      concat(strN) {
        strN;
        throw new Error("Abstract");
      }
      /**
       * Checks if string includes substring.
       *
       * @macro $self$.includes($args$)
       *
       * @param searchString substring to search for.
       * @returns true if string includes substring.
       */
      contains(searchString) {
        searchString;
        throw new Error("Macro");
      }
      /**
       * Does this string end with the given searchString?
       *
       * @macro $self$.endsWith($args$)
       *
       * @param searchString substring to search for.
       * @returns true if string ends with searchString.
       */
      endsWith(searchString) {
        searchString;
        throw new Error("Abstract");
      }
      /**
       * Returns the index of the first occurrence of searchString found.
       *
       * @macro $self$.indexOf($args$)
       *
       * @param searchString substring to search for.
       * @returns the index of the first occurrence of searchString found, or -1 if not found.
       */
      indexOf(searchString) {
        searchString;
        throw new Error("Macro");
      }
      /**
       * Returns this string in lower case.
       *
       * @macro $self$.toLocaleLowerCase()
       *
       * @returns a new lower case string.
       */
      lowercase() {
        throw new Error("Macro");
      }
      /**
       * Splits string by separator.
       *
       * @param separator separator to split by.
       * @returns array of strings.
       */
      split(separator) {
        separator;
        throw new Error("Abstract");
      }
      /**
       * Does this string start with the given searchString?
       *
       * @macro $self$.startsWith($args$)
       *
       * @param searchString substring to search for.
       * @returns true if string starts with searchString.
       */
      startsWith(searchString) {
        searchString;
        throw new Error("Abstract");
      }
      /**
       * Returns a string between indexStart, indexEnd.
       *
       * @param indexStart index of the character we slice at.
       * @param indexEnd optional - index of the character we end slicing at.
       * @returns the string contained from indexStart to indexEnd.
       */
      substring(indexStart, indexEnd) {
        indexStart;
        indexEnd;
        throw new Error("Abstract");
      }
      /**
       * Replaces occurrences of a substring within a string.
       *
       * @macro $self$.replace($args$)
       *
       * @param searchString The substring to search for.
       * @param replaceString The replacement substring.
       * @returns The modified string after replacement.
       */
      replace(searchString, replaceString) {
        searchString;
        replaceString;
        throw new Error("Abstract");
      }
      /**
       * Removes white spaces from start and end of this string.
       *
       * @returns a new string with white spaces removed from start and end.
       */
      trim() {
        throw new Error("Abstract");
      }
      /**
       * Returns this string in upper case.
       *
       * @macro $self$.toLocaleUpperCase()
       *
       * @returns a new upper case string.
       */
      uppercase() {
        throw new Error("Macro");
      }
    };
    _a = JSII_RTTI_SYMBOL_1;
    String2[_a] = { fqn: "@winglang/sdk.std.String", version: "0.0.0" };
    exports2.String = String2;
  }
});

var require_struct = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/std/struct.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Struct = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var json_schema_1 = require_json_schema();
    var core_1 = require_core();
    var Struct = class {
      /**
       * @internal
       */
      static _toInflightType() {
        return core_1.InflightClient.forType(__filename, this.name);
      }
      /**
       * Converts a Json to a Struct
       *
       * @macro ($self$._fromJson($args$))
       */
      static fromJson(json) {
        json;
        throw new Error("Macro");
      }
      /**
       * Converts a Json to a Struct, returning nil if the Json is not valid
       *
       * @macro ($self$._tryFromJson($args$));
       */
      static tryFromJson(json) {
        json;
        throw new Error("Macro");
      }
      /**
       * Retrieve the schema for this struct
       *
       * @macro ($self$)
       */
      static schema() {
        throw new Error("Macro");
      }
      /**
       * Create an instance of a StructSchema from a JsonSchema
       *
       * @internal
       */
      static _createJsonSchema(schema) {
        return new json_schema_1.JsonSchema(schema);
      }
      constructor() {
      }
    };
    _a = JSII_RTTI_SYMBOL_1;
    Struct[_a] = { fqn: "@winglang/sdk.std.Struct", version: "0.0.0" };
    exports2.Struct = Struct;
  }
});

var require_resource_names = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/shared/resource-names.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ResourceNames = exports2.CaseConventions = void 0;
    var CaseConventions;
    (function(CaseConventions2) {
      CaseConventions2["LOWERCASE"] = "lowercase";
      CaseConventions2["UPPERCASE"] = "uppercase";
    })(CaseConventions = exports2.CaseConventions || (exports2.CaseConventions = {}));
    var ResourceNames = class {
      static generateName(resource, props) {
        const sep = props.sep ?? "-";
        const maxLen = props.maxLen;
        if (maxLen && maxLen < 8) {
          throw new Error("maxLen must be at least 8");
        }
        let name = resource.node.id;
        name = applyCaseConversion(name, props.case);
        if (props.prefix) {
          name = `${props.prefix}${name}`;
        }
        let includeHash = props.includeHash ?? true;
        let hash = includeHash ? sep + resource.node.addr.substring(0, 8) : "";
        let suffix = props.suffix ?? "";
        name = name.replace(props.disallowedRegex, sep);
        if (maxLen) {
          name = name.substring(0, maxLen - hash.length - suffix.length);
        }
        name = `${name}${hash}${suffix}`;
        name = applyCaseConversion(name, props.case);
        return name;
      }
    };
    exports2.ResourceNames = ResourceNames;
    function applyCaseConversion(name, caseConventions) {
      if (caseConventions === CaseConventions.LOWERCASE) {
        return name.toLocaleLowerCase();
      }
      if (caseConventions === CaseConventions.UPPERCASE) {
        return name.toLocaleUpperCase();
      }
      return name;
    }
  }
});

var require_function = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/cloud/function.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FunctionInflightMethods = exports2.Function = exports2.FUNCTION_FQN = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var fs_1 = require("fs");
    var path_1 = require("path");
    var constants_1 = require_constants();
    var core_1 = require_core();
    var resource_names_1 = require_resource_names();
    var std_1 = require_std();
    exports2.FUNCTION_FQN = (0, constants_1.fqnForType)("cloud.Function");
    var Function2 = class extends std_1.Resource {
      /**
       * Creates a new cloud.Function instance through the app.
       * @internal
       */
      static _newFunction(scope, id, handler, props = {}) {
        return core_1.App.of(scope).newAbstract(exports2.FUNCTION_FQN, scope, id, handler, props);
      }
      constructor(scope, id, handler, props = {}) {
        super(scope, id);
        this._env = {};
        std_1.Node.of(this).title = "Function";
        std_1.Node.of(this).description = "A cloud function (FaaS)";
        for (const [key, value] of Object.entries(props.env ?? {})) {
          this.addEnvironment(key, value);
        }
        handler._registerBind(this, ["handle", "$inflight_init"]);
        const inflightClient = handler._toInflight();
        const lines = new Array();
        lines.push("exports.handler = async function(event) {");
        lines.push(`  return await (${inflightClient}).handle(event);`);
        lines.push("};");
        const assetName = resource_names_1.ResourceNames.generateName(this, {
          // Avoid characters that may cause path issues
          disallowedRegex: /[><:"/\\|?*\s]/g,
          case: resource_names_1.CaseConventions.LOWERCASE,
          sep: "_"
        });
        const workdir = core_1.App.of(this).workdir;
        (0, fs_1.mkdirSync)(workdir, { recursive: true });
        const entrypoint = (0, path_1.join)(workdir, `${assetName}.js`);
        (0, fs_1.writeFileSync)(entrypoint, lines.join("\n"));
        this.entrypoint = entrypoint;
        if (process.env.WING_TARGET) {
          this.addEnvironment("WING_TARGET", process.env.WING_TARGET);
        }
      }
      /** @internal */
      _getInflightOps() {
        return [FunctionInflightMethods.INVOKE];
      }
      /**
       * Add an environment variable to the function.
       */
      addEnvironment(name, value) {
        if (this._env[name] !== void 0) {
          throw new Error(`Environment variable "${name}" already set.`);
        }
        this._env[name] = value;
      }
      /**
       * Returns the set of environment variables for this function.
       */
      get env() {
        return { ...this._env };
      }
    };
    _a = JSII_RTTI_SYMBOL_1;
    Function2[_a] = { fqn: "@winglang/sdk.cloud.Function", version: "0.0.0" };
    exports2.Function = Function2;
    var FunctionInflightMethods;
    (function(FunctionInflightMethods2) {
      FunctionInflightMethods2["INVOKE"] = "invoke";
    })(FunctionInflightMethods = exports2.FunctionInflightMethods || (exports2.FunctionInflightMethods = {}));
  }
});

var require_test = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/std/test.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Test = exports2.TEST_FQN = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var resource_1 = require_resource();
    var function_1 = require_function();
    var constants_1 = require_constants();
    var core_1 = require_core();
    var std_1 = require_std();
    exports2.TEST_FQN = (0, constants_1.fqnForType)("std.Test");
    var Test = class extends resource_1.Resource {
      /**
       * Creates a new std.Test instance through the app.
       * @internal
       */
      static _newTest(scope, id, inflight, props = {}) {
        return core_1.App.of(scope).newAbstract(exports2.TEST_FQN, scope, id, inflight, props);
      }
      constructor(scope, id, inflight, props = {}) {
        super(scope, id);
        std_1.Node.of(this).title = "Test";
        std_1.Node.of(this).description = "A cloud unit test.";
        if (core_1.App.of(this).isTestEnvironment || core_1.App.of(this)._target === "sim") {
          this._fn = core_1.App.of(scope).newAbstract(function_1.FUNCTION_FQN, this, "Handler", inflight, props);
        }
      }
      /** @internal */
      _getInflightOps() {
        return [];
      }
      /** @internal */
      _toInflight() {
        throw new Error("unimplemented");
      }
    };
    _a = JSII_RTTI_SYMBOL_1;
    Test[_a] = { fqn: "@winglang/sdk.std.Test", version: "0.0.0" };
    exports2.Test = Test;
  }
});

var require_test_runner = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/std/test-runner.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TestRunnerInflightMethods = exports2.TraceType = exports2.TestRunner = exports2.TEST_RUNNER_FQN = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var resource_1 = require_resource();
    var test_1 = require_test();
    var constants_1 = require_constants();
    var core_1 = require_core();
    var std_1 = require_std();
    exports2.TEST_RUNNER_FQN = (0, constants_1.fqnForType)("cloud.TestRunner");
    var TestRunner = class extends resource_1.Resource {
      /**
       * Create a new test engine.
       * @internal
       */
      static _newTestRunner(scope, id, props = {}) {
        return core_1.App.of(scope).newAbstract(exports2.TEST_RUNNER_FQN, scope, id, props);
      }
      constructor(scope, id, props = {}) {
        super(scope, id);
        std_1.Node.of(this).hidden = true;
        std_1.Node.of(this).title = "TestRunner";
        std_1.Node.of(this).description = "A suite of APIs for running tests and collecting results.";
        props;
      }
      /** @internal */
      _getInflightOps() {
        return [
          TestRunnerInflightMethods.LIST_TESTS,
          TestRunnerInflightMethods.RUN_TEST
        ];
      }
      /**
       * Find all tests in the construct tree.
       * @returns A list of tests.
       */
      findTests() {
        const isTest = (fn) => {
          return fn instanceof test_1.Test;
        };
        return this.node.root.node.findAll().filter(isTest);
      }
    };
    _a = JSII_RTTI_SYMBOL_1;
    TestRunner[_a] = { fqn: "@winglang/sdk.std.TestRunner", version: "0.0.0" };
    exports2.TestRunner = TestRunner;
    var TraceType;
    (function(TraceType2) {
      TraceType2["RESOURCE"] = "resource";
      TraceType2["LOG"] = "log";
    })(TraceType = exports2.TraceType || (exports2.TraceType = {}));
    var TestRunnerInflightMethods;
    (function(TestRunnerInflightMethods2) {
      TestRunnerInflightMethods2["RUN_TEST"] = "runTest";
      TestRunnerInflightMethods2["LIST_TESTS"] = "listTests";
    })(TestRunnerInflightMethods = exports2.TestRunnerInflightMethods || (exports2.TestRunnerInflightMethods = {}));
  }
});

var require_std = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/std/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding2(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_array(), exports2);
    __exportStar2(require_bool(), exports2);
    __exportStar2(require_datetime(), exports2);
    __exportStar2(require_duration(), exports2);
    __exportStar2(require_generics(), exports2);
    __exportStar2(require_json(), exports2);
    __exportStar2(require_json_schema(), exports2);
    __exportStar2(require_map(), exports2);
    __exportStar2(require_node(), exports2);
    __exportStar2(require_number(), exports2);
    __exportStar2(require_range(), exports2);
    __exportStar2(require_resource(), exports2);
    __exportStar2(require_set(), exports2);
    __exportStar2(require_string(), exports2);
    __exportStar2(require_struct(), exports2);
    __exportStar2(require_test(), exports2);
    __exportStar2(require_test_runner(), exports2);
  }
});

var require_tree = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/core/tree.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.synthesizeTree = exports2.TREE_FILE_PATH = void 0;
    var fs = __importStar2(require("fs"));
    var path = __importStar2(require("path"));
    var std_1 = require_std();
    exports2.TREE_FILE_PATH = "tree.json";
    var JSII_RUNTIME_SYMBOL = Symbol.for("jsii.rtti");
    function constructInfoFromConstruct(construct) {
      const jsiiRuntimeInfo = Object.getPrototypeOf(construct).constructor[JSII_RUNTIME_SYMBOL];
      if (typeof jsiiRuntimeInfo === "object" && jsiiRuntimeInfo !== null && typeof jsiiRuntimeInfo.fqn === "string" && typeof jsiiRuntimeInfo.version === "string") {
        return { fqn: jsiiRuntimeInfo.fqn, version: jsiiRuntimeInfo.version };
      }
      return void 0;
    }
    function synthesizeTree(app, outdir) {
      const visit = (construct) => {
        const children = construct.node.children.map((c) => visit(c));
        const childrenMap = children.filter((child) => child !== void 0).reduce((map, child) => Object.assign(map, { [child.id]: child }), {});
        const node = {
          id: construct.node.id || "App",
          path: construct.node.path,
          children: Object.keys(childrenMap).length === 0 ? void 0 : childrenMap,
          constructInfo: constructInfoFromConstruct(construct),
          display: synthDisplay(construct)
        };
        return node;
      };
      const tree = {
        version: "tree-0.1",
        tree: visit(app.node.root)
      };
      fs.writeFileSync(path.join(outdir, exports2.TREE_FILE_PATH), JSON.stringify(tree, void 0, 2), { encoding: "utf8" });
    }
    exports2.synthesizeTree = synthesizeTree;
    function isIResource(construct) {
      return construct instanceof std_1.Resource;
    }
    function synthDisplay(construct) {
      if (!isIResource(construct)) {
        return;
      }
      const display = std_1.Node.of(construct);
      if (display.description || display.title || display.hidden) {
        return {
          title: display.title,
          description: display.description,
          hidden: display.hidden,
          sourceModule: display.sourceModule
        };
      }
      return;
    }
  }
});

var require_core = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/core/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding2(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_app(), exports2);
    __exportStar2(require_attributes(), exports2);
    __exportStar2(require_connections(), exports2);
    __exportStar2(require_dependency2(), exports2);
    __exportStar2(require_inflight(), exports2);
    __exportStar2(require_tree(), exports2);
  }
});

var require_api = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/cloud/api.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sanitizeParamLikeObject = exports2.parseHttpMethod = exports2.HttpMethod = exports2.Api = exports2.API_FQN = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var constants_1 = require_constants();
    var core_1 = require_core();
    var std_1 = require_std();
    exports2.API_FQN = (0, constants_1.fqnForType)("cloud.Api");
    var Api = class extends std_1.Resource {
      /**
       * Creates a new cloud.Api instance through the app.
       * @internal
       */
      static _newApi(scope, id, props = {}) {
        return core_1.App.of(scope).newAbstract(exports2.API_FQN, scope, id, props);
      }
      constructor(scope, id, props = {}) {
        super(scope, id);
        this.apiSpec = {
          openapi: "3.0.3",
          paths: {}
        };
        this.corsDefaultValues = {
          allowOrigin: ["*"],
          allowMethods: [
            HttpMethod.GET,
            HttpMethod.POST,
            HttpMethod.PUT,
            HttpMethod.DELETE,
            HttpMethod.HEAD,
            HttpMethod.OPTIONS
          ],
          allowHeaders: ["Content-Type", "Authorization", "X-Requested-With"],
          exposeHeaders: [],
          allowCredentials: false
        };
        props;
        this.corsOptions = props.cors ? this._cors(props.corsOptions) : void 0;
        std_1.Node.of(this).title = "Api";
        std_1.Node.of(this).description = "A REST API endpoint";
      }
      /** @internal */
      _getInflightOps() {
        return [];
      }
      /**
       * Validating path:
       * if has curly brackets pairs- the part that inside the brackets is only letter, digit or _, not empty and placed before and after "/"
       * @param path
       * @throws if the path is invalid
       * @internal
       */
      _validatePath(path) {
        if (!/^(\/[a-zA-Z0-9_\-\.]+(\/\{[a-zA-Z0-9_\-]+\}|\/[a-zA-Z0-9_\-\.]+)*(?:\?[^#]*)?)?$|^(\/\{[a-zA-Z0-9_\-]+\})*\/?$/g.test(path)) {
          throw new Error(`Invalid path ${path}. Url parts can only contain alpha-numeric chars, "-", "_" and ".". Params can only contain alpha-numeric chars and "_".`);
        }
      }
      /**
       * Returns CORS configuration. If props are provided, they will have precedence over defaults.
       * @param props
       * @returns ApiCorsOptions
       * @internal
       */
      _cors(props) {
        return {
          ...this.corsDefaultValues,
          ...props
        };
      }
      /**
       * Generates the OpenAPI schema for CORS headers based on the provided CORS options.
       * @param corsOptions The CORS options to generate the schema from.
       * @returns An object representing the OpenAPI schema for CORS headers.
       */
      _corsOpenApiSchema(corsOptions) {
        const corsHeaders = {};
        if (corsOptions) {
          const corsHeaderSchema = {
            schema: {
              type: "string"
            }
          };
          corsHeaders["Access-Control-Allow-Origin"] = corsHeaderSchema;
          corsHeaders["Access-Control-Allow-Methods"] = corsHeaderSchema;
          corsHeaders["Access-Control-Allow-Headers"] = corsHeaderSchema;
        }
        return corsHeaders;
      }
      /**
       * Generates an object containing default CORS response headers and OPTIONS response headers.
       * @param corsOptions The CORS options to generate the headers from.
       * @returns An object containing default CORS response headers and OPTIONS response headers.
       * @internal
       */
      _generateCorsHeaders(corsOptions) {
        if (corsOptions == void 0) {
          return;
        }
        const { allowOrigin = [], allowHeaders = [], allowMethods = [], exposeHeaders = [], allowCredentials = false } = corsOptions;
        const defaultHeaders = {
          "Access-Control-Allow-Origin": allowOrigin.join(",") || "",
          "Access-Control-Expose-Headers": exposeHeaders.join(",") || "",
          "Access-Control-Allow-Credentials": allowCredentials ? "true" : "false"
        };
        const optionsHeaders = {
          "Access-Control-Allow-Origin": allowOrigin.join(",") || "",
          "Access-Control-Allow-Headers": allowHeaders.join(",") || "",
          "Access-Control-Allow-Methods": allowMethods.join(",") || ""
        };
        return {
          defaultResponse: defaultHeaders,
          optionsResponse: optionsHeaders
        };
      }
      /**
       * Add a route to the api spec.
       * @param path The path to add.
       * @param method The method to add.
       * @param apiSpecExtension The extension to add to the api spec for this route and method.
       *
       * @internal
       * */
      _addToSpec(path, method, apiSpecExtension, corsOptions) {
        if (this.apiSpec.paths[path]?.[method.toLowerCase()]) {
          throw new Error(`Endpoint for path '${path}' and method '${method}' already exists`);
        }
        const operationId = `${method.toLowerCase()}${path === "/" ? "" : path.replace("/", "-")}`;
        const pathParams = path.match(/{(.*?)}/g);
        const pathParameters = [];
        if (pathParams) {
          pathParams.forEach((param) => {
            const paramName = param.replace("{", "").replace("}", "");
            pathParameters.push({
              name: paramName,
              in: "path",
              required: true,
              schema: {
                type: "string"
              }
            });
          });
        }
        const corsOpenApiSchema = this._corsOpenApiSchema(corsOptions);
        const methodSpec = {
          [method.toLowerCase()]: {
            operationId,
            responses: {
              "200": {
                description: "200 response",
                content: {},
                ...Object.keys(corsOpenApiSchema).length > 0 ? { headers: corsOpenApiSchema } : {}
              }
            },
            parameters: pathParameters,
            ...apiSpecExtension
          }
        };
        this.apiSpec.paths[path] = {
          ...this.apiSpec.paths[path],
          ...methodSpec
        };
      }
      /**
       * Return the api spec.
       * @internal */
      _getApiSpec() {
        return this.apiSpec;
      }
    };
    _a = JSII_RTTI_SYMBOL_1;
    Api[_a] = { fqn: "@winglang/sdk.cloud.Api", version: "0.0.0" };
    exports2.Api = Api;
    var HttpMethod;
    (function(HttpMethod2) {
      HttpMethod2["GET"] = "GET";
      HttpMethod2["HEAD"] = "HEAD";
      HttpMethod2["POST"] = "POST";
      HttpMethod2["PUT"] = "PUT";
      HttpMethod2["DELETE"] = "DELETE";
      HttpMethod2["CONNECT"] = "CONNECT";
      HttpMethod2["OPTIONS"] = "OPTIONS";
      HttpMethod2["PATCH"] = "PATCH";
    })(HttpMethod = exports2.HttpMethod || (exports2.HttpMethod = {}));
    function parseHttpMethod(method) {
      switch (method) {
        case "GET":
          return HttpMethod.GET;
        case "POST":
          return HttpMethod.POST;
        case "PUT":
          return HttpMethod.PUT;
        case "HEAD":
          return HttpMethod.HEAD;
        case "DELETE":
          return HttpMethod.DELETE;
        case "CONNECT":
          return HttpMethod.CONNECT;
        case "OPTIONS":
          return HttpMethod.OPTIONS;
        case "PATCH":
          return HttpMethod.PATCH;
        default:
          throw new Error(`Unsupported HTTP method: ${method}`);
      }
    }
    exports2.parseHttpMethod = parseHttpMethod;
    function sanitizeParamLikeObject(obj) {
      const newObj = {};
      Object.keys(obj).forEach((key) => {
        const value = obj[key];
        if (Array.isArray(value)) {
          newObj[key] = value.join(",");
        } else if (typeof value === "string") {
          newObj[key] = value;
        }
      });
      return newObj;
    }
    exports2.sanitizeParamLikeObject = sanitizeParamLikeObject;
  }
});

var require_api_onrequest_inflight = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/shared-aws/api.onrequest.inflight.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ApiOnRequestHandlerClient = void 0;
    var api_1 = require_api();
    var ApiOnRequestHandlerClient = class {
      constructor({ handler, args }) {
        this.handler = handler;
        this.corsHeaders = args?.corsHeaders;
      }
      async handle(request) {
        const apiRequest = mapApigatewayEventToCloudApiRequest(request);
        const apiResponse = await this.handler.handle(apiRequest);
        const apiGatewayResponse = mapCloudApiResponseToApigatewayResponse(apiResponse, this.corsHeaders);
        return apiGatewayResponse;
      }
    };
    exports2.ApiOnRequestHandlerClient = ApiOnRequestHandlerClient;
    function mapCloudApiResponseToApigatewayResponse(resp, corsHeaders) {
      return {
        statusCode: resp.status,
        body: resp.body ?? "",
        headers: {
          "Content-Type": "application/json",
          ...corsHeaders,
          ...resp.headers
        }
      };
    }
    function mapApigatewayEventToCloudApiRequest(request) {
      const query = {
        ...request.queryStringParameters,
        ...request.multiValueQueryStringParameters
      };
      return {
        path: request.path,
        body: parseBody(request),
        headers: request.headers,
        method: (0, api_1.parseHttpMethod)(request.httpMethod),
        query: (0, api_1.sanitizeParamLikeObject)(query),
        vars: (0, api_1.sanitizeParamLikeObject)(request.pathParameters ?? {})
      };
    }
    function parseBody(request) {
      if (!request.body)
        return "";
      const contentType = Object.entries(request.headers).find(([key, _]) => key.toLowerCase() === "content-type")?.[1];
      if (contentType === "application/x-www-form-urlencoded") {
        return JSON.stringify(Object.fromEntries(new URLSearchParams(request.body)));
      }
      return request.body;
    }
  }
});

var require_inflight_Closure2_1 = __commonJS({
  "target/main.tfaws.929384.tmp/.wing/inflight.$Closure2-1.js"(exports2, module2) {
    module2.exports = function({ $__parent_this_2_manager }) {
      class $Closure2 {
        constructor({}) {
          const $obj = (...args) => this.handle(...args);
          Object.setPrototypeOf($obj, this);
          return $obj;
        }
        async handle(req) {
          const key = req.vars["key"];
          try {
            const url = await $__parent_this_2_manager.visit(key);
            {
              const $if_let_value = url;
              if ($if_let_value != void 0) {
                const url2 = $if_let_value;
                const headers = {};
                ((obj, args) => {
                  obj[args[0]] = args[1];
                })(headers, ["location", url2]);
                return { "status": 301, "headers": { ...headers } };
              }
            }
            return { "status": 404 };
          } catch {
            return { "status": 400 };
          }
        }
      }
      return $Closure2;
    };
  }
});

var utils_exports = {};
__export(utils_exports, {
  incrementStringValue: () => incrementStringValue
});
var incrementStringValue;
var init_utils = __esm({
  "utils.js"() {
    incrementStringValue = (string) => (parseInt(string, 10) + 1).toString(10);
  }
});

var require_inflight_LinkManager_1 = __commonJS({
  "target/main.tfaws.929384.tmp/.wing/inflight.LinkManager-1.js"(exports2, module2) {
    module2.exports = function({ $util_Util }) {
      class LinkManager {
        constructor({ $this_db }) {
          this.$this_db = $this_db;
        }
        static async incrementStringValue(string) {
          return (init_utils(), __toCommonJS(utils_exports))["incrementStringValue"](string);
        }
        async _add(key, value) {
          await this.$this_db.set(key, value);
        }
        async add(url) {
          const shortCode = await $util_Util.nanoid({ "size": 10 });
          const key = String.raw({ raw: ["link:", ""] }, shortCode);
          await this._add(key, url);
          {
            console.log(String.raw({ raw: ["Adding new URL ", " as ", ""] }, url, key));
          }
          ;
          return shortCode;
        }
        async _visit(shortCode, countryCode) {
          const key = String.raw({ raw: ["link:", ":stats"] }, shortCode);
          const visitCount = await this.$this_db.hget(key, "visits") ?? "0";
          await this.$this_db.hset(key, "visits", await LinkManager.incrementStringValue(visitCount));
          if (countryCode != null) {
            const countryCount = await this.$this_db.hget(key, String.raw({ raw: ["visits:", ""] }, countryCode)) ?? "0";
            await this.$this_db.hset(key, String.raw({ raw: ["visits:", ""] }, countryCount), await LinkManager.incrementStringValue(visitCount));
          }
        }
        async _retrieve(shortCode) {
          const key = String.raw({ raw: ["link:", ""] }, shortCode);
          return await this.$this_db.get(key);
        }
        async visit(shortCode, countryCode) {
          const url = await this._retrieve(shortCode);
          if (url != null) {
            await this._visit(shortCode, countryCode);
          }
          return url;
        }
        async remove(shortCode) {
          return false;
        }
      }
      return LinkManager;
    };
  }
});

var require_url_alphabet = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/nanoid/url-alphabet/index.cjs"(exports2, module2) {
    var urlAlphabet = "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";
    module2.exports = { urlAlphabet };
  }
});

var require_nanoid = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/nanoid/index.cjs"(exports2, module2) {
    var crypto4 = require("crypto");
    var { urlAlphabet } = require_url_alphabet();
    var POOL_SIZE_MULTIPLIER = 128;
    var pool;
    var poolOffset;
    var fillPool = (bytes) => {
      if (!pool || pool.length < bytes) {
        pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER);
        crypto4.randomFillSync(pool);
        poolOffset = 0;
      } else if (poolOffset + bytes > pool.length) {
        crypto4.randomFillSync(pool);
        poolOffset = 0;
      }
      poolOffset += bytes;
    };
    var random = (bytes) => {
      fillPool(bytes -= 0);
      return pool.subarray(poolOffset - bytes, poolOffset);
    };
    var customRandom = (alphabet, defaultSize, getRandom) => {
      let mask = (2 << 31 - Math.clz32(alphabet.length - 1 | 1)) - 1;
      let step = Math.ceil(1.6 * mask * defaultSize / alphabet.length);
      return (size = defaultSize) => {
        let id = "";
        while (true) {
          let bytes = getRandom(step);
          let i = step;
          while (i--) {
            id += alphabet[bytes[i] & mask] || "";
            if (id.length === size)
              return id;
          }
        }
      };
    };
    var customAlphabet = (alphabet, size = 21) => customRandom(alphabet, size, random);
    var nanoid = (size = 21) => {
      fillPool(size -= 0);
      let id = "";
      for (let i = poolOffset - size; i < poolOffset; i++) {
        id += urlAlphabet[pool[i] & 63];
      }
      return id;
    };
    module2.exports = { nanoid, customAlphabet, customRandom, urlAlphabet, random };
  }
});

function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    import_crypto.default.randomFillSync(rnds8Pool);
    poolPtr = 0;
  }
  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}
var import_crypto, rnds8Pool, poolPtr;
var init_rng = __esm({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/rng.js"() {
    import_crypto = __toESM(require("crypto"));
    rnds8Pool = new Uint8Array(256);
    poolPtr = rnds8Pool.length;
  }
});

var regex_default;
var init_regex = __esm({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/regex.js"() {
    regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  }
});

function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default;
var init_validate = __esm({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/validate.js"() {
    init_regex();
    validate_default = validate;
  }
});

function stringify(arr, offset = 0) {
  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var byteToHex, stringify_default;
var init_stringify = __esm({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/stringify.js"() {
    init_validate();
    byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).substr(1));
    }
    stringify_default = stringify;
  }
});

function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || rng)();
    if (node == null) {
      node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }
    if (clockseq == null) {
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
    }
  }
  let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
  let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
  if (dt < 0 && options.clockseq === void 0) {
    clockseq = clockseq + 1 & 16383;
  }
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
    nsecs = 0;
  }
  if (nsecs >= 1e4) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;
  msecs += 122192928e5;
  const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
  b[i++] = tl >>> 24 & 255;
  b[i++] = tl >>> 16 & 255;
  b[i++] = tl >>> 8 & 255;
  b[i++] = tl & 255;
  const tmh = msecs / 4294967296 * 1e4 & 268435455;
  b[i++] = tmh >>> 8 & 255;
  b[i++] = tmh & 255;
  b[i++] = tmh >>> 24 & 15 | 16;
  b[i++] = tmh >>> 16 & 255;
  b[i++] = clockseq >>> 8 | 128;
  b[i++] = clockseq & 255;
  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }
  return buf || stringify_default(b);
}
var _nodeId, _clockseq, _lastMSecs, _lastNSecs, v1_default;
var init_v1 = __esm({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/v1.js"() {
    init_rng();
    init_stringify();
    _lastMSecs = 0;
    _lastNSecs = 0;
    v1_default = v1;
  }
});

function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v;
  const arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default;
var init_parse = __esm({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/parse.js"() {
    init_validate();
    parse_default = parse;
  }
});

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
function v35_default(name, version2, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version2;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return stringify_default(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}
var DNS, URL2;
var init_v35 = __esm({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/v35.js"() {
    init_stringify();
    init_parse();
    DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
  }
});

function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return import_crypto2.default.createHash("md5").update(bytes).digest();
}
var import_crypto2, md5_default;
var init_md5 = __esm({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/md5.js"() {
    import_crypto2 = __toESM(require("crypto"));
    md5_default = md5;
  }
});

var v3, v3_default;
var init_v3 = __esm({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/v3.js"() {
    init_v35();
    init_md5();
    v3 = v35_default("v3", 48, md5_default);
    v3_default = v3;
  }
});

function v4(options, buf, offset) {
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default;
var init_v4 = __esm({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/v4.js"() {
    init_rng();
    init_stringify();
    v4_default = v4;
  }
});

function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return import_crypto3.default.createHash("sha1").update(bytes).digest();
}
var import_crypto3, sha1_default;
var init_sha1 = __esm({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/sha1.js"() {
    import_crypto3 = __toESM(require("crypto"));
    sha1_default = sha1;
  }
});

var v5, v5_default;
var init_v5 = __esm({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/v5.js"() {
    init_v35();
    init_sha1();
    v5 = v35_default("v5", 80, sha1_default);
    v5_default = v5;
  }
});

var nil_default;
var init_nil = __esm({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/nil.js"() {
    nil_default = "00000000-0000-0000-0000-000000000000";
  }
});

function version(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  return parseInt(uuid.substr(14, 1), 16);
}
var version_default;
var init_version = __esm({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/version.js"() {
    init_validate();
    version_default = version;
  }
});

var esm_node_exports = {};
__export(esm_node_exports, {
  NIL: () => nil_default,
  parse: () => parse_default,
  stringify: () => stringify_default,
  v1: () => v1_default,
  v3: () => v3_default,
  v4: () => v4_default,
  v5: () => v5_default,
  validate: () => validate_default,
  version: () => version_default
});
var init_esm_node = __esm({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/index.js"() {
    init_v1();
    init_v3();
    init_v4();
    init_v5();
    init_nil();
    init_version();
    init_validate();
    init_stringify();
    init_parse();
  }
});

var require_util = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/util/util.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Util = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var crypto_1 = require("crypto");
    var nanoid_1 = require_nanoid();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var core_1 = require_core();
    var std_1 = require_std();
    var Util = class _Util {
      /**
       * Returns the value of an environment variable. Throws if not found or empty.
       * @param name The name of the environment variable.
       */
      static env(name) {
        const value = _Util.tryEnv(name);
        if (!value) {
          throw new Error(`Environment variable ${name} not found.`);
        }
        return value;
      }
      /**
       * Returns the value of an environment variable. Returns `nil` if not found or empty.
       * @param name The name of the environment variable.
       * @returns The value of the environment variable or `nil`.
       */
      static tryEnv(name) {
        return process.env[name];
      }
      /**
       * Converts a string from UTF-8 to base64.
       * @param stringToEncode The name of the UTF-8 string to encode.
       * @param url If `true`, a URL-safe base64 string is returned.
       * @returns The base64 string.
       */
      static base64Encode(stringToEncode, url) {
        return Buffer.from(stringToEncode).toString(url ? "base64url" : "base64");
      }
      /**
       * Converts a string from base64 to UTF-8.
       * @param stringToDecode base64 string to decode.
       * @param url If `true`, the source is expected to be a URL-safe base64 string.
       * @returns The UTF-8 string.
       */
      static base64Decode(stringToDecode, url) {
        return Buffer.from(stringToDecode, url ? "base64url" : "base64").toString("utf8");
      }
      /**
       * Suspends execution for a given duration.
       * @param delay The time to suspend execution.
       * @inflight
       */
      static async sleep(delay) {
        return new Promise((resolve) => setTimeout(resolve, delay.seconds * 1e3));
      }
      /**
       * Run a predicate repeatedly, waiting until it returns true or until the timeout elapses.
       * @param predicate The function that will be evaluated.
       * @param props Timeout and interval values, default to one 1m timeout and 0.1sec interval.
       * @throws Will throw if the given predicate throws.
       * @returns True if predicate is truthful within timeout.
       * @inflight
       */
      static async waitUntil(predicate, props = {}) {
        const timeout = props.timeout ?? std_1.Duration.fromMinutes(1);
        const interval = props.interval ?? std_1.Duration.fromSeconds(0.1);
        const f = predicate;
        let elapsed = 0;
        while (elapsed < timeout.seconds) {
          if (await f()) {
            return true;
          }
          elapsed += interval.seconds;
          await this.sleep(interval);
        }
        return false;
      }
      /**
       * Computes the SHA256 hash of the given data.
       * @param data - The string to be hashed.
       */
      static sha256(data) {
        return (0, crypto_1.createHash)("sha256").update(data).digest("hex");
      }
      /**
       * Generates a version 4 UUID.
       */
      static uuidv4() {
        return (0, uuid_1.v4)();
      }
      /**
       * Generates a unique ID using the nanoid library.
       # @link https://github.com/ai/nanoid
       * @param options - Optional options object for generating the ID.
       */
      static nanoid(options) {
        const size = options?.size ?? 21;
        const nano = options?.alphabet ? (0, nanoid_1.customAlphabet)(options.alphabet, size) : void 0;
        return nano ? nano(size) : (0, nanoid_1.nanoid)(size);
      }
      /**
       * @internal
       */
      static _toInflightType() {
        return core_1.InflightClient.forType(__filename, this.name);
      }
      constructor() {
      }
    };
    _a = JSII_RTTI_SYMBOL_1;
    Util[_a] = { fqn: "@winglang/sdk.util.Util", version: "0.0.0" };
    exports2.Util = Util;
  }
});

var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __addDisposableResource: () => __addDisposableResource,
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldIn: () => __classPrivateFieldIn,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __disposeResources: () => __disposeResources,
  __esDecorate: () => __esDecorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __propKey: () => __propKey,
  __read: () => __read,
  __rest: () => __rest,
  __runInitializers: () => __runInitializers,
  __setFunctionName: () => __setFunctionName,
  __spread: () => __spread,
  __spreadArray: () => __spreadArray,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values,
  default: () => tslib_es6_default
});
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) {
    if (f !== void 0 && typeof f !== "function")
      throw new TypeError("Function expected");
    return f;
  }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
    var context = {};
    for (var p in contextIn)
      context[p] = p === "access" ? {} : contextIn[p];
    for (var p in contextIn.access)
      context.access[p] = contextIn.access[p];
    context.addInitializer = function(f) {
      if (done)
        throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f || null));
    };
    var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
    if (kind === "accessor") {
      if (result === void 0)
        continue;
      if (result === null || typeof result !== "object")
        throw new TypeError("Object expected");
      if (_ = accept(result.get))
        descriptor.get = _;
      if (_ = accept(result.set))
        descriptor.set = _;
      if (_ = accept(result.init))
        initializers.unshift(_);
    } else if (_ = accept(result)) {
      if (kind === "field")
        initializers.unshift(_);
      else
        descriptor[key] = _;
    }
  }
  if (target)
    Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
}
function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
}
function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol")
    name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __exportStar(m, o) {
  for (var p in m)
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
      __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
        __createBinding(result, mod, k);
  }
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
    throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}
function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function")
      throw new TypeError("Object expected.");
    var dispose;
    if (async) {
      if (!Symbol.asyncDispose)
        throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose)
        throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
    }
    if (typeof dispose !== "function")
      throw new TypeError("Object not disposable.");
    env.stack.push({ value, dispose, async });
  } else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}
function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  function next() {
    while (env.stack.length) {
      var rec = env.stack.pop();
      try {
        var result = rec.dispose && rec.dispose.call(rec.value);
        if (rec.async)
          return Promise.resolve(result).then(next, function(e) {
            fail(e);
            return next();
          });
      } catch (e) {
        fail(e);
      }
    }
    if (env.hasError)
      throw env.error;
  }
  return next();
}
var extendStatics, __assign, __createBinding, __setModuleDefault, _SuppressedError, tslib_es6_default;
var init_tslib_es6 = __esm({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/tslib/tslib.es6.mjs"() {
    extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (Object.prototype.hasOwnProperty.call(b2, p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    __assign = function() {
      __assign = Object.assign || function __assign2(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    __createBinding = Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __setModuleDefault = Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    };
    _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };
    tslib_es6_default = {
      __extends,
      __assign,
      __rest,
      __decorate,
      __param,
      __metadata,
      __awaiter,
      __generator,
      __createBinding,
      __exportStar,
      __values,
      __read,
      __spread,
      __spreadArrays,
      __spreadArray,
      __await,
      __asyncGenerator,
      __asyncDelegator,
      __asyncValues,
      __makeTemplateObject,
      __importStar,
      __importDefault,
      __classPrivateFieldGet,
      __classPrivateFieldSet,
      __classPrivateFieldIn,
      __addDisposableResource,
      __disposeResources
    };
  }
});

var require_abort = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/abort.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_auth = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/auth.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HttpAuthLocation = void 0;
    var HttpAuthLocation;
    (function(HttpAuthLocation2) {
      HttpAuthLocation2["HEADER"] = "header";
      HttpAuthLocation2["QUERY"] = "query";
    })(HttpAuthLocation = exports2.HttpAuthLocation || (exports2.HttpAuthLocation = {}));
  }
});

var require_blob_payload_input_types = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/blob/blob-payload-input-types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_checksum = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/checksum.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_client = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_command = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/command.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_config = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/connection/config.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_manager = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/connection/manager.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_pool = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/connection/pool.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_connection = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/connection/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_config(), exports2);
    tslib_1.__exportStar(require_manager(), exports2);
    tslib_1.__exportStar(require_pool(), exports2);
  }
});

var require_crypto = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/crypto.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_encode = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/encode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_endpoint = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/endpoint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EndpointURLScheme = void 0;
    var EndpointURLScheme;
    (function(EndpointURLScheme2) {
      EndpointURLScheme2["HTTP"] = "http";
      EndpointURLScheme2["HTTPS"] = "https";
    })(EndpointURLScheme = exports2.EndpointURLScheme || (exports2.EndpointURLScheme = {}));
  }
});

var require_EndpointRuleObject = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/endpoints/EndpointRuleObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_ErrorRuleObject = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/endpoints/ErrorRuleObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_RuleSetObject = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/endpoints/RuleSetObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_shared = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/endpoints/shared.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_TreeRuleObject = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/endpoints/TreeRuleObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_endpoints = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/endpoints/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_EndpointRuleObject(), exports2);
    tslib_1.__exportStar(require_ErrorRuleObject(), exports2);
    tslib_1.__exportStar(require_RuleSetObject(), exports2);
    tslib_1.__exportStar(require_shared(), exports2);
    tslib_1.__exportStar(require_TreeRuleObject(), exports2);
  }
});

var require_eventStream = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/eventStream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_checksum2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/extensions/checksum.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveChecksumRuntimeConfig = exports2.getChecksumConfiguration = exports2.AlgorithmId = void 0;
    var AlgorithmId;
    (function(AlgorithmId2) {
      AlgorithmId2["MD5"] = "md5";
      AlgorithmId2["CRC32"] = "crc32";
      AlgorithmId2["CRC32C"] = "crc32c";
      AlgorithmId2["SHA1"] = "sha1";
      AlgorithmId2["SHA256"] = "sha256";
    })(AlgorithmId = exports2.AlgorithmId || (exports2.AlgorithmId = {}));
    var getChecksumConfiguration = (runtimeConfig) => {
      const checksumAlgorithms = [];
      if (runtimeConfig.sha256 !== void 0) {
        checksumAlgorithms.push({
          algorithmId: () => AlgorithmId.SHA256,
          checksumConstructor: () => runtimeConfig.sha256
        });
      }
      if (runtimeConfig.md5 != void 0) {
        checksumAlgorithms.push({
          algorithmId: () => AlgorithmId.MD5,
          checksumConstructor: () => runtimeConfig.md5
        });
      }
      return {
        _checksumAlgorithms: checksumAlgorithms,
        addChecksumAlgorithm(algo) {
          this._checksumAlgorithms.push(algo);
        },
        checksumAlgorithms() {
          return this._checksumAlgorithms;
        }
      };
    };
    exports2.getChecksumConfiguration = getChecksumConfiguration;
    var resolveChecksumRuntimeConfig = (clientConfig) => {
      const runtimeConfig = {};
      clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {
        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
      });
      return runtimeConfig;
    };
    exports2.resolveChecksumRuntimeConfig = resolveChecksumRuntimeConfig;
  }
});

var require_defaultClientConfiguration = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/extensions/defaultClientConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveDefaultRuntimeConfig = exports2.getDefaultClientConfiguration = void 0;
    var checksum_1 = require_checksum2();
    var getDefaultClientConfiguration = (runtimeConfig) => {
      return {
        ...(0, checksum_1.getChecksumConfiguration)(runtimeConfig)
      };
    };
    exports2.getDefaultClientConfiguration = getDefaultClientConfiguration;
    var resolveDefaultRuntimeConfig = (config) => {
      return {
        ...(0, checksum_1.resolveChecksumRuntimeConfig)(config)
      };
    };
    exports2.resolveDefaultRuntimeConfig = resolveDefaultRuntimeConfig;
  }
});

var require_defaultExtensionConfiguration = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/extensions/defaultExtensionConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_extensions = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/extensions/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AlgorithmId = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_defaultClientConfiguration(), exports2);
    tslib_1.__exportStar(require_defaultExtensionConfiguration(), exports2);
    var checksum_1 = require_checksum2();
    Object.defineProperty(exports2, "AlgorithmId", { enumerable: true, get: function() {
      return checksum_1.AlgorithmId;
    } });
  }
});

var require_http = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/http.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FieldPosition = void 0;
    var FieldPosition;
    (function(FieldPosition2) {
      FieldPosition2[FieldPosition2["HEADER"] = 0] = "HEADER";
      FieldPosition2[FieldPosition2["TRAILER"] = 1] = "TRAILER";
    })(FieldPosition = exports2.FieldPosition || (exports2.FieldPosition = {}));
  }
});

var require_awsCredentialIdentity = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/identity/awsCredentialIdentity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_identity = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/identity/identity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_identity2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/identity/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_awsCredentialIdentity(), exports2);
    tslib_1.__exportStar(require_identity(), exports2);
  }
});

var require_logger = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/logger.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_middleware = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/middleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_pagination = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/pagination.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_profile = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/profile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_response = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/response.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_retry = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/retry.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_serde = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/serde.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_shapes = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/shapes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_signature = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/signature.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_stream = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/stream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_streaming_blob_common_types = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/streaming-payload/streaming-blob-common-types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_streaming_blob_payload_input_types = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/streaming-payload/streaming-blob-payload-input-types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_streaming_blob_payload_output_types = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/streaming-payload/streaming-blob-payload-output-types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_transfer = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/transfer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RequestHandlerProtocol = void 0;
    var RequestHandlerProtocol;
    (function(RequestHandlerProtocol2) {
      RequestHandlerProtocol2["HTTP_0_9"] = "http/0.9";
      RequestHandlerProtocol2["HTTP_1_0"] = "http/1.0";
      RequestHandlerProtocol2["TDS_8_0"] = "tds/8.0";
    })(RequestHandlerProtocol = exports2.RequestHandlerProtocol || (exports2.RequestHandlerProtocol = {}));
  }
});

var require_client_payload_blob_type_narrow = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/transform/client-payload-blob-type-narrow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_type_transform = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/transform/type-transform.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_uri = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/uri.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_util2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_waiter = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/waiter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_dist_cjs = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/types/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_abort(), exports2);
    tslib_1.__exportStar(require_auth(), exports2);
    tslib_1.__exportStar(require_blob_payload_input_types(), exports2);
    tslib_1.__exportStar(require_checksum(), exports2);
    tslib_1.__exportStar(require_client(), exports2);
    tslib_1.__exportStar(require_command(), exports2);
    tslib_1.__exportStar(require_connection(), exports2);
    tslib_1.__exportStar(require_crypto(), exports2);
    tslib_1.__exportStar(require_encode(), exports2);
    tslib_1.__exportStar(require_endpoint(), exports2);
    tslib_1.__exportStar(require_endpoints(), exports2);
    tslib_1.__exportStar(require_eventStream(), exports2);
    tslib_1.__exportStar(require_extensions(), exports2);
    tslib_1.__exportStar(require_http(), exports2);
    tslib_1.__exportStar(require_identity2(), exports2);
    tslib_1.__exportStar(require_logger(), exports2);
    tslib_1.__exportStar(require_middleware(), exports2);
    tslib_1.__exportStar(require_pagination(), exports2);
    tslib_1.__exportStar(require_profile(), exports2);
    tslib_1.__exportStar(require_response(), exports2);
    tslib_1.__exportStar(require_retry(), exports2);
    tslib_1.__exportStar(require_serde(), exports2);
    tslib_1.__exportStar(require_shapes(), exports2);
    tslib_1.__exportStar(require_signature(), exports2);
    tslib_1.__exportStar(require_stream(), exports2);
    tslib_1.__exportStar(require_streaming_blob_common_types(), exports2);
    tslib_1.__exportStar(require_streaming_blob_payload_input_types(), exports2);
    tslib_1.__exportStar(require_streaming_blob_payload_output_types(), exports2);
    tslib_1.__exportStar(require_transfer(), exports2);
    tslib_1.__exportStar(require_client_payload_blob_type_narrow(), exports2);
    tslib_1.__exportStar(require_type_transform(), exports2);
    tslib_1.__exportStar(require_uri(), exports2);
    tslib_1.__exportStar(require_util2(), exports2);
    tslib_1.__exportStar(require_waiter(), exports2);
  }
});

var require_Field = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/protocol-http/dist-cjs/Field.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Field = void 0;
    var types_1 = require_dist_cjs();
    var Field = class {
      constructor({ name, kind = types_1.FieldPosition.HEADER, values = [] }) {
        this.name = name;
        this.kind = kind;
        this.values = values;
      }
      add(value) {
        this.values.push(value);
      }
      set(values) {
        this.values = values;
      }
      remove(value) {
        this.values = this.values.filter((v) => v !== value);
      }
      toString() {
        return this.values.map((v) => v.includes(",") || v.includes(" ") ? `"${v}"` : v).join(", ");
      }
      get() {
        return this.values;
      }
    };
    exports2.Field = Field;
  }
});

var require_Fields = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/protocol-http/dist-cjs/Fields.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Fields = void 0;
    var Fields = class {
      constructor({ fields = [], encoding = "utf-8" }) {
        this.entries = {};
        fields.forEach(this.setField.bind(this));
        this.encoding = encoding;
      }
      setField(field) {
        this.entries[field.name.toLowerCase()] = field;
      }
      getField(name) {
        return this.entries[name.toLowerCase()];
      }
      removeField(name) {
        delete this.entries[name.toLowerCase()];
      }
      getByType(kind) {
        return Object.values(this.entries).filter((field) => field.kind === kind);
      }
    };
    exports2.Fields = Fields;
  }
});

var require_httpHandler = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/protocol-http/dist-cjs/httpHandler.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_httpRequest = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/protocol-http/dist-cjs/httpRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HttpRequest = void 0;
    var HttpRequest = class _HttpRequest {
      constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
        this.username = options.username;
        this.password = options.password;
        this.fragment = options.fragment;
      }
      static isInstance(request) {
        if (!request)
          return false;
        const req = request;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      clone() {
        const cloned = new _HttpRequest({
          ...this,
          headers: { ...this.headers }
        });
        if (cloned.query)
          cloned.query = cloneQuery(cloned.query);
        return cloned;
      }
    };
    exports2.HttpRequest = HttpRequest;
    function cloneQuery(query) {
      return Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
          ...carry,
          [paramName]: Array.isArray(param) ? [...param] : param
        };
      }, {});
    }
  }
});

var require_httpResponse = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/protocol-http/dist-cjs/httpResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HttpResponse = void 0;
    var HttpResponse = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.reason = options.reason;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response)
          return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
      }
    };
    exports2.HttpResponse = HttpResponse;
  }
});

var require_isValidHostname = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/protocol-http/dist-cjs/isValidHostname.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isValidHostname = void 0;
    function isValidHostname(hostname) {
      const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
      return hostPattern.test(hostname);
    }
    exports2.isValidHostname = isValidHostname;
  }
});

var require_types = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/protocol-http/dist-cjs/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_dist_cjs2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/protocol-http/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Field(), exports2);
    tslib_1.__exportStar(require_Fields(), exports2);
    tslib_1.__exportStar(require_httpHandler(), exports2);
    tslib_1.__exportStar(require_httpRequest(), exports2);
    tslib_1.__exportStar(require_httpResponse(), exports2);
    tslib_1.__exportStar(require_isValidHostname(), exports2);
    tslib_1.__exportStar(require_types(), exports2);
  }
});

var require_dist_cjs3 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getHostHeaderPlugin = exports2.hostHeaderMiddlewareOptions = exports2.hostHeaderMiddleware = exports2.resolveHostHeaderConfig = void 0;
    var protocol_http_1 = require_dist_cjs2();
    function resolveHostHeaderConfig(input) {
      return input;
    }
    exports2.resolveHostHeaderConfig = resolveHostHeaderConfig;
    var hostHeaderMiddleware = (options) => (next) => async (args) => {
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const { request } = args;
      const { handlerProtocol = "" } = options.requestHandler.metadata || {};
      if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
        delete request.headers["host"];
        request.headers[":authority"] = "";
      } else if (!request.headers["host"]) {
        let host = request.hostname;
        if (request.port != null)
          host += `:${request.port}`;
        request.headers["host"] = host;
      }
      return next(args);
    };
    exports2.hostHeaderMiddleware = hostHeaderMiddleware;
    exports2.hostHeaderMiddlewareOptions = {
      name: "hostHeaderMiddleware",
      step: "build",
      priority: "low",
      tags: ["HOST"],
      override: true
    };
    var getHostHeaderPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports2.hostHeaderMiddleware)(options), exports2.hostHeaderMiddlewareOptions);
      }
    });
    exports2.getHostHeaderPlugin = getHostHeaderPlugin;
  }
});

var require_loggerMiddleware = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getLoggerPlugin = exports2.loggerMiddlewareOptions = exports2.loggerMiddleware = void 0;
    var loggerMiddleware = () => (next, context) => async (args) => {
      var _a, _b;
      try {
        const response = await next(args);
        const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog !== null && overrideInputFilterSensitiveLog !== void 0 ? overrideInputFilterSensitiveLog : context.inputFilterSensitiveLog;
        const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog !== null && overrideOutputFilterSensitiveLog !== void 0 ? overrideOutputFilterSensitiveLog : context.outputFilterSensitiveLog;
        const { $metadata, ...outputWithoutMetadata } = response.output;
        (_a = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, {
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          output: outputFilterSensitiveLog(outputWithoutMetadata),
          metadata: $metadata
        });
        return response;
      } catch (error) {
        const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog !== null && overrideInputFilterSensitiveLog !== void 0 ? overrideInputFilterSensitiveLog : context.inputFilterSensitiveLog;
        (_b = logger === null || logger === void 0 ? void 0 : logger.error) === null || _b === void 0 ? void 0 : _b.call(logger, {
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          error,
          metadata: error.$metadata
        });
        throw error;
      }
    };
    exports2.loggerMiddleware = loggerMiddleware;
    exports2.loggerMiddlewareOptions = {
      name: "loggerMiddleware",
      tags: ["LOGGER"],
      step: "initialize",
      override: true
    };
    var getLoggerPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports2.loggerMiddleware)(), exports2.loggerMiddlewareOptions);
      }
    });
    exports2.getLoggerPlugin = getLoggerPlugin;
  }
});

var require_dist_cjs4 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_loggerMiddleware(), exports2);
  }
});

var require_dist_cjs5 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRecursionDetectionPlugin = exports2.addRecursionDetectionMiddlewareOptions = exports2.recursionDetectionMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
    var ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
    var ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
    var recursionDetectionMiddleware = (options) => (next) => async (args) => {
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request) || options.runtime !== "node" || request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {
        return next(args);
      }
      const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
      const traceId = process.env[ENV_TRACE_ID];
      const nonEmptyString = (str) => typeof str === "string" && str.length > 0;
      if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
        request.headers[TRACE_ID_HEADER_NAME] = traceId;
      }
      return next({
        ...args,
        request
      });
    };
    exports2.recursionDetectionMiddleware = recursionDetectionMiddleware;
    exports2.addRecursionDetectionMiddlewareOptions = {
      step: "build",
      tags: ["RECURSION_DETECTION"],
      name: "recursionDetectionMiddleware",
      override: true,
      priority: "low"
    };
    var getRecursionDetectionPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports2.recursionDetectionMiddleware)(options), exports2.addRecursionDetectionMiddlewareOptions);
      }
    });
    exports2.getRecursionDetectionPlugin = getRecursionDetectionPlugin;
  }
});

var require_ProviderError = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/property-provider/dist-cjs/ProviderError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProviderError = void 0;
    var ProviderError = class _ProviderError extends Error {
      constructor(message, tryNextLink = true) {
        super(message);
        this.tryNextLink = tryNextLink;
        this.name = "ProviderError";
        Object.setPrototypeOf(this, _ProviderError.prototype);
      }
      static from(error, tryNextLink = true) {
        return Object.assign(new this(error.message, tryNextLink), error);
      }
    };
    exports2.ProviderError = ProviderError;
  }
});

var require_CredentialsProviderError = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/property-provider/dist-cjs/CredentialsProviderError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CredentialsProviderError = void 0;
    var ProviderError_1 = require_ProviderError();
    var CredentialsProviderError = class _CredentialsProviderError extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "CredentialsProviderError";
        Object.setPrototypeOf(this, _CredentialsProviderError.prototype);
      }
    };
    exports2.CredentialsProviderError = CredentialsProviderError;
  }
});

var require_TokenProviderError = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/property-provider/dist-cjs/TokenProviderError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TokenProviderError = void 0;
    var ProviderError_1 = require_ProviderError();
    var TokenProviderError = class _TokenProviderError extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "TokenProviderError";
        Object.setPrototypeOf(this, _TokenProviderError.prototype);
      }
    };
    exports2.TokenProviderError = TokenProviderError;
  }
});

var require_chain = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/property-provider/dist-cjs/chain.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.chain = void 0;
    var ProviderError_1 = require_ProviderError();
    var chain = (...providers) => async () => {
      if (providers.length === 0) {
        throw new ProviderError_1.ProviderError("No providers in chain");
      }
      let lastProviderError;
      for (const provider of providers) {
        try {
          const credentials = await provider();
          return credentials;
        } catch (err) {
          lastProviderError = err;
          if (err === null || err === void 0 ? void 0 : err.tryNextLink) {
            continue;
          }
          throw err;
        }
      }
      throw lastProviderError;
    };
    exports2.chain = chain;
  }
});

var require_fromStatic = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/property-provider/dist-cjs/fromStatic.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromStatic = void 0;
    var fromStatic = (staticValue) => () => Promise.resolve(staticValue);
    exports2.fromStatic = fromStatic;
  }
});

var require_memoize = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/property-provider/dist-cjs/memoize.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.memoize = void 0;
    var memoize = (provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    };
    exports2.memoize = memoize;
  }
});

var require_dist_cjs6 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/property-provider/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_CredentialsProviderError(), exports2);
    tslib_1.__exportStar(require_ProviderError(), exports2);
    tslib_1.__exportStar(require_TokenProviderError(), exports2);
    tslib_1.__exportStar(require_chain(), exports2);
    tslib_1.__exportStar(require_fromStatic(), exports2);
    tslib_1.__exportStar(require_memoize(), exports2);
  }
});

var require_pureJs = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-utf8-browser/dist-cjs/pureJs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toUtf8 = exports2.fromUtf8 = void 0;
    var fromUtf8 = (input) => {
      const bytes = [];
      for (let i = 0, len = input.length; i < len; i++) {
        const value = input.charCodeAt(i);
        if (value < 128) {
          bytes.push(value);
        } else if (value < 2048) {
          bytes.push(value >> 6 | 192, value & 63 | 128);
        } else if (i + 1 < input.length && (value & 64512) === 55296 && (input.charCodeAt(i + 1) & 64512) === 56320) {
          const surrogatePair = 65536 + ((value & 1023) << 10) + (input.charCodeAt(++i) & 1023);
          bytes.push(surrogatePair >> 18 | 240, surrogatePair >> 12 & 63 | 128, surrogatePair >> 6 & 63 | 128, surrogatePair & 63 | 128);
        } else {
          bytes.push(value >> 12 | 224, value >> 6 & 63 | 128, value & 63 | 128);
        }
      }
      return Uint8Array.from(bytes);
    };
    exports2.fromUtf8 = fromUtf8;
    var toUtf8 = (input) => {
      let decoded = "";
      for (let i = 0, len = input.length; i < len; i++) {
        const byte = input[i];
        if (byte < 128) {
          decoded += String.fromCharCode(byte);
        } else if (192 <= byte && byte < 224) {
          const nextByte = input[++i];
          decoded += String.fromCharCode((byte & 31) << 6 | nextByte & 63);
        } else if (240 <= byte && byte < 365) {
          const surrogatePair = [byte, input[++i], input[++i], input[++i]];
          const encoded = "%" + surrogatePair.map((byteValue) => byteValue.toString(16)).join("%");
          decoded += decodeURIComponent(encoded);
        } else {
          decoded += String.fromCharCode((byte & 15) << 12 | (input[++i] & 63) << 6 | input[++i] & 63);
        }
      }
      return decoded;
    };
    exports2.toUtf8 = toUtf8;
  }
});

var require_whatwgEncodingApi = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-utf8-browser/dist-cjs/whatwgEncodingApi.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toUtf8 = exports2.fromUtf8 = void 0;
    function fromUtf8(input) {
      return new TextEncoder().encode(input);
    }
    exports2.fromUtf8 = fromUtf8;
    function toUtf8(input) {
      return new TextDecoder("utf-8").decode(input);
    }
    exports2.toUtf8 = toUtf8;
  }
});

var require_dist_cjs7 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-utf8-browser/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toUtf8 = exports2.fromUtf8 = void 0;
    var pureJs_1 = require_pureJs();
    var whatwgEncodingApi_1 = require_whatwgEncodingApi();
    var fromUtf8 = (input) => typeof TextEncoder === "function" ? (0, whatwgEncodingApi_1.fromUtf8)(input) : (0, pureJs_1.fromUtf8)(input);
    exports2.fromUtf8 = fromUtf8;
    var toUtf8 = (input) => typeof TextDecoder === "function" ? (0, whatwgEncodingApi_1.toUtf8)(input) : (0, pureJs_1.toUtf8)(input);
    exports2.toUtf8 = toUtf8;
  }
});

var require_convertToBuffer = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-crypto/util/build/convertToBuffer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.convertToBuffer = void 0;
    var util_utf8_browser_1 = require_dist_cjs7();
    var fromUtf8 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
      return Buffer.from(input, "utf8");
    } : util_utf8_browser_1.fromUtf8;
    function convertToBuffer(data) {
      if (data instanceof Uint8Array)
        return data;
      if (typeof data === "string") {
        return fromUtf8(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
    exports2.convertToBuffer = convertToBuffer;
  }
});

var require_isEmptyData = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-crypto/util/build/isEmptyData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isEmptyData = void 0;
    function isEmptyData(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    exports2.isEmptyData = isEmptyData;
  }
});

var require_numToUint8 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-crypto/util/build/numToUint8.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.numToUint8 = void 0;
    function numToUint8(num) {
      return new Uint8Array([
        (num & 4278190080) >> 24,
        (num & 16711680) >> 16,
        (num & 65280) >> 8,
        num & 255
      ]);
    }
    exports2.numToUint8 = numToUint8;
  }
});

var require_uint32ArrayFrom = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-crypto/util/build/uint32ArrayFrom.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.uint32ArrayFrom = void 0;
    function uint32ArrayFrom(a_lookUpTable) {
      if (!Uint32Array.from) {
        var return_array = new Uint32Array(a_lookUpTable.length);
        var a_index = 0;
        while (a_index < a_lookUpTable.length) {
          return_array[a_index] = a_lookUpTable[a_index];
          a_index += 1;
        }
        return return_array;
      }
      return Uint32Array.from(a_lookUpTable);
    }
    exports2.uint32ArrayFrom = uint32ArrayFrom;
  }
});

var require_build = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-crypto/util/build/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.uint32ArrayFrom = exports2.numToUint8 = exports2.isEmptyData = exports2.convertToBuffer = void 0;
    var convertToBuffer_1 = require_convertToBuffer();
    Object.defineProperty(exports2, "convertToBuffer", { enumerable: true, get: function() {
      return convertToBuffer_1.convertToBuffer;
    } });
    var isEmptyData_1 = require_isEmptyData();
    Object.defineProperty(exports2, "isEmptyData", { enumerable: true, get: function() {
      return isEmptyData_1.isEmptyData;
    } });
    var numToUint8_1 = require_numToUint8();
    Object.defineProperty(exports2, "numToUint8", { enumerable: true, get: function() {
      return numToUint8_1.numToUint8;
    } });
    var uint32ArrayFrom_1 = require_uint32ArrayFrom();
    Object.defineProperty(exports2, "uint32ArrayFrom", { enumerable: true, get: function() {
      return uint32ArrayFrom_1.uint32ArrayFrom;
    } });
  }
});

var require_aws_crc32 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-crypto/crc32/build/aws_crc32.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AwsCrc32 = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var util_1 = require_build();
    var index_1 = require_build2();
    var AwsCrc32 = (
      /** @class */
      function() {
        function AwsCrc322() {
          this.crc32 = new index_1.Crc32();
        }
        AwsCrc322.prototype.update = function(toHash) {
          if ((0, util_1.isEmptyData)(toHash))
            return;
          this.crc32.update((0, util_1.convertToBuffer)(toHash));
        };
        AwsCrc322.prototype.digest = function() {
          return tslib_1.__awaiter(this, void 0, void 0, function() {
            return tslib_1.__generator(this, function(_a) {
              return [2, (0, util_1.numToUint8)(this.crc32.digest())];
            });
          });
        };
        AwsCrc322.prototype.reset = function() {
          this.crc32 = new index_1.Crc32();
        };
        return AwsCrc322;
      }()
    );
    exports2.AwsCrc32 = AwsCrc32;
  }
});

var require_build2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-crypto/crc32/build/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AwsCrc32 = exports2.Crc32 = exports2.crc32 = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var util_1 = require_build();
    function crc32(data) {
      return new Crc32().update(data).digest();
    }
    exports2.crc32 = crc32;
    var Crc32 = (
      /** @class */
      function() {
        function Crc322() {
          this.checksum = 4294967295;
        }
        Crc322.prototype.update = function(data) {
          var e_1, _a;
          try {
            for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
              var byte = data_1_1.value;
              this.checksum = this.checksum >>> 8 ^ lookupTable[(this.checksum ^ byte) & 255];
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (data_1_1 && !data_1_1.done && (_a = data_1.return))
                _a.call(data_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          return this;
        };
        Crc322.prototype.digest = function() {
          return (this.checksum ^ 4294967295) >>> 0;
        };
        return Crc322;
      }()
    );
    exports2.Crc32 = Crc32;
    var a_lookUpTable = [
      0,
      1996959894,
      3993919788,
      2567524794,
      124634137,
      1886057615,
      3915621685,
      2657392035,
      249268274,
      2044508324,
      3772115230,
      2547177864,
      162941995,
      2125561021,
      3887607047,
      2428444049,
      498536548,
      1789927666,
      4089016648,
      2227061214,
      450548861,
      1843258603,
      4107580753,
      2211677639,
      325883990,
      1684777152,
      4251122042,
      2321926636,
      335633487,
      1661365465,
      4195302755,
      2366115317,
      997073096,
      1281953886,
      3579855332,
      2724688242,
      1006888145,
      1258607687,
      3524101629,
      2768942443,
      901097722,
      1119000684,
      3686517206,
      2898065728,
      853044451,
      1172266101,
      3705015759,
      2882616665,
      651767980,
      1373503546,
      3369554304,
      3218104598,
      565507253,
      1454621731,
      3485111705,
      3099436303,
      671266974,
      1594198024,
      3322730930,
      2970347812,
      795835527,
      1483230225,
      3244367275,
      3060149565,
      1994146192,
      31158534,
      2563907772,
      4023717930,
      1907459465,
      112637215,
      2680153253,
      3904427059,
      2013776290,
      251722036,
      2517215374,
      3775830040,
      2137656763,
      141376813,
      2439277719,
      3865271297,
      1802195444,
      476864866,
      2238001368,
      4066508878,
      1812370925,
      453092731,
      2181625025,
      4111451223,
      1706088902,
      314042704,
      2344532202,
      4240017532,
      1658658271,
      366619977,
      2362670323,
      4224994405,
      1303535960,
      984961486,
      2747007092,
      3569037538,
      1256170817,
      1037604311,
      2765210733,
      3554079995,
      1131014506,
      879679996,
      2909243462,
      3663771856,
      1141124467,
      855842277,
      2852801631,
      3708648649,
      1342533948,
      654459306,
      3188396048,
      3373015174,
      1466479909,
      544179635,
      3110523913,
      3462522015,
      1591671054,
      702138776,
      2966460450,
      3352799412,
      1504918807,
      783551873,
      3082640443,
      3233442989,
      3988292384,
      2596254646,
      62317068,
      1957810842,
      3939845945,
      2647816111,
      81470997,
      1943803523,
      3814918930,
      2489596804,
      225274430,
      2053790376,
      3826175755,
      2466906013,
      167816743,
      2097651377,
      4027552580,
      2265490386,
      503444072,
      1762050814,
      4150417245,
      2154129355,
      426522225,
      1852507879,
      4275313526,
      2312317920,
      282753626,
      1742555852,
      4189708143,
      2394877945,
      397917763,
      1622183637,
      3604390888,
      2714866558,
      953729732,
      1340076626,
      3518719985,
      2797360999,
      1068828381,
      1219638859,
      3624741850,
      2936675148,
      906185462,
      1090812512,
      3747672003,
      2825379669,
      829329135,
      1181335161,
      3412177804,
      3160834842,
      628085408,
      1382605366,
      3423369109,
      3138078467,
      570562233,
      1426400815,
      3317316542,
      2998733608,
      733239954,
      1555261956,
      3268935591,
      3050360625,
      752459403,
      1541320221,
      2607071920,
      3965973030,
      1969922972,
      40735498,
      2617837225,
      3943577151,
      1913087877,
      83908371,
      2512341634,
      3803740692,
      2075208622,
      213261112,
      2463272603,
      3855990285,
      2094854071,
      198958881,
      2262029012,
      4057260610,
      1759359992,
      534414190,
      2176718541,
      4139329115,
      1873836001,
      414664567,
      2282248934,
      4279200368,
      1711684554,
      285281116,
      2405801727,
      4167216745,
      1634467795,
      376229701,
      2685067896,
      3608007406,
      1308918612,
      956543938,
      2808555105,
      3495958263,
      1231636301,
      1047427035,
      2932959818,
      3654703836,
      1088359270,
      936918e3,
      2847714899,
      3736837829,
      1202900863,
      817233897,
      3183342108,
      3401237130,
      1404277552,
      615818150,
      3134207493,
      3453421203,
      1423857449,
      601450431,
      3009837614,
      3294710456,
      1567103746,
      711928724,
      3020668471,
      3272380065,
      1510334235,
      755167117
    ];
    var lookupTable = (0, util_1.uint32ArrayFrom)(a_lookUpTable);
    var aws_crc32_1 = require_aws_crc32();
    Object.defineProperty(exports2, "AwsCrc32", { enumerable: true, get: function() {
      return aws_crc32_1.AwsCrc32;
    } });
  }
});

var require_dist_cjs8 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-hex-encoding/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toHex = exports2.fromHex = void 0;
    var SHORT_TO_HEX = {};
    var HEX_TO_SHORT = {};
    for (let i = 0; i < 256; i++) {
      let encodedByte = i.toString(16).toLowerCase();
      if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
      }
      SHORT_TO_HEX[i] = encodedByte;
      HEX_TO_SHORT[encodedByte] = i;
    }
    function fromHex(encoded) {
      if (encoded.length % 2 !== 0) {
        throw new Error("Hex encoded strings must have an even number length");
      }
      const out = new Uint8Array(encoded.length / 2);
      for (let i = 0; i < encoded.length; i += 2) {
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) {
          out[i / 2] = HEX_TO_SHORT[encodedByte];
        } else {
          throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
        }
      }
      return out;
    }
    exports2.fromHex = fromHex;
    function toHex(bytes) {
      let out = "";
      for (let i = 0; i < bytes.byteLength; i++) {
        out += SHORT_TO_HEX[bytes[i]];
      }
      return out;
    }
    exports2.toHex = toHex;
  }
});

var require_Int64 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-codec/dist-cjs/Int64.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Int64 = void 0;
    var util_hex_encoding_1 = require_dist_cjs8();
    var Int64 = class _Int64 {
      constructor(bytes) {
        this.bytes = bytes;
        if (bytes.byteLength !== 8) {
          throw new Error("Int64 buffers must be exactly 8 bytes");
        }
      }
      static fromNumber(number) {
        if (number > 9223372036854776e3 || number < -9223372036854776e3) {
          throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);
        }
        const bytes = new Uint8Array(8);
        for (let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {
          bytes[i] = remaining;
        }
        if (number < 0) {
          negate(bytes);
        }
        return new _Int64(bytes);
      }
      valueOf() {
        const bytes = this.bytes.slice(0);
        const negative = bytes[0] & 128;
        if (negative) {
          negate(bytes);
        }
        return parseInt((0, util_hex_encoding_1.toHex)(bytes), 16) * (negative ? -1 : 1);
      }
      toString() {
        return String(this.valueOf());
      }
    };
    exports2.Int64 = Int64;
    function negate(bytes) {
      for (let i = 0; i < 8; i++) {
        bytes[i] ^= 255;
      }
      for (let i = 7; i > -1; i--) {
        bytes[i]++;
        if (bytes[i] !== 0)
          break;
      }
    }
  }
});

var require_HeaderMarshaller = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-codec/dist-cjs/HeaderMarshaller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HeaderMarshaller = void 0;
    var util_hex_encoding_1 = require_dist_cjs8();
    var Int64_1 = require_Int64();
    var HeaderMarshaller = class {
      constructor(toUtf8, fromUtf8) {
        this.toUtf8 = toUtf8;
        this.fromUtf8 = fromUtf8;
      }
      format(headers) {
        const chunks = [];
        for (const headerName of Object.keys(headers)) {
          const bytes = this.fromUtf8(headerName);
          chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
        }
        const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));
        let position = 0;
        for (const chunk of chunks) {
          out.set(chunk, position);
          position += chunk.byteLength;
        }
        return out;
      }
      formatHeaderValue(header) {
        switch (header.type) {
          case "boolean":
            return Uint8Array.from([header.value ? 0 : 1]);
          case "byte":
            return Uint8Array.from([2, header.value]);
          case "short":
            const shortView = new DataView(new ArrayBuffer(3));
            shortView.setUint8(0, 3);
            shortView.setInt16(1, header.value, false);
            return new Uint8Array(shortView.buffer);
          case "integer":
            const intView = new DataView(new ArrayBuffer(5));
            intView.setUint8(0, 4);
            intView.setInt32(1, header.value, false);
            return new Uint8Array(intView.buffer);
          case "long":
            const longBytes = new Uint8Array(9);
            longBytes[0] = 5;
            longBytes.set(header.value.bytes, 1);
            return longBytes;
          case "binary":
            const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
            binView.setUint8(0, 6);
            binView.setUint16(1, header.value.byteLength, false);
            const binBytes = new Uint8Array(binView.buffer);
            binBytes.set(header.value, 3);
            return binBytes;
          case "string":
            const utf8Bytes = this.fromUtf8(header.value);
            const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
            strView.setUint8(0, 7);
            strView.setUint16(1, utf8Bytes.byteLength, false);
            const strBytes = new Uint8Array(strView.buffer);
            strBytes.set(utf8Bytes, 3);
            return strBytes;
          case "timestamp":
            const tsBytes = new Uint8Array(9);
            tsBytes[0] = 8;
            tsBytes.set(Int64_1.Int64.fromNumber(header.value.valueOf()).bytes, 1);
            return tsBytes;
          case "uuid":
            if (!UUID_PATTERN.test(header.value)) {
              throw new Error(`Invalid UUID received: ${header.value}`);
            }
            const uuidBytes = new Uint8Array(17);
            uuidBytes[0] = 9;
            uuidBytes.set((0, util_hex_encoding_1.fromHex)(header.value.replace(/\-/g, "")), 1);
            return uuidBytes;
        }
      }
      parse(headers) {
        const out = {};
        let position = 0;
        while (position < headers.byteLength) {
          const nameLength = headers.getUint8(position++);
          const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));
          position += nameLength;
          switch (headers.getUint8(position++)) {
            case 0:
              out[name] = {
                type: BOOLEAN_TAG,
                value: true
              };
              break;
            case 1:
              out[name] = {
                type: BOOLEAN_TAG,
                value: false
              };
              break;
            case 2:
              out[name] = {
                type: BYTE_TAG,
                value: headers.getInt8(position++)
              };
              break;
            case 3:
              out[name] = {
                type: SHORT_TAG,
                value: headers.getInt16(position, false)
              };
              position += 2;
              break;
            case 4:
              out[name] = {
                type: INT_TAG,
                value: headers.getInt32(position, false)
              };
              position += 4;
              break;
            case 5:
              out[name] = {
                type: LONG_TAG,
                value: new Int64_1.Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8))
              };
              position += 8;
              break;
            case 6:
              const binaryLength = headers.getUint16(position, false);
              position += 2;
              out[name] = {
                type: BINARY_TAG,
                value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength)
              };
              position += binaryLength;
              break;
            case 7:
              const stringLength = headers.getUint16(position, false);
              position += 2;
              out[name] = {
                type: STRING_TAG,
                value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength))
              };
              position += stringLength;
              break;
            case 8:
              out[name] = {
                type: TIMESTAMP_TAG,
                value: new Date(new Int64_1.Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf())
              };
              position += 8;
              break;
            case 9:
              const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);
              position += 16;
              out[name] = {
                type: UUID_TAG,
                value: `${(0, util_hex_encoding_1.toHex)(uuidBytes.subarray(0, 4))}-${(0, util_hex_encoding_1.toHex)(uuidBytes.subarray(4, 6))}-${(0, util_hex_encoding_1.toHex)(uuidBytes.subarray(6, 8))}-${(0, util_hex_encoding_1.toHex)(uuidBytes.subarray(8, 10))}-${(0, util_hex_encoding_1.toHex)(uuidBytes.subarray(10))}`
              };
              break;
            default:
              throw new Error(`Unrecognized header type tag`);
          }
        }
        return out;
      }
    };
    exports2.HeaderMarshaller = HeaderMarshaller;
    var HEADER_VALUE_TYPE;
    (function(HEADER_VALUE_TYPE2) {
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["boolTrue"] = 0] = "boolTrue";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["boolFalse"] = 1] = "boolFalse";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["byte"] = 2] = "byte";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["short"] = 3] = "short";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["integer"] = 4] = "integer";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["long"] = 5] = "long";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["byteArray"] = 6] = "byteArray";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["string"] = 7] = "string";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["timestamp"] = 8] = "timestamp";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["uuid"] = 9] = "uuid";
    })(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));
    var BOOLEAN_TAG = "boolean";
    var BYTE_TAG = "byte";
    var SHORT_TAG = "short";
    var INT_TAG = "integer";
    var LONG_TAG = "long";
    var BINARY_TAG = "binary";
    var STRING_TAG = "string";
    var TIMESTAMP_TAG = "timestamp";
    var UUID_TAG = "uuid";
    var UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
  }
});

var require_splitMessage = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-codec/dist-cjs/splitMessage.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.splitMessage = void 0;
    var crc32_1 = require_build2();
    var PRELUDE_MEMBER_LENGTH = 4;
    var PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;
    var CHECKSUM_LENGTH = 4;
    var MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;
    function splitMessage({ byteLength, byteOffset, buffer }) {
      if (byteLength < MINIMUM_MESSAGE_LENGTH) {
        throw new Error("Provided message too short to accommodate event stream message overhead");
      }
      const view = new DataView(buffer, byteOffset, byteLength);
      const messageLength = view.getUint32(0, false);
      if (byteLength !== messageLength) {
        throw new Error("Reported message length does not match received message length");
      }
      const headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);
      const expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);
      const expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);
      const checksummer = new crc32_1.Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));
      if (expectedPreludeChecksum !== checksummer.digest()) {
        throw new Error(`The prelude checksum specified in the message (${expectedPreludeChecksum}) does not match the calculated CRC32 checksum (${checksummer.digest()})`);
      }
      checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));
      if (expectedMessageChecksum !== checksummer.digest()) {
        throw new Error(`The message checksum (${checksummer.digest()}) did not match the expected value of ${expectedMessageChecksum}`);
      }
      return {
        headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),
        body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH))
      };
    }
    exports2.splitMessage = splitMessage;
  }
});

var require_EventStreamCodec = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-codec/dist-cjs/EventStreamCodec.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EventStreamCodec = void 0;
    var crc32_1 = require_build2();
    var HeaderMarshaller_1 = require_HeaderMarshaller();
    var splitMessage_1 = require_splitMessage();
    var EventStreamCodec = class {
      constructor(toUtf8, fromUtf8) {
        this.headerMarshaller = new HeaderMarshaller_1.HeaderMarshaller(toUtf8, fromUtf8);
        this.messageBuffer = [];
        this.isEndOfStream = false;
      }
      feed(message) {
        this.messageBuffer.push(this.decode(message));
      }
      endOfStream() {
        this.isEndOfStream = true;
      }
      getMessage() {
        const message = this.messageBuffer.pop();
        const isEndOfStream = this.isEndOfStream;
        return {
          getMessage() {
            return message;
          },
          isEndOfStream() {
            return isEndOfStream;
          }
        };
      }
      getAvailableMessages() {
        const messages = this.messageBuffer;
        this.messageBuffer = [];
        const isEndOfStream = this.isEndOfStream;
        return {
          getMessages() {
            return messages;
          },
          isEndOfStream() {
            return isEndOfStream;
          }
        };
      }
      encode({ headers: rawHeaders, body }) {
        const headers = this.headerMarshaller.format(rawHeaders);
        const length = headers.byteLength + body.byteLength + 16;
        const out = new Uint8Array(length);
        const view = new DataView(out.buffer, out.byteOffset, out.byteLength);
        const checksum = new crc32_1.Crc32();
        view.setUint32(0, length, false);
        view.setUint32(4, headers.byteLength, false);
        view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);
        out.set(headers, 12);
        out.set(body, headers.byteLength + 12);
        view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);
        return out;
      }
      decode(message) {
        const { headers, body } = (0, splitMessage_1.splitMessage)(message);
        return { headers: this.headerMarshaller.parse(headers), body };
      }
      formatHeaders(rawHeaders) {
        return this.headerMarshaller.format(rawHeaders);
      }
    };
    exports2.EventStreamCodec = EventStreamCodec;
  }
});

var require_Message = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-codec/dist-cjs/Message.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_MessageDecoderStream = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-codec/dist-cjs/MessageDecoderStream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MessageDecoderStream = void 0;
    var MessageDecoderStream = class {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const bytes of this.options.inputStream) {
          const decoded = this.options.decoder.decode(bytes);
          yield decoded;
        }
      }
    };
    exports2.MessageDecoderStream = MessageDecoderStream;
  }
});

var require_MessageEncoderStream = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-codec/dist-cjs/MessageEncoderStream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MessageEncoderStream = void 0;
    var MessageEncoderStream = class {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const msg of this.options.messageStream) {
          const encoded = this.options.encoder.encode(msg);
          yield encoded;
        }
        if (this.options.includeEndFrame) {
          yield new Uint8Array(0);
        }
      }
    };
    exports2.MessageEncoderStream = MessageEncoderStream;
  }
});

var require_SmithyMessageDecoderStream = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-codec/dist-cjs/SmithyMessageDecoderStream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SmithyMessageDecoderStream = void 0;
    var SmithyMessageDecoderStream = class {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const message of this.options.messageStream) {
          const deserialized = await this.options.deserializer(message);
          if (deserialized === void 0)
            continue;
          yield deserialized;
        }
      }
    };
    exports2.SmithyMessageDecoderStream = SmithyMessageDecoderStream;
  }
});

var require_SmithyMessageEncoderStream = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-codec/dist-cjs/SmithyMessageEncoderStream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SmithyMessageEncoderStream = void 0;
    var SmithyMessageEncoderStream = class {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const chunk of this.options.inputStream) {
          const payloadBuf = this.options.serializer(chunk);
          yield payloadBuf;
        }
      }
    };
    exports2.SmithyMessageEncoderStream = SmithyMessageEncoderStream;
  }
});

var require_dist_cjs9 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/eventstream-codec/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_EventStreamCodec(), exports2);
    tslib_1.__exportStar(require_HeaderMarshaller(), exports2);
    tslib_1.__exportStar(require_Int64(), exports2);
    tslib_1.__exportStar(require_Message(), exports2);
    tslib_1.__exportStar(require_MessageDecoderStream(), exports2);
    tslib_1.__exportStar(require_MessageEncoderStream(), exports2);
    tslib_1.__exportStar(require_SmithyMessageDecoderStream(), exports2);
    tslib_1.__exportStar(require_SmithyMessageEncoderStream(), exports2);
  }
});

var require_normalizeProvider = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-middleware/dist-cjs/normalizeProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.normalizeProvider = void 0;
    var normalizeProvider = (input) => {
      if (typeof input === "function")
        return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    };
    exports2.normalizeProvider = normalizeProvider;
  }
});

var require_dist_cjs10 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-middleware/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_normalizeProvider(), exports2);
  }
});

var require_dist_cjs11 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/is-array-buffer/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isArrayBuffer = void 0;
    var isArrayBuffer = (arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
    exports2.isArrayBuffer = isArrayBuffer;
  }
});

var require_dist_cjs12 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-buffer-from/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromString = exports2.fromArrayBuffer = void 0;
    var is_array_buffer_1 = require_dist_cjs11();
    var buffer_1 = require("buffer");
    var fromArrayBuffer = (input, offset = 0, length = input.byteLength - offset) => {
      if (!(0, is_array_buffer_1.isArrayBuffer)(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return buffer_1.Buffer.from(input, offset, length);
    };
    exports2.fromArrayBuffer = fromArrayBuffer;
    var fromString = (input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? buffer_1.Buffer.from(input, encoding) : buffer_1.Buffer.from(input);
    };
    exports2.fromString = fromString;
  }
});

var require_fromUtf8 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-utf8/dist-cjs/fromUtf8.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs12();
    var fromUtf8 = (input) => {
      const buf = (0, util_buffer_from_1.fromString)(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
    exports2.fromUtf8 = fromUtf8;
  }
});

var require_toUint8Array = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-utf8/dist-cjs/toUint8Array.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toUint8Array = void 0;
    var fromUtf8_1 = require_fromUtf8();
    var toUint8Array = (data) => {
      if (typeof data === "string") {
        return (0, fromUtf8_1.fromUtf8)(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    };
    exports2.toUint8Array = toUint8Array;
  }
});

var require_toUtf8 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-utf8/dist-cjs/toUtf8.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs12();
    var toUtf8 = (input) => (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
    exports2.toUtf8 = toUtf8;
  }
});

var require_dist_cjs13 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-utf8/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromUtf8(), exports2);
    tslib_1.__exportStar(require_toUint8Array(), exports2);
    tslib_1.__exportStar(require_toUtf8(), exports2);
  }
});

var require_constants2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/signature-v4/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MAX_PRESIGNED_TTL = exports2.KEY_TYPE_IDENTIFIER = exports2.MAX_CACHE_SIZE = exports2.UNSIGNED_PAYLOAD = exports2.EVENT_ALGORITHM_IDENTIFIER = exports2.ALGORITHM_IDENTIFIER_V4A = exports2.ALGORITHM_IDENTIFIER = exports2.UNSIGNABLE_PATTERNS = exports2.SEC_HEADER_PATTERN = exports2.PROXY_HEADER_PATTERN = exports2.ALWAYS_UNSIGNABLE_HEADERS = exports2.HOST_HEADER = exports2.TOKEN_HEADER = exports2.SHA256_HEADER = exports2.SIGNATURE_HEADER = exports2.GENERATED_HEADERS = exports2.DATE_HEADER = exports2.AMZ_DATE_HEADER = exports2.AUTH_HEADER = exports2.REGION_SET_PARAM = exports2.TOKEN_QUERY_PARAM = exports2.SIGNATURE_QUERY_PARAM = exports2.EXPIRES_QUERY_PARAM = exports2.SIGNED_HEADERS_QUERY_PARAM = exports2.AMZ_DATE_QUERY_PARAM = exports2.CREDENTIAL_QUERY_PARAM = exports2.ALGORITHM_QUERY_PARAM = void 0;
    exports2.ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
    exports2.CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
    exports2.AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
    exports2.SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
    exports2.EXPIRES_QUERY_PARAM = "X-Amz-Expires";
    exports2.SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
    exports2.TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
    exports2.REGION_SET_PARAM = "X-Amz-Region-Set";
    exports2.AUTH_HEADER = "authorization";
    exports2.AMZ_DATE_HEADER = exports2.AMZ_DATE_QUERY_PARAM.toLowerCase();
    exports2.DATE_HEADER = "date";
    exports2.GENERATED_HEADERS = [exports2.AUTH_HEADER, exports2.AMZ_DATE_HEADER, exports2.DATE_HEADER];
    exports2.SIGNATURE_HEADER = exports2.SIGNATURE_QUERY_PARAM.toLowerCase();
    exports2.SHA256_HEADER = "x-amz-content-sha256";
    exports2.TOKEN_HEADER = exports2.TOKEN_QUERY_PARAM.toLowerCase();
    exports2.HOST_HEADER = "host";
    exports2.ALWAYS_UNSIGNABLE_HEADERS = {
      authorization: true,
      "cache-control": true,
      connection: true,
      expect: true,
      from: true,
      "keep-alive": true,
      "max-forwards": true,
      pragma: true,
      referer: true,
      te: true,
      trailer: true,
      "transfer-encoding": true,
      upgrade: true,
      "user-agent": true,
      "x-amzn-trace-id": true
    };
    exports2.PROXY_HEADER_PATTERN = /^proxy-/;
    exports2.SEC_HEADER_PATTERN = /^sec-/;
    exports2.UNSIGNABLE_PATTERNS = [/^proxy-/i, /^sec-/i];
    exports2.ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
    exports2.ALGORITHM_IDENTIFIER_V4A = "AWS4-ECDSA-P256-SHA256";
    exports2.EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
    exports2.UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
    exports2.MAX_CACHE_SIZE = 50;
    exports2.KEY_TYPE_IDENTIFIER = "aws4_request";
    exports2.MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
  }
});

var require_credentialDerivation = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/signature-v4/dist-cjs/credentialDerivation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.clearCredentialCache = exports2.getSigningKey = exports2.createScope = void 0;
    var util_hex_encoding_1 = require_dist_cjs8();
    var util_utf8_1 = require_dist_cjs13();
    var constants_1 = require_constants2();
    var signingKeyCache = {};
    var cacheQueue = [];
    var createScope = (shortDate, region, service) => `${shortDate}/${region}/${service}/${constants_1.KEY_TYPE_IDENTIFIER}`;
    exports2.createScope = createScope;
    var getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {
      const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
      const cacheKey = `${shortDate}:${region}:${service}:${(0, util_hex_encoding_1.toHex)(credsHash)}:${credentials.sessionToken}`;
      if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
      }
      cacheQueue.push(cacheKey);
      while (cacheQueue.length > constants_1.MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
      }
      let key = `AWS4${credentials.secretAccessKey}`;
      for (const signable of [shortDate, region, service, constants_1.KEY_TYPE_IDENTIFIER]) {
        key = await hmac(sha256Constructor, key, signable);
      }
      return signingKeyCache[cacheKey] = key;
    };
    exports2.getSigningKey = getSigningKey;
    var clearCredentialCache = () => {
      cacheQueue.length = 0;
      Object.keys(signingKeyCache).forEach((cacheKey) => {
        delete signingKeyCache[cacheKey];
      });
    };
    exports2.clearCredentialCache = clearCredentialCache;
    var hmac = (ctor, secret, data) => {
      const hash = new ctor(secret);
      hash.update((0, util_utf8_1.toUint8Array)(data));
      return hash.digest();
    };
  }
});

var require_getCanonicalHeaders = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/signature-v4/dist-cjs/getCanonicalHeaders.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCanonicalHeaders = void 0;
    var constants_1 = require_constants2();
    var getCanonicalHeaders = ({ headers }, unsignableHeaders, signableHeaders) => {
      const canonical = {};
      for (const headerName of Object.keys(headers).sort()) {
        if (headers[headerName] == void 0) {
          continue;
        }
        const canonicalHeaderName = headerName.toLowerCase();
        if (canonicalHeaderName in constants_1.ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || constants_1.PROXY_HEADER_PATTERN.test(canonicalHeaderName) || constants_1.SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
          if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
            continue;
          }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
      }
      return canonical;
    };
    exports2.getCanonicalHeaders = getCanonicalHeaders;
  }
});

var require_escape_uri = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-uri-escape/dist-cjs/escape-uri.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.escapeUri = void 0;
    var escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
    exports2.escapeUri = escapeUri;
    var hexEncode = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;
  }
});

var require_escape_uri_path = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-uri-escape/dist-cjs/escape-uri-path.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.escapeUriPath = void 0;
    var escape_uri_1 = require_escape_uri();
    var escapeUriPath = (uri) => uri.split("/").map(escape_uri_1.escapeUri).join("/");
    exports2.escapeUriPath = escapeUriPath;
  }
});

var require_dist_cjs14 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-uri-escape/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_escape_uri(), exports2);
    tslib_1.__exportStar(require_escape_uri_path(), exports2);
  }
});

var require_getCanonicalQuery = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/signature-v4/dist-cjs/getCanonicalQuery.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCanonicalQuery = void 0;
    var util_uri_escape_1 = require_dist_cjs14();
    var constants_1 = require_constants2();
    var getCanonicalQuery = ({ query = {} }) => {
      const keys = [];
      const serialized = {};
      for (const key of Object.keys(query).sort()) {
        if (key.toLowerCase() === constants_1.SIGNATURE_HEADER) {
          continue;
        }
        keys.push(key);
        const value = query[key];
        if (typeof value === "string") {
          serialized[key] = `${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value)}`;
        } else if (Array.isArray(value)) {
          serialized[key] = value.slice(0).reduce((encoded, value2) => encoded.concat([`${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value2)}`]), []).sort().join("&");
        }
      }
      return keys.map((key) => serialized[key]).filter((serialized2) => serialized2).join("&");
    };
    exports2.getCanonicalQuery = getCanonicalQuery;
  }
});

var require_getPayloadHash = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/signature-v4/dist-cjs/getPayloadHash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getPayloadHash = void 0;
    var is_array_buffer_1 = require_dist_cjs11();
    var util_hex_encoding_1 = require_dist_cjs8();
    var util_utf8_1 = require_dist_cjs13();
    var constants_1 = require_constants2();
    var getPayloadHash = async ({ headers, body }, hashConstructor) => {
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === constants_1.SHA256_HEADER) {
          return headers[headerName];
        }
      }
      if (body == void 0) {
        return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
      } else if (typeof body === "string" || ArrayBuffer.isView(body) || (0, is_array_buffer_1.isArrayBuffer)(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update((0, util_utf8_1.toUint8Array)(body));
        return (0, util_hex_encoding_1.toHex)(await hashCtor.digest());
      }
      return constants_1.UNSIGNED_PAYLOAD;
    };
    exports2.getPayloadHash = getPayloadHash;
  }
});

var require_headerUtil = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/signature-v4/dist-cjs/headerUtil.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.deleteHeader = exports2.getHeaderValue = exports2.hasHeader = void 0;
    var hasHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    };
    exports2.hasHeader = hasHeader;
    var getHeaderValue = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return headers[headerName];
        }
      }
      return void 0;
    };
    exports2.getHeaderValue = getHeaderValue;
    var deleteHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          delete headers[headerName];
        }
      }
    };
    exports2.deleteHeader = deleteHeader;
  }
});

var require_cloneRequest = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/signature-v4/dist-cjs/cloneRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.cloneQuery = exports2.cloneRequest = void 0;
    var cloneRequest = ({ headers, query, ...rest }) => ({
      ...rest,
      headers: { ...headers },
      query: query ? (0, exports2.cloneQuery)(query) : void 0
    });
    exports2.cloneRequest = cloneRequest;
    var cloneQuery = (query) => Object.keys(query).reduce((carry, paramName) => {
      const param = query[paramName];
      return {
        ...carry,
        [paramName]: Array.isArray(param) ? [...param] : param
      };
    }, {});
    exports2.cloneQuery = cloneQuery;
  }
});

var require_moveHeadersToQuery = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/signature-v4/dist-cjs/moveHeadersToQuery.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.moveHeadersToQuery = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var moveHeadersToQuery = (request, options = {}) => {
      var _a;
      const { headers, query = {} } = typeof request.clone === "function" ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if (lname.slice(0, 6) === "x-amz-" && !((_a = options.unhoistableHeaders) === null || _a === void 0 ? void 0 : _a.has(lname))) {
          query[name] = headers[name];
          delete headers[name];
        }
      }
      return {
        ...request,
        headers,
        query
      };
    };
    exports2.moveHeadersToQuery = moveHeadersToQuery;
  }
});

var require_prepareRequest = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/signature-v4/dist-cjs/prepareRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.prepareRequest = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var constants_1 = require_constants2();
    var prepareRequest = (request) => {
      request = typeof request.clone === "function" ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const headerName of Object.keys(request.headers)) {
        if (constants_1.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
          delete request.headers[headerName];
        }
      }
      return request;
    };
    exports2.prepareRequest = prepareRequest;
  }
});

var require_utilDate = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/signature-v4/dist-cjs/utilDate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toDate = exports2.iso8601 = void 0;
    var iso8601 = (time) => (0, exports2.toDate)(time).toISOString().replace(/\.\d{3}Z$/, "Z");
    exports2.iso8601 = iso8601;
    var toDate = (time) => {
      if (typeof time === "number") {
        return new Date(time * 1e3);
      }
      if (typeof time === "string") {
        if (Number(time)) {
          return new Date(Number(time) * 1e3);
        }
        return new Date(time);
      }
      return time;
    };
    exports2.toDate = toDate;
  }
});

var require_SignatureV4 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/signature-v4/dist-cjs/SignatureV4.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SignatureV4 = void 0;
    var eventstream_codec_1 = require_dist_cjs9();
    var util_hex_encoding_1 = require_dist_cjs8();
    var util_middleware_1 = require_dist_cjs10();
    var util_utf8_1 = require_dist_cjs13();
    var constants_1 = require_constants2();
    var credentialDerivation_1 = require_credentialDerivation();
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    var getPayloadHash_1 = require_getPayloadHash();
    var headerUtil_1 = require_headerUtil();
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    var prepareRequest_1 = require_prepareRequest();
    var utilDate_1 = require_utilDate();
    var SignatureV4 = class {
      constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }) {
        this.headerMarshaller = new eventstream_codec_1.HeaderMarshaller(util_utf8_1.toUtf8, util_utf8_1.fromUtf8);
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = (0, util_middleware_1.normalizeProvider)(region);
        this.credentialProvider = (0, util_middleware_1.normalizeProvider)(credentials);
      }
      async presign(originalRequest, options = {}) {
        const { signingDate = /* @__PURE__ */ new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService } = options;
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { longDate, shortDate } = formatDate(signingDate);
        if (expiresIn > constants_1.MAX_PRESIGNED_TTL) {
          return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");
        }
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        const request = (0, moveHeadersToQuery_1.moveHeadersToQuery)((0, prepareRequest_1.prepareRequest)(originalRequest), { unhoistableHeaders });
        if (credentials.sessionToken) {
          request.query[constants_1.TOKEN_QUERY_PARAM] = credentials.sessionToken;
        }
        request.query[constants_1.ALGORITHM_QUERY_PARAM] = constants_1.ALGORITHM_IDENTIFIER;
        request.query[constants_1.CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
        request.query[constants_1.AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[constants_1.EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        request.query[constants_1.SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
        request.query[constants_1.SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await (0, getPayloadHash_1.getPayloadHash)(originalRequest, this.sha256)));
        return request;
      }
      async sign(toSign, options) {
        if (typeof toSign === "string") {
          return this.signString(toSign, options);
        } else if (toSign.headers && toSign.payload) {
          return this.signEvent(toSign, options);
        } else if (toSign.message) {
          return this.signMessage(toSign, options);
        } else {
          return this.signRequest(toSign, options);
        }
      }
      async signEvent({ headers, payload }, { signingDate = /* @__PURE__ */ new Date(), priorSignature, signingRegion, signingService }) {
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate, longDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        const hashedPayload = await (0, getPayloadHash_1.getPayloadHash)({ headers: {}, body: payload }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = (0, util_hex_encoding_1.toHex)(await hash.digest());
        const stringToSign = [
          constants_1.EVENT_ALGORITHM_IDENTIFIER,
          longDate,
          scope,
          priorSignature,
          hashedHeaders,
          hashedPayload
        ].join("\n");
        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
      }
      async signMessage(signableMessage, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService }) {
        const promise = this.signEvent({
          headers: this.headerMarshaller.format(signableMessage.message.headers),
          payload: signableMessage.message.body
        }, {
          signingDate,
          signingRegion,
          signingService,
          priorSignature: signableMessage.priorSignature
        });
        return promise.then((signature) => {
          return { message: signableMessage.message, signature };
        });
      }
      async signString(stringToSign, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate } = formatDate(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash.update((0, util_utf8_1.toUint8Array)(stringToSign));
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      async signRequest(requestToSign, { signingDate = /* @__PURE__ */ new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const request = (0, prepareRequest_1.prepareRequest)(requestToSign);
        const { longDate, shortDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        request.headers[constants_1.AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) {
          request.headers[constants_1.TOKEN_HEADER] = credentials.sessionToken;
        }
        const payloadHash = await (0, getPayloadHash_1.getPayloadHash)(request, this.sha256);
        if (!(0, headerUtil_1.hasHeader)(constants_1.SHA256_HEADER, request.headers) && this.applyChecksum) {
          request.headers[constants_1.SHA256_HEADER] = payloadHash;
        }
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));
        request.headers[constants_1.AUTH_HEADER] = `${constants_1.ALGORITHM_IDENTIFIER} Credential=${credentials.accessKeyId}/${scope}, SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;
        return request;
      }
      createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request.method}
${this.getCanonicalPath(request)}
${(0, getCanonicalQuery_1.getCanonicalQuery)(request)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
      }
      async createStringToSign(longDate, credentialScope, canonicalRequest) {
        const hash = new this.sha256();
        hash.update((0, util_utf8_1.toUint8Array)(canonicalRequest));
        const hashedRequest = await hash.digest();
        return `${constants_1.ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${(0, util_hex_encoding_1.toHex)(hashedRequest)}`;
      }
      getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
          const normalizedPathSegments = [];
          for (const pathSegment of path.split("/")) {
            if ((pathSegment === null || pathSegment === void 0 ? void 0 : pathSegment.length) === 0)
              continue;
            if (pathSegment === ".")
              continue;
            if (pathSegment === "..") {
              normalizedPathSegments.pop();
            } else {
              normalizedPathSegments.push(pathSegment);
            }
          }
          const normalizedPath = `${(path === null || path === void 0 ? void 0 : path.startsWith("/")) ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && (path === null || path === void 0 ? void 0 : path.endsWith("/")) ? "/" : ""}`;
          const doubleEncoded = encodeURIComponent(normalizedPath);
          return doubleEncoded.replace(/%2F/g, "/");
        }
        return path;
      }
      async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
        const hash = new this.sha256(await keyPromise);
        hash.update((0, util_utf8_1.toUint8Array)(stringToSign));
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      getSigningKey(credentials, region, shortDate, service) {
        return (0, credentialDerivation_1.getSigningKey)(this.sha256, credentials, shortDate, region, service || this.service);
      }
      validateResolvedCredentials(credentials) {
        if (typeof credentials !== "object" || typeof credentials.accessKeyId !== "string" || typeof credentials.secretAccessKey !== "string") {
          throw new Error("Resolved credential object is not valid");
        }
      }
    };
    exports2.SignatureV4 = SignatureV4;
    var formatDate = (now) => {
      const longDate = (0, utilDate_1.iso8601)(now).replace(/[\-:]/g, "");
      return {
        longDate,
        shortDate: longDate.slice(0, 8)
      };
    };
    var getCanonicalHeaderList = (headers) => Object.keys(headers).sort().join(";");
  }
});

var require_dist_cjs15 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/signature-v4/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.prepareRequest = exports2.moveHeadersToQuery = exports2.getPayloadHash = exports2.getCanonicalQuery = exports2.getCanonicalHeaders = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SignatureV4(), exports2);
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    Object.defineProperty(exports2, "getCanonicalHeaders", { enumerable: true, get: function() {
      return getCanonicalHeaders_1.getCanonicalHeaders;
    } });
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    Object.defineProperty(exports2, "getCanonicalQuery", { enumerable: true, get: function() {
      return getCanonicalQuery_1.getCanonicalQuery;
    } });
    var getPayloadHash_1 = require_getPayloadHash();
    Object.defineProperty(exports2, "getPayloadHash", { enumerable: true, get: function() {
      return getPayloadHash_1.getPayloadHash;
    } });
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    Object.defineProperty(exports2, "moveHeadersToQuery", { enumerable: true, get: function() {
      return moveHeadersToQuery_1.moveHeadersToQuery;
    } });
    var prepareRequest_1 = require_prepareRequest();
    Object.defineProperty(exports2, "prepareRequest", { enumerable: true, get: function() {
      return prepareRequest_1.prepareRequest;
    } });
    tslib_1.__exportStar(require_credentialDerivation(), exports2);
  }
});

var require_awsAuthConfiguration = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-signing/dist-cjs/awsAuthConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveSigV4AuthConfig = exports2.resolveAwsAuthConfig = void 0;
    var property_provider_1 = require_dist_cjs6();
    var signature_v4_1 = require_dist_cjs15();
    var util_middleware_1 = require_dist_cjs10();
    var CREDENTIAL_EXPIRE_WINDOW = 3e5;
    var resolveAwsAuthConfig = (input) => {
      const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = (0, util_middleware_1.normalizeProvider)(input.signer);
      } else if (input.regionInfoProvider) {
        signer = () => (0, util_middleware_1.normalizeProvider)(input.region)().then(async (region) => [
          await input.regionInfoProvider(region, {
            useFipsEndpoint: await input.useFipsEndpoint(),
            useDualstackEndpoint: await input.useDualstackEndpoint()
          }) || {},
          region
        ]).then(([regionInfo, region]) => {
          const { signingRegion, signingService } = regionInfo;
          input.signingRegion = input.signingRegion || signingRegion || region;
          input.signingName = input.signingName || signingService || input.serviceId;
          const params = {
            ...input,
            credentials: normalizedCreds,
            region: input.signingRegion,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = input.signerConstructor || signature_v4_1.SignatureV4;
          return new SignerCtor(params);
        });
      } else {
        signer = async (authScheme) => {
          authScheme = Object.assign({}, {
            name: "sigv4",
            signingName: input.signingName || input.defaultSigningName,
            signingRegion: await (0, util_middleware_1.normalizeProvider)(input.region)(),
            properties: {}
          }, authScheme);
          const signingRegion = authScheme.signingRegion;
          const signingService = authScheme.signingName;
          input.signingRegion = input.signingRegion || signingRegion;
          input.signingName = input.signingName || signingService || input.serviceId;
          const params = {
            ...input,
            credentials: normalizedCreds,
            region: input.signingRegion,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = input.signerConstructor || signature_v4_1.SignatureV4;
          return new SignerCtor(params);
        };
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      };
    };
    exports2.resolveAwsAuthConfig = resolveAwsAuthConfig;
    var resolveSigV4AuthConfig = (input) => {
      const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = (0, util_middleware_1.normalizeProvider)(input.signer);
      } else {
        signer = (0, util_middleware_1.normalizeProvider)(new signature_v4_1.SignatureV4({
          credentials: normalizedCreds,
          region: input.region,
          service: input.signingName,
          sha256,
          uriEscapePath: signingEscapePath
        }));
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      };
    };
    exports2.resolveSigV4AuthConfig = resolveSigV4AuthConfig;
    var normalizeCredentialProvider = (credentials) => {
      if (typeof credentials === "function") {
        return (0, property_provider_1.memoize)(credentials, (credentials2) => credentials2.expiration !== void 0 && credentials2.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, (credentials2) => credentials2.expiration !== void 0);
      }
      return (0, util_middleware_1.normalizeProvider)(credentials);
    };
  }
});

var require_getSkewCorrectedDate = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSkewCorrectedDate = void 0;
    var getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);
    exports2.getSkewCorrectedDate = getSkewCorrectedDate;
  }
});

var require_isClockSkewed = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isClockSkewed = void 0;
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var isClockSkewed = (clockTime, systemClockOffset) => Math.abs((0, getSkewCorrectedDate_1.getSkewCorrectedDate)(systemClockOffset).getTime() - clockTime) >= 3e5;
    exports2.isClockSkewed = isClockSkewed;
  }
});

var require_getUpdatedSystemClockOffset = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getUpdatedSystemClockOffset = void 0;
    var isClockSkewed_1 = require_isClockSkewed();
    var getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
      const clockTimeInMs = Date.parse(clockTime);
      if ((0, isClockSkewed_1.isClockSkewed)(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
      }
      return currentSystemClockOffset;
    };
    exports2.getUpdatedSystemClockOffset = getUpdatedSystemClockOffset;
  }
});

var require_awsAuthMiddleware = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-signing/dist-cjs/awsAuthMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSigV4AuthPlugin = exports2.getAwsAuthPlugin = exports2.awsAuthMiddlewareOptions = exports2.awsAuthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var getUpdatedSystemClockOffset_1 = require_getUpdatedSystemClockOffset();
    var awsAuthMiddleware = (options) => (next, context) => async function(args) {
      var _a, _b, _c, _d;
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const authScheme = (_c = (_b = (_a = context.endpointV2) === null || _a === void 0 ? void 0 : _a.properties) === null || _b === void 0 ? void 0 : _b.authSchemes) === null || _c === void 0 ? void 0 : _c[0];
      const multiRegionOverride = (authScheme === null || authScheme === void 0 ? void 0 : authScheme.name) === "sigv4a" ? (_d = authScheme === null || authScheme === void 0 ? void 0 : authScheme.signingRegionSet) === null || _d === void 0 ? void 0 : _d.join(",") : void 0;
      const signer = await options.signer(authScheme);
      const output = await next({
        ...args,
        request: await signer.sign(args.request, {
          signingDate: (0, getSkewCorrectedDate_1.getSkewCorrectedDate)(options.systemClockOffset),
          signingRegion: multiRegionOverride || context["signing_region"],
          signingService: context["signing_service"]
        })
      }).catch((error) => {
        var _a2;
        const serverTime = (_a2 = error.ServerTime) !== null && _a2 !== void 0 ? _a2 : getDateHeader(error.$response);
        if (serverTime) {
          options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(serverTime, options.systemClockOffset);
        }
        throw error;
      });
      const dateHeader = getDateHeader(output.response);
      if (dateHeader) {
        options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(dateHeader, options.systemClockOffset);
      }
      return output;
    };
    exports2.awsAuthMiddleware = awsAuthMiddleware;
    var getDateHeader = (response) => {
      var _a, _b, _c;
      return protocol_http_1.HttpResponse.isInstance(response) ? (_b = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.date) !== null && _b !== void 0 ? _b : (_c = response.headers) === null || _c === void 0 ? void 0 : _c.Date : void 0;
    };
    exports2.awsAuthMiddlewareOptions = {
      name: "awsAuthMiddleware",
      tags: ["SIGNATURE", "AWSAUTH"],
      relation: "after",
      toMiddleware: "retryMiddleware",
      override: true
    };
    var getAwsAuthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports2.awsAuthMiddleware)(options), exports2.awsAuthMiddlewareOptions);
      }
    });
    exports2.getAwsAuthPlugin = getAwsAuthPlugin;
    exports2.getSigV4AuthPlugin = exports2.getAwsAuthPlugin;
  }
});

var require_dist_cjs16 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_awsAuthConfiguration(), exports2);
    tslib_1.__exportStar(require_awsAuthMiddleware(), exports2);
  }
});

var require_configurations = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveUserAgentConfig = void 0;
    function resolveUserAgentConfig(input) {
      return {
        ...input,
        customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent
      };
    }
    exports2.resolveUserAgentConfig = resolveUserAgentConfig;
  }
});

var require_partitions = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partitions.json"(exports2, module2) {
    module2.exports = {
      partitions: [{
        id: "aws",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          name: "aws",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^(us|eu|ap|sa|ca|me|af|il)\\-\\w+\\-\\d+$",
        regions: {
          "af-south-1": {
            description: "Africa (Cape Town)"
          },
          "ap-east-1": {
            description: "Asia Pacific (Hong Kong)"
          },
          "ap-northeast-1": {
            description: "Asia Pacific (Tokyo)"
          },
          "ap-northeast-2": {
            description: "Asia Pacific (Seoul)"
          },
          "ap-northeast-3": {
            description: "Asia Pacific (Osaka)"
          },
          "ap-south-1": {
            description: "Asia Pacific (Mumbai)"
          },
          "ap-south-2": {
            description: "Asia Pacific (Hyderabad)"
          },
          "ap-southeast-1": {
            description: "Asia Pacific (Singapore)"
          },
          "ap-southeast-2": {
            description: "Asia Pacific (Sydney)"
          },
          "ap-southeast-3": {
            description: "Asia Pacific (Jakarta)"
          },
          "ap-southeast-4": {
            description: "Asia Pacific (Melbourne)"
          },
          "aws-global": {
            description: "AWS Standard global region"
          },
          "ca-central-1": {
            description: "Canada (Central)"
          },
          "eu-central-1": {
            description: "Europe (Frankfurt)"
          },
          "eu-central-2": {
            description: "Europe (Zurich)"
          },
          "eu-north-1": {
            description: "Europe (Stockholm)"
          },
          "eu-south-1": {
            description: "Europe (Milan)"
          },
          "eu-south-2": {
            description: "Europe (Spain)"
          },
          "eu-west-1": {
            description: "Europe (Ireland)"
          },
          "eu-west-2": {
            description: "Europe (London)"
          },
          "eu-west-3": {
            description: "Europe (Paris)"
          },
          "il-central-1": {
            description: "Israel (Tel Aviv)"
          },
          "me-central-1": {
            description: "Middle East (UAE)"
          },
          "me-south-1": {
            description: "Middle East (Bahrain)"
          },
          "sa-east-1": {
            description: "South America (Sao Paulo)"
          },
          "us-east-1": {
            description: "US East (N. Virginia)"
          },
          "us-east-2": {
            description: "US East (Ohio)"
          },
          "us-west-1": {
            description: "US West (N. California)"
          },
          "us-west-2": {
            description: "US West (Oregon)"
          }
        }
      }, {
        id: "aws-cn",
        outputs: {
          dnsSuffix: "amazonaws.com.cn",
          dualStackDnsSuffix: "api.amazonwebservices.com.cn",
          name: "aws-cn",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        regions: {
          "aws-cn-global": {
            description: "AWS China global region"
          },
          "cn-north-1": {
            description: "China (Beijing)"
          },
          "cn-northwest-1": {
            description: "China (Ningxia)"
          }
        }
      }, {
        id: "aws-us-gov",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          name: "aws-us-gov",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        regions: {
          "aws-us-gov-global": {
            description: "AWS GovCloud (US) global region"
          },
          "us-gov-east-1": {
            description: "AWS GovCloud (US-East)"
          },
          "us-gov-west-1": {
            description: "AWS GovCloud (US-West)"
          }
        }
      }, {
        id: "aws-iso",
        outputs: {
          dnsSuffix: "c2s.ic.gov",
          dualStackDnsSuffix: "c2s.ic.gov",
          name: "aws-iso",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-global": {
            description: "AWS ISO (US) global region"
          },
          "us-iso-east-1": {
            description: "US ISO East"
          },
          "us-iso-west-1": {
            description: "US ISO WEST"
          }
        }
      }, {
        id: "aws-iso-b",
        outputs: {
          dnsSuffix: "sc2s.sgov.gov",
          dualStackDnsSuffix: "sc2s.sgov.gov",
          name: "aws-iso-b",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-b-global": {
            description: "AWS ISOB (US) global region"
          },
          "us-isob-east-1": {
            description: "US ISOB East (Ohio)"
          }
        }
      }, {
        id: "aws-iso-e",
        outputs: {
          dnsSuffix: "cloud.adc-e.uk",
          dualStackDnsSuffix: "cloud.adc-e.uk",
          name: "aws-iso-e",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^eu\\-isoe\\-\\w+\\-\\d+$",
        regions: {}
      }, {
        id: "aws-iso-f",
        outputs: {
          dnsSuffix: "csp.hci.ic.gov",
          dualStackDnsSuffix: "csp.hci.ic.gov",
          name: "aws-iso-f",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isof\\-\\w+\\-\\d+$",
        regions: {}
      }],
      version: "1.1"
    };
  }
});

var require_partition = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getUserAgentPrefix = exports2.useDefaultPartitionInfo = exports2.setPartitionInfo = exports2.partition = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var partitions_json_1 = tslib_1.__importDefault(require_partitions());
    var selectedPartitionsInfo = partitions_json_1.default;
    var selectedUserAgentPrefix = "";
    var partition = (value) => {
      const { partitions } = selectedPartitionsInfo;
      for (const partition2 of partitions) {
        const { regions, outputs } = partition2;
        for (const [region, regionData] of Object.entries(regions)) {
          if (region === value) {
            return {
              ...outputs,
              ...regionData
            };
          }
        }
      }
      for (const partition2 of partitions) {
        const { regionRegex, outputs } = partition2;
        if (new RegExp(regionRegex).test(value)) {
          return {
            ...outputs
          };
        }
      }
      const DEFAULT_PARTITION = partitions.find((partition2) => partition2.id === "aws");
      if (!DEFAULT_PARTITION) {
        throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");
      }
      return {
        ...DEFAULT_PARTITION.outputs
      };
    };
    exports2.partition = partition;
    var setPartitionInfo = (partitionsInfo, userAgentPrefix = "") => {
      selectedPartitionsInfo = partitionsInfo;
      selectedUserAgentPrefix = userAgentPrefix;
    };
    exports2.setPartitionInfo = setPartitionInfo;
    var useDefaultPartitionInfo = () => {
      (0, exports2.setPartitionInfo)(partitions_json_1.default, "");
    };
    exports2.useDefaultPartitionInfo = useDefaultPartitionInfo;
    var getUserAgentPrefix = () => selectedUserAgentPrefix;
    exports2.getUserAgentPrefix = getUserAgentPrefix;
  }
});

var require_isIpAddress = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isIpAddress.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isIpAddress = void 0;
    var IP_V4_REGEX = new RegExp(`^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$`);
    var isIpAddress = (value) => IP_V4_REGEX.test(value) || value.startsWith("[") && value.endsWith("]");
    exports2.isIpAddress = isIpAddress;
  }
});

var require_debugId = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/debugId.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.debugId = void 0;
    exports2.debugId = "endpoints";
  }
});

var require_toDebugString = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/toDebugString.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toDebugString = void 0;
    function toDebugString(input) {
      if (typeof input !== "object" || input == null) {
        return input;
      }
      if ("ref" in input) {
        return `$${toDebugString(input.ref)}`;
      }
      if ("fn" in input) {
        return `${input.fn}(${(input.argv || []).map(toDebugString).join(", ")})`;
      }
      return JSON.stringify(input, null, 2);
    }
    exports2.toDebugString = toDebugString;
  }
});

var require_debug = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_debugId(), exports2);
    tslib_1.__exportStar(require_toDebugString(), exports2);
  }
});

var require_EndpointError = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EndpointError = void 0;
    var EndpointError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "EndpointError";
      }
    };
    exports2.EndpointError = EndpointError;
  }
});

var require_EndpointRuleObject2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointRuleObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_ErrorRuleObject2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/ErrorRuleObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_RuleSetObject2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/RuleSetObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_TreeRuleObject2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/TreeRuleObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_shared2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/shared.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_types2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_EndpointError(), exports2);
    tslib_1.__exportStar(require_EndpointRuleObject2(), exports2);
    tslib_1.__exportStar(require_ErrorRuleObject2(), exports2);
    tslib_1.__exportStar(require_RuleSetObject2(), exports2);
    tslib_1.__exportStar(require_TreeRuleObject2(), exports2);
    tslib_1.__exportStar(require_shared2(), exports2);
  }
});

var require_isValidHostLabel = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isValidHostLabel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isValidHostLabel = void 0;
    var VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);
    var isValidHostLabel = (value, allowSubDomains = false) => {
      if (!allowSubDomains) {
        return VALID_HOST_LABEL_REGEX.test(value);
      }
      const labels = value.split(".");
      for (const label of labels) {
        if (!(0, exports2.isValidHostLabel)(label)) {
          return false;
        }
      }
      return true;
    };
    exports2.isValidHostLabel = isValidHostLabel;
  }
});

var require_isVirtualHostableS3Bucket = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/isVirtualHostableS3Bucket.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isVirtualHostableS3Bucket = void 0;
    var isIpAddress_1 = require_isIpAddress();
    var isValidHostLabel_1 = require_isValidHostLabel();
    var isVirtualHostableS3Bucket = (value, allowSubDomains = false) => {
      if (allowSubDomains) {
        for (const label of value.split(".")) {
          if (!(0, exports2.isVirtualHostableS3Bucket)(label)) {
            return false;
          }
        }
        return true;
      }
      if (!(0, isValidHostLabel_1.isValidHostLabel)(value)) {
        return false;
      }
      if (value.length < 3 || value.length > 63) {
        return false;
      }
      if (value !== value.toLowerCase()) {
        return false;
      }
      if ((0, isIpAddress_1.isIpAddress)(value)) {
        return false;
      }
      return true;
    };
    exports2.isVirtualHostableS3Bucket = isVirtualHostableS3Bucket;
  }
});

var require_parseArn = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/parseArn.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseArn = void 0;
    var parseArn = (value) => {
      const segments = value.split(":");
      if (segments.length < 6)
        return null;
      const [arn, partition, service, region, accountId, ...resourceId] = segments;
      if (arn !== "arn" || partition === "" || service === "" || resourceId[0] === "")
        return null;
      return {
        partition,
        service,
        region,
        accountId,
        resourceId: resourceId[0].includes("/") ? resourceId[0].split("/") : resourceId
      };
    };
    exports2.parseArn = parseArn;
  }
});

var require_aws = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_isVirtualHostableS3Bucket(), exports2);
    tslib_1.__exportStar(require_parseArn(), exports2);
    tslib_1.__exportStar(require_partition(), exports2);
  }
});

var require_booleanEquals = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/booleanEquals.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.booleanEquals = void 0;
    var booleanEquals = (value1, value2) => value1 === value2;
    exports2.booleanEquals = booleanEquals;
  }
});

var require_getAttrPathList = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttrPathList.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getAttrPathList = void 0;
    var types_1 = require_types2();
    var getAttrPathList = (path) => {
      const parts = path.split(".");
      const pathList = [];
      for (const part of parts) {
        const squareBracketIndex = part.indexOf("[");
        if (squareBracketIndex !== -1) {
          if (part.indexOf("]") !== part.length - 1) {
            throw new types_1.EndpointError(`Path: '${path}' does not end with ']'`);
          }
          const arrayIndex = part.slice(squareBracketIndex + 1, -1);
          if (Number.isNaN(parseInt(arrayIndex))) {
            throw new types_1.EndpointError(`Invalid array index: '${arrayIndex}' in path: '${path}'`);
          }
          if (squareBracketIndex !== 0) {
            pathList.push(part.slice(0, squareBracketIndex));
          }
          pathList.push(arrayIndex);
        } else {
          pathList.push(part);
        }
      }
      return pathList;
    };
    exports2.getAttrPathList = getAttrPathList;
  }
});

var require_getAttr = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttr.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getAttr = void 0;
    var types_1 = require_types2();
    var getAttrPathList_1 = require_getAttrPathList();
    var getAttr = (value, path) => (0, getAttrPathList_1.getAttrPathList)(path).reduce((acc, index) => {
      if (typeof acc !== "object") {
        throw new types_1.EndpointError(`Index '${index}' in '${path}' not found in '${JSON.stringify(value)}'`);
      } else if (Array.isArray(acc)) {
        return acc[parseInt(index)];
      }
      return acc[index];
    }, value);
    exports2.getAttr = getAttr;
  }
});

var require_isSet = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isSet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isSet = void 0;
    var isSet = (value) => value != null;
    exports2.isSet = isSet;
  }
});

var require_not = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/not.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.not = void 0;
    var not = (value) => !value;
    exports2.not = not;
  }
});

var require_abort2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/abort.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_auth2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/auth.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HttpAuthLocation = void 0;
    var types_1 = require_dist_cjs();
    Object.defineProperty(exports2, "HttpAuthLocation", { enumerable: true, get: function() {
      return types_1.HttpAuthLocation;
    } });
  }
});

var require_blob_types = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/blob/blob-types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_checksum3 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/checksum.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_client2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_command2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/command.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_connection2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/connection.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_credentials = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/credentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_crypto2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/crypto.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_dns = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/dns.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HostAddressType = void 0;
    var HostAddressType;
    (function(HostAddressType2) {
      HostAddressType2["AAAA"] = "AAAA";
      HostAddressType2["A"] = "A";
    })(HostAddressType = exports2.HostAddressType || (exports2.HostAddressType = {}));
  }
});

var require_encode2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/encode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_endpoint2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/endpoint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EndpointURLScheme = void 0;
    var types_1 = require_dist_cjs();
    Object.defineProperty(exports2, "EndpointURLScheme", { enumerable: true, get: function() {
      return types_1.EndpointURLScheme;
    } });
  }
});

var require_eventStream2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/eventStream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_http2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/http.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_AnonymousIdentity = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/identity/AnonymousIdentity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_AwsCredentialIdentity = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/identity/AwsCredentialIdentity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_Identity = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/identity/Identity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_LoginIdentity = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/identity/LoginIdentity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_TokenIdentity = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/identity/TokenIdentity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_identity3 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/identity/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AnonymousIdentity(), exports2);
    tslib_1.__exportStar(require_AwsCredentialIdentity(), exports2);
    tslib_1.__exportStar(require_Identity(), exports2);
    tslib_1.__exportStar(require_LoginIdentity(), exports2);
    tslib_1.__exportStar(require_TokenIdentity(), exports2);
  }
});

var require_logger2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/logger.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_middleware2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/middleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_pagination2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/pagination.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_profile2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/profile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_request = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/request.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_response2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/response.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_retry2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/retry.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_serde2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/serde.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_shapes2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/shapes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_signature2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/signature.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_stream2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/stream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_token = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/token.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_transfer2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/transfer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RequestHandlerProtocol = void 0;
    var types_1 = require_dist_cjs();
    Object.defineProperty(exports2, "RequestHandlerProtocol", { enumerable: true, get: function() {
      return types_1.RequestHandlerProtocol;
    } });
  }
});

var require_uri2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/uri.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_util3 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_waiter2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/waiter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_dist_cjs17 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_abort2(), exports2);
    tslib_1.__exportStar(require_auth2(), exports2);
    tslib_1.__exportStar(require_blob_types(), exports2);
    tslib_1.__exportStar(require_checksum3(), exports2);
    tslib_1.__exportStar(require_client2(), exports2);
    tslib_1.__exportStar(require_command2(), exports2);
    tslib_1.__exportStar(require_connection2(), exports2);
    tslib_1.__exportStar(require_credentials(), exports2);
    tslib_1.__exportStar(require_crypto2(), exports2);
    tslib_1.__exportStar(require_dns(), exports2);
    tslib_1.__exportStar(require_encode2(), exports2);
    tslib_1.__exportStar(require_endpoint2(), exports2);
    tslib_1.__exportStar(require_eventStream2(), exports2);
    tslib_1.__exportStar(require_http2(), exports2);
    tslib_1.__exportStar(require_identity3(), exports2);
    tslib_1.__exportStar(require_logger2(), exports2);
    tslib_1.__exportStar(require_middleware2(), exports2);
    tslib_1.__exportStar(require_pagination2(), exports2);
    tslib_1.__exportStar(require_profile2(), exports2);
    tslib_1.__exportStar(require_request(), exports2);
    tslib_1.__exportStar(require_response2(), exports2);
    tslib_1.__exportStar(require_retry2(), exports2);
    tslib_1.__exportStar(require_serde2(), exports2);
    tslib_1.__exportStar(require_shapes2(), exports2);
    tslib_1.__exportStar(require_signature2(), exports2);
    tslib_1.__exportStar(require_stream2(), exports2);
    tslib_1.__exportStar(require_token(), exports2);
    tslib_1.__exportStar(require_transfer2(), exports2);
    tslib_1.__exportStar(require_uri2(), exports2);
    tslib_1.__exportStar(require_util3(), exports2);
    tslib_1.__exportStar(require_waiter2(), exports2);
  }
});

var require_parseURL = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/parseURL.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseURL = void 0;
    var types_1 = require_dist_cjs17();
    var isIpAddress_1 = require_isIpAddress();
    var DEFAULT_PORTS = {
      [types_1.EndpointURLScheme.HTTP]: 80,
      [types_1.EndpointURLScheme.HTTPS]: 443
    };
    var parseURL = (value) => {
      const whatwgURL = (() => {
        try {
          if (value instanceof URL) {
            return value;
          }
          if (typeof value === "object" && "hostname" in value) {
            const { hostname: hostname2, port, protocol: protocol2 = "", path = "", query = {} } = value;
            const url = new URL(`${protocol2}//${hostname2}${port ? `:${port}` : ""}${path}`);
            url.search = Object.entries(query).map(([k, v]) => `${k}=${v}`).join("&");
            return url;
          }
          return new URL(value);
        } catch (error) {
          return null;
        }
      })();
      if (!whatwgURL) {
        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);
        return null;
      }
      const urlString = whatwgURL.href;
      const { host, hostname, pathname, protocol, search } = whatwgURL;
      if (search) {
        return null;
      }
      const scheme = protocol.slice(0, -1);
      if (!Object.values(types_1.EndpointURLScheme).includes(scheme)) {
        return null;
      }
      const isIp = (0, isIpAddress_1.isIpAddress)(hostname);
      const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) || typeof value === "string" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`);
      const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;
      return {
        scheme,
        authority,
        path: pathname,
        normalizedPath: pathname.endsWith("/") ? pathname : `${pathname}/`,
        isIp
      };
    };
    exports2.parseURL = parseURL;
  }
});

var require_stringEquals = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/stringEquals.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.stringEquals = void 0;
    var stringEquals = (value1, value2) => value1 === value2;
    exports2.stringEquals = stringEquals;
  }
});

var require_substring = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/substring.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.substring = void 0;
    var substring = (input, start, stop, reverse) => {
      if (start >= stop || input.length < stop) {
        return null;
      }
      if (!reverse) {
        return input.substring(start, stop);
      }
      return input.substring(input.length - stop, input.length - start);
    };
    exports2.substring = substring;
  }
});

var require_uriEncode = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/uriEncode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.uriEncode = void 0;
    var uriEncode = (value) => encodeURIComponent(value).replace(/[!*'()]/g, (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`);
    exports2.uriEncode = uriEncode;
  }
});

var require_lib3 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.aws = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    exports2.aws = tslib_1.__importStar(require_aws());
    tslib_1.__exportStar(require_booleanEquals(), exports2);
    tslib_1.__exportStar(require_getAttr(), exports2);
    tslib_1.__exportStar(require_isSet(), exports2);
    tslib_1.__exportStar(require_isValidHostLabel(), exports2);
    tslib_1.__exportStar(require_not(), exports2);
    tslib_1.__exportStar(require_parseURL(), exports2);
    tslib_1.__exportStar(require_stringEquals(), exports2);
    tslib_1.__exportStar(require_substring(), exports2);
    tslib_1.__exportStar(require_uriEncode(), exports2);
  }
});

var require_evaluateTemplate = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTemplate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateTemplate = void 0;
    var lib_1 = require_lib3();
    var evaluateTemplate = (template, options) => {
      const evaluatedTemplateArr = [];
      const templateContext = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      let currentIndex = 0;
      while (currentIndex < template.length) {
        const openingBraceIndex = template.indexOf("{", currentIndex);
        if (openingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(currentIndex));
          break;
        }
        evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));
        const closingBraceIndex = template.indexOf("}", openingBraceIndex);
        if (closingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex));
          break;
        }
        if (template[openingBraceIndex + 1] === "{" && template[closingBraceIndex + 1] === "}") {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));
          currentIndex = closingBraceIndex + 2;
        }
        const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);
        if (parameterName.includes("#")) {
          const [refName, attrName] = parameterName.split("#");
          evaluatedTemplateArr.push((0, lib_1.getAttr)(templateContext[refName], attrName));
        } else {
          evaluatedTemplateArr.push(templateContext[parameterName]);
        }
        currentIndex = closingBraceIndex + 1;
      }
      return evaluatedTemplateArr.join("");
    };
    exports2.evaluateTemplate = evaluateTemplate;
  }
});

var require_getReferenceValue = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getReferenceValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getReferenceValue = void 0;
    var getReferenceValue = ({ ref }, options) => {
      const referenceRecord = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      return referenceRecord[ref];
    };
    exports2.getReferenceValue = getReferenceValue;
  }
});

var require_evaluateExpression = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateExpression.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateExpression = void 0;
    var types_1 = require_types2();
    var callFunction_1 = require_callFunction();
    var evaluateTemplate_1 = require_evaluateTemplate();
    var getReferenceValue_1 = require_getReferenceValue();
    var evaluateExpression = (obj, keyName, options) => {
      if (typeof obj === "string") {
        return (0, evaluateTemplate_1.evaluateTemplate)(obj, options);
      } else if (obj["fn"]) {
        return (0, callFunction_1.callFunction)(obj, options);
      } else if (obj["ref"]) {
        return (0, getReferenceValue_1.getReferenceValue)(obj, options);
      }
      throw new types_1.EndpointError(`'${keyName}': ${String(obj)} is not a string, function or reference.`);
    };
    exports2.evaluateExpression = evaluateExpression;
  }
});

var require_callFunction = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/callFunction.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.callFunction = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var lib = tslib_1.__importStar(require_lib3());
    var evaluateExpression_1 = require_evaluateExpression();
    var callFunction = ({ fn, argv }, options) => {
      const evaluatedArgs = argv.map((arg) => ["boolean", "number"].includes(typeof arg) ? arg : (0, evaluateExpression_1.evaluateExpression)(arg, "arg", options));
      return fn.split(".").reduce((acc, key) => acc[key], lib)(...evaluatedArgs);
    };
    exports2.callFunction = callFunction;
  }
});

var require_evaluateCondition = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateCondition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateCondition = void 0;
    var debug_1 = require_debug();
    var types_1 = require_types2();
    var callFunction_1 = require_callFunction();
    var evaluateCondition = ({ assign, ...fnArgs }, options) => {
      var _a, _b;
      if (assign && assign in options.referenceRecord) {
        throw new types_1.EndpointError(`'${assign}' is already defined in Reference Record.`);
      }
      const value = (0, callFunction_1.callFunction)(fnArgs, options);
      (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `evaluateCondition: ${(0, debug_1.toDebugString)(fnArgs)} = ${(0, debug_1.toDebugString)(value)}`);
      return {
        result: value === "" ? true : !!value,
        ...assign != null && { toAssign: { name: assign, value } }
      };
    };
    exports2.evaluateCondition = evaluateCondition;
  }
});

var require_evaluateConditions = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateConditions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateConditions = void 0;
    var debug_1 = require_debug();
    var evaluateCondition_1 = require_evaluateCondition();
    var evaluateConditions = (conditions = [], options) => {
      var _a, _b;
      const conditionsReferenceRecord = {};
      for (const condition of conditions) {
        const { result, toAssign } = (0, evaluateCondition_1.evaluateCondition)(condition, {
          ...options,
          referenceRecord: {
            ...options.referenceRecord,
            ...conditionsReferenceRecord
          }
        });
        if (!result) {
          return { result };
        }
        if (toAssign) {
          conditionsReferenceRecord[toAssign.name] = toAssign.value;
          (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `assign: ${toAssign.name} := ${(0, debug_1.toDebugString)(toAssign.value)}`);
        }
      }
      return { result: true, referenceRecord: conditionsReferenceRecord };
    };
    exports2.evaluateConditions = evaluateConditions;
  }
});

var require_getEndpointHeaders = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointHeaders.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEndpointHeaders = void 0;
    var types_1 = require_types2();
    var evaluateExpression_1 = require_evaluateExpression();
    var getEndpointHeaders = (headers, options) => Object.entries(headers).reduce((acc, [headerKey, headerVal]) => ({
      ...acc,
      [headerKey]: headerVal.map((headerValEntry) => {
        const processedExpr = (0, evaluateExpression_1.evaluateExpression)(headerValEntry, "Header value entry", options);
        if (typeof processedExpr !== "string") {
          throw new types_1.EndpointError(`Header '${headerKey}' value '${processedExpr}' is not a string`);
        }
        return processedExpr;
      })
    }), {});
    exports2.getEndpointHeaders = getEndpointHeaders;
  }
});

var require_getEndpointProperty = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEndpointProperty = void 0;
    var types_1 = require_types2();
    var evaluateTemplate_1 = require_evaluateTemplate();
    var getEndpointProperties_1 = require_getEndpointProperties();
    var getEndpointProperty = (property, options) => {
      if (Array.isArray(property)) {
        return property.map((propertyEntry) => (0, exports2.getEndpointProperty)(propertyEntry, options));
      }
      switch (typeof property) {
        case "string":
          return (0, evaluateTemplate_1.evaluateTemplate)(property, options);
        case "object":
          if (property === null) {
            throw new types_1.EndpointError(`Unexpected endpoint property: ${property}`);
          }
          return (0, getEndpointProperties_1.getEndpointProperties)(property, options);
        case "boolean":
          return property;
        default:
          throw new types_1.EndpointError(`Unexpected endpoint property type: ${typeof property}`);
      }
    };
    exports2.getEndpointProperty = getEndpointProperty;
  }
});

var require_getEndpointProperties = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEndpointProperties = void 0;
    var getEndpointProperty_1 = require_getEndpointProperty();
    var getEndpointProperties = (properties, options) => Object.entries(properties).reduce((acc, [propertyKey, propertyVal]) => ({
      ...acc,
      [propertyKey]: (0, getEndpointProperty_1.getEndpointProperty)(propertyVal, options)
    }), {});
    exports2.getEndpointProperties = getEndpointProperties;
  }
});

var require_getEndpointUrl = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointUrl.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEndpointUrl = void 0;
    var types_1 = require_types2();
    var evaluateExpression_1 = require_evaluateExpression();
    var getEndpointUrl = (endpointUrl, options) => {
      const expression = (0, evaluateExpression_1.evaluateExpression)(endpointUrl, "Endpoint URL", options);
      if (typeof expression === "string") {
        try {
          return new URL(expression);
        } catch (error) {
          console.error(`Failed to construct URL with ${expression}`, error);
          throw error;
        }
      }
      throw new types_1.EndpointError(`Endpoint URL must be a string, got ${typeof expression}`);
    };
    exports2.getEndpointUrl = getEndpointUrl;
  }
});

var require_evaluateEndpointRule = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateEndpointRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateEndpointRule = void 0;
    var debug_1 = require_debug();
    var evaluateConditions_1 = require_evaluateConditions();
    var getEndpointHeaders_1 = require_getEndpointHeaders();
    var getEndpointProperties_1 = require_getEndpointProperties();
    var getEndpointUrl_1 = require_getEndpointUrl();
    var evaluateEndpointRule = (endpointRule, options) => {
      var _a, _b;
      const { conditions, endpoint } = endpointRule;
      const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      const endpointRuleOptions = {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      };
      const { url, properties, headers } = endpoint;
      (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `Resolving endpoint from template: ${(0, debug_1.toDebugString)(endpoint)}`);
      return {
        ...headers != void 0 && {
          headers: (0, getEndpointHeaders_1.getEndpointHeaders)(headers, endpointRuleOptions)
        },
        ...properties != void 0 && {
          properties: (0, getEndpointProperties_1.getEndpointProperties)(properties, endpointRuleOptions)
        },
        url: (0, getEndpointUrl_1.getEndpointUrl)(url, endpointRuleOptions)
      };
    };
    exports2.evaluateEndpointRule = evaluateEndpointRule;
  }
});

var require_evaluateErrorRule = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateErrorRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateErrorRule = void 0;
    var types_1 = require_types2();
    var evaluateConditions_1 = require_evaluateConditions();
    var evaluateExpression_1 = require_evaluateExpression();
    var evaluateErrorRule = (errorRule, options) => {
      const { conditions, error } = errorRule;
      const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      throw new types_1.EndpointError((0, evaluateExpression_1.evaluateExpression)(error, "Error", {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      }));
    };
    exports2.evaluateErrorRule = evaluateErrorRule;
  }
});

var require_evaluateTreeRule = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTreeRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateTreeRule = void 0;
    var evaluateConditions_1 = require_evaluateConditions();
    var evaluateRules_1 = require_evaluateRules();
    var evaluateTreeRule = (treeRule, options) => {
      const { conditions, rules } = treeRule;
      const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      return (0, evaluateRules_1.evaluateRules)(rules, {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      });
    };
    exports2.evaluateTreeRule = evaluateTreeRule;
  }
});

var require_evaluateRules = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateRules.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateRules = void 0;
    var types_1 = require_types2();
    var evaluateEndpointRule_1 = require_evaluateEndpointRule();
    var evaluateErrorRule_1 = require_evaluateErrorRule();
    var evaluateTreeRule_1 = require_evaluateTreeRule();
    var evaluateRules = (rules, options) => {
      for (const rule of rules) {
        if (rule.type === "endpoint") {
          const endpointOrUndefined = (0, evaluateEndpointRule_1.evaluateEndpointRule)(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else if (rule.type === "error") {
          (0, evaluateErrorRule_1.evaluateErrorRule)(rule, options);
        } else if (rule.type === "tree") {
          const endpointOrUndefined = (0, evaluateTreeRule_1.evaluateTreeRule)(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else {
          throw new types_1.EndpointError(`Unknown endpoint rule: ${rule}`);
        }
      }
      throw new types_1.EndpointError(`Rules evaluation failed`);
    };
    exports2.evaluateRules = evaluateRules;
  }
});

var require_utils = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_evaluateRules(), exports2);
  }
});

var require_resolveEndpoint = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/resolveEndpoint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveEndpoint = void 0;
    var debug_1 = require_debug();
    var types_1 = require_types2();
    var utils_1 = require_utils();
    var resolveEndpoint = (ruleSetObject, options) => {
      var _a, _b, _c, _d, _e, _f;
      const { endpointParams, logger } = options;
      const { parameters, rules } = ruleSetObject;
      (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, `${debug_1.debugId} Initial EndpointParams: ${(0, debug_1.toDebugString)(endpointParams)}`);
      const paramsWithDefault = Object.entries(parameters).filter(([, v]) => v.default != null).map(([k, v]) => [k, v.default]);
      if (paramsWithDefault.length > 0) {
        for (const [paramKey, paramDefaultValue] of paramsWithDefault) {
          endpointParams[paramKey] = (_c = endpointParams[paramKey]) !== null && _c !== void 0 ? _c : paramDefaultValue;
        }
      }
      const requiredParams = Object.entries(parameters).filter(([, v]) => v.required).map(([k]) => k);
      for (const requiredParam of requiredParams) {
        if (endpointParams[requiredParam] == null) {
          throw new types_1.EndpointError(`Missing required parameter: '${requiredParam}'`);
        }
      }
      const endpoint = (0, utils_1.evaluateRules)(rules, { endpointParams, logger, referenceRecord: {} });
      if ((_d = options.endpointParams) === null || _d === void 0 ? void 0 : _d.Endpoint) {
        try {
          const givenEndpoint = new URL(options.endpointParams.Endpoint);
          const { protocol, port } = givenEndpoint;
          endpoint.url.protocol = protocol;
          endpoint.url.port = port;
        } catch (e) {
        }
      }
      (_f = (_e = options.logger) === null || _e === void 0 ? void 0 : _e.debug) === null || _f === void 0 ? void 0 : _f.call(_e, `${debug_1.debugId} Resolved endpoint: ${(0, debug_1.toDebugString)(endpoint)}`);
      return endpoint;
    };
    exports2.resolveEndpoint = resolveEndpoint;
  }
});

var require_dist_cjs18 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_partition(), exports2);
    tslib_1.__exportStar(require_isIpAddress(), exports2);
    tslib_1.__exportStar(require_resolveEndpoint(), exports2);
    tslib_1.__exportStar(require_types2(), exports2);
  }
});

var require_constants3 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UA_ESCAPE_CHAR = exports2.UA_VALUE_ESCAPE_REGEX = exports2.UA_NAME_ESCAPE_REGEX = exports2.UA_NAME_SEPARATOR = exports2.SPACE = exports2.X_AMZ_USER_AGENT = exports2.USER_AGENT = void 0;
    exports2.USER_AGENT = "user-agent";
    exports2.X_AMZ_USER_AGENT = "x-amz-user-agent";
    exports2.SPACE = " ";
    exports2.UA_NAME_SEPARATOR = "/";
    exports2.UA_NAME_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
    exports2.UA_VALUE_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g;
    exports2.UA_ESCAPE_CHAR = "-";
  }
});

var require_user_agent_middleware = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getUserAgentPlugin = exports2.getUserAgentMiddlewareOptions = exports2.userAgentMiddleware = void 0;
    var util_endpoints_1 = require_dist_cjs18();
    var protocol_http_1 = require_dist_cjs2();
    var constants_1 = require_constants3();
    var userAgentMiddleware = (options) => (next, context) => async (args) => {
      var _a, _b;
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request))
        return next(args);
      const { headers } = request;
      const userAgent = ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0 ? void 0 : _a.map(escapeUserAgent)) || [];
      const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
      const customUserAgent = ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0 ? void 0 : _b.map(escapeUserAgent)) || [];
      const prefix = (0, util_endpoints_1.getUserAgentPrefix)();
      const sdkUserAgentValue = (prefix ? [prefix] : []).concat([...defaultUserAgent, ...userAgent, ...customUserAgent]).join(constants_1.SPACE);
      const normalUAValue = [
        ...defaultUserAgent.filter((section) => section.startsWith("aws-sdk-")),
        ...customUserAgent
      ].join(constants_1.SPACE);
      if (options.runtime !== "browser") {
        if (normalUAValue) {
          headers[constants_1.X_AMZ_USER_AGENT] = headers[constants_1.X_AMZ_USER_AGENT] ? `${headers[constants_1.USER_AGENT]} ${normalUAValue}` : normalUAValue;
        }
        headers[constants_1.USER_AGENT] = sdkUserAgentValue;
      } else {
        headers[constants_1.X_AMZ_USER_AGENT] = sdkUserAgentValue;
      }
      return next({
        ...args,
        request
      });
    };
    exports2.userAgentMiddleware = userAgentMiddleware;
    var escapeUserAgent = (userAgentPair) => {
      var _a;
      const name = userAgentPair[0].split(constants_1.UA_NAME_SEPARATOR).map((part) => part.replace(constants_1.UA_NAME_ESCAPE_REGEX, constants_1.UA_ESCAPE_CHAR)).join(constants_1.UA_NAME_SEPARATOR);
      const version2 = (_a = userAgentPair[1]) === null || _a === void 0 ? void 0 : _a.replace(constants_1.UA_VALUE_ESCAPE_REGEX, constants_1.UA_ESCAPE_CHAR);
      const prefixSeparatorIndex = name.indexOf(constants_1.UA_NAME_SEPARATOR);
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === "api") {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version2].filter((item) => item && item.length > 0).reduce((acc, item, index) => {
        switch (index) {
          case 0:
            return item;
          case 1:
            return `${acc}/${item}`;
          default:
            return `${acc}#${item}`;
        }
      }, "");
    };
    exports2.getUserAgentMiddlewareOptions = {
      name: "getUserAgentMiddleware",
      step: "build",
      priority: "low",
      tags: ["SET_USER_AGENT", "USER_AGENT"],
      override: true
    };
    var getUserAgentPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports2.userAgentMiddleware)(config), exports2.getUserAgentMiddlewareOptions);
      }
    });
    exports2.getUserAgentPlugin = getUserAgentPlugin;
  }
});

var require_dist_cjs19 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configurations(), exports2);
    tslib_1.__exportStar(require_user_agent_middleware(), exports2);
  }
});

var require_booleanSelector = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-config-provider/dist-cjs/booleanSelector.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.booleanSelector = exports2.SelectorType = void 0;
    var SelectorType;
    (function(SelectorType2) {
      SelectorType2["ENV"] = "env";
      SelectorType2["CONFIG"] = "shared config entry";
    })(SelectorType = exports2.SelectorType || (exports2.SelectorType = {}));
    var booleanSelector = (obj, key, type) => {
      if (!(key in obj))
        return void 0;
      if (obj[key] === "true")
        return true;
      if (obj[key] === "false")
        return false;
      throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
    };
    exports2.booleanSelector = booleanSelector;
  }
});

var require_dist_cjs20 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-config-provider/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_booleanSelector(), exports2);
  }
});

var require_NodeUseDualstackEndpointConfigOptions = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = exports2.DEFAULT_USE_DUALSTACK_ENDPOINT = exports2.CONFIG_USE_DUALSTACK_ENDPOINT = exports2.ENV_USE_DUALSTACK_ENDPOINT = void 0;
    var util_config_provider_1 = require_dist_cjs20();
    exports2.ENV_USE_DUALSTACK_ENDPOINT = "AWS_USE_DUALSTACK_ENDPOINT";
    exports2.CONFIG_USE_DUALSTACK_ENDPOINT = "use_dualstack_endpoint";
    exports2.DEFAULT_USE_DUALSTACK_ENDPOINT = false;
    exports2.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, util_config_provider_1.booleanSelector)(env, exports2.ENV_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => (0, util_config_provider_1.booleanSelector)(profile, exports2.CONFIG_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

var require_NodeUseFipsEndpointConfigOptions = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = exports2.DEFAULT_USE_FIPS_ENDPOINT = exports2.CONFIG_USE_FIPS_ENDPOINT = exports2.ENV_USE_FIPS_ENDPOINT = void 0;
    var util_config_provider_1 = require_dist_cjs20();
    exports2.ENV_USE_FIPS_ENDPOINT = "AWS_USE_FIPS_ENDPOINT";
    exports2.CONFIG_USE_FIPS_ENDPOINT = "use_fips_endpoint";
    exports2.DEFAULT_USE_FIPS_ENDPOINT = false;
    exports2.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, util_config_provider_1.booleanSelector)(env, exports2.ENV_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => (0, util_config_provider_1.booleanSelector)(profile, exports2.CONFIG_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

var require_resolveCustomEndpointsConfig = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveCustomEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs10();
    var resolveCustomEndpointsConfig = (input) => {
      var _a, _b;
      const { endpoint, urlParser } = input;
      return {
        ...input,
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: (0, util_middleware_1.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint),
        isCustomEndpoint: true,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)((_b = input.useDualstackEndpoint) !== null && _b !== void 0 ? _b : false)
      };
    };
    exports2.resolveCustomEndpointsConfig = resolveCustomEndpointsConfig;
  }
});

var require_getEndpointFromRegion = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEndpointFromRegion = void 0;
    var getEndpointFromRegion = async (input) => {
      var _a;
      const { tls = true } = input;
      const region = await input.region();
      const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
      if (!dnsHostRegex.test(region)) {
        throw new Error("Invalid region in client config");
      }
      const useDualstackEndpoint = await input.useDualstackEndpoint();
      const useFipsEndpoint = await input.useFipsEndpoint();
      const { hostname } = (_a = await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint })) !== null && _a !== void 0 ? _a : {};
      if (!hostname) {
        throw new Error("Cannot resolve hostname from client config");
      }
      return input.urlParser(`${tls ? "https:" : "http:"}//${hostname}`);
    };
    exports2.getEndpointFromRegion = getEndpointFromRegion;
  }
});

var require_resolveEndpointsConfig = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs10();
    var getEndpointFromRegion_1 = require_getEndpointFromRegion();
    var resolveEndpointsConfig = (input) => {
      var _a, _b;
      const useDualstackEndpoint = (0, util_middleware_1.normalizeProvider)((_a = input.useDualstackEndpoint) !== null && _a !== void 0 ? _a : false);
      const { endpoint, useFipsEndpoint, urlParser } = input;
      return {
        ...input,
        tls: (_b = input.tls) !== null && _b !== void 0 ? _b : true,
        endpoint: endpoint ? (0, util_middleware_1.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint) : () => (0, getEndpointFromRegion_1.getEndpointFromRegion)({ ...input, useDualstackEndpoint, useFipsEndpoint }),
        isCustomEndpoint: !!endpoint,
        useDualstackEndpoint
      };
    };
    exports2.resolveEndpointsConfig = resolveEndpointsConfig;
  }
});

var require_endpointsConfig = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_NodeUseDualstackEndpointConfigOptions(), exports2);
    tslib_1.__exportStar(require_NodeUseFipsEndpointConfigOptions(), exports2);
    tslib_1.__exportStar(require_resolveCustomEndpointsConfig(), exports2);
    tslib_1.__exportStar(require_resolveEndpointsConfig(), exports2);
  }
});

var require_config2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/regionConfig/config.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODE_REGION_CONFIG_FILE_OPTIONS = exports2.NODE_REGION_CONFIG_OPTIONS = exports2.REGION_INI_NAME = exports2.REGION_ENV_NAME = void 0;
    exports2.REGION_ENV_NAME = "AWS_REGION";
    exports2.REGION_INI_NAME = "region";
    exports2.NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports2.REGION_ENV_NAME],
      configFileSelector: (profile) => profile[exports2.REGION_INI_NAME],
      default: () => {
        throw new Error("Region is missing");
      }
    };
    exports2.NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: "credentials"
    };
  }
});

var require_isFipsRegion = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/regionConfig/isFipsRegion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isFipsRegion = void 0;
    var isFipsRegion = (region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips"));
    exports2.isFipsRegion = isFipsRegion;
  }
});

var require_getRealRegion = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/regionConfig/getRealRegion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRealRegion = void 0;
    var isFipsRegion_1 = require_isFipsRegion();
    var getRealRegion = (region) => (0, isFipsRegion_1.isFipsRegion)(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region;
    exports2.getRealRegion = getRealRegion;
  }
});

var require_resolveRegionConfig = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveRegionConfig = void 0;
    var getRealRegion_1 = require_getRealRegion();
    var isFipsRegion_1 = require_isFipsRegion();
    var resolveRegionConfig = (input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error("Region is missing");
      }
      return {
        ...input,
        region: async () => {
          if (typeof region === "string") {
            return (0, getRealRegion_1.getRealRegion)(region);
          }
          const providedRegion = await region();
          return (0, getRealRegion_1.getRealRegion)(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion = typeof region === "string" ? region : await region();
          if ((0, isFipsRegion_1.isFipsRegion)(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        }
      };
    };
    exports2.resolveRegionConfig = resolveRegionConfig;
  }
});

var require_regionConfig = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/regionConfig/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_config2(), exports2);
    tslib_1.__exportStar(require_resolveRegionConfig(), exports2);
  }
});

var require_PartitionHash = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/regionInfo/PartitionHash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_RegionHash = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/regionInfo/RegionHash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_getHostnameFromVariants = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getHostnameFromVariants = void 0;
    var getHostnameFromVariants = (variants = [], { useFipsEndpoint, useDualstackEndpoint }) => {
      var _a;
      return (_a = variants.find(({ tags }) => useFipsEndpoint === tags.includes("fips") && useDualstackEndpoint === tags.includes("dualstack"))) === null || _a === void 0 ? void 0 : _a.hostname;
    };
    exports2.getHostnameFromVariants = getHostnameFromVariants;
  }
});

var require_getResolvedHostname = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getResolvedHostname = void 0;
    var getResolvedHostname = (resolvedRegion, { regionHostname, partitionHostname }) => regionHostname ? regionHostname : partitionHostname ? partitionHostname.replace("{region}", resolvedRegion) : void 0;
    exports2.getResolvedHostname = getResolvedHostname;
  }
});

var require_getResolvedPartition = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getResolvedPartition = void 0;
    var getResolvedPartition = (region, { partitionHash }) => {
      var _a;
      return (_a = Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region))) !== null && _a !== void 0 ? _a : "aws";
    };
    exports2.getResolvedPartition = getResolvedPartition;
  }
});

var require_getResolvedSigningRegion = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getResolvedSigningRegion = void 0;
    var getResolvedSigningRegion = (hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {
      if (signingRegion) {
        return signingRegion;
      } else if (useFipsEndpoint) {
        const regionRegexJs = regionRegex.replace("\\\\", "\\").replace(/^\^/g, "\\.").replace(/\$$/g, "\\.");
        const regionRegexmatchArray = hostname.match(regionRegexJs);
        if (regionRegexmatchArray) {
          return regionRegexmatchArray[0].slice(1, -1);
        }
      }
    };
    exports2.getResolvedSigningRegion = getResolvedSigningRegion;
  }
});

var require_getRegionInfo = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/regionInfo/getRegionInfo.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRegionInfo = void 0;
    var getHostnameFromVariants_1 = require_getHostnameFromVariants();
    var getResolvedHostname_1 = require_getResolvedHostname();
    var getResolvedPartition_1 = require_getResolvedPartition();
    var getResolvedSigningRegion_1 = require_getResolvedSigningRegion();
    var getRegionInfo = (region, { useFipsEndpoint = false, useDualstackEndpoint = false, signingService, regionHash, partitionHash }) => {
      var _a, _b, _c, _d, _e, _f;
      const partition = (0, getResolvedPartition_1.getResolvedPartition)(region, { partitionHash });
      const resolvedRegion = region in regionHash ? region : (_b = (_a = partitionHash[partition]) === null || _a === void 0 ? void 0 : _a.endpoint) !== null && _b !== void 0 ? _b : region;
      const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
      const regionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_c = regionHash[resolvedRegion]) === null || _c === void 0 ? void 0 : _c.variants, hostnameOptions);
      const partitionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_d = partitionHash[partition]) === null || _d === void 0 ? void 0 : _d.variants, hostnameOptions);
      const hostname = (0, getResolvedHostname_1.getResolvedHostname)(resolvedRegion, { regionHostname, partitionHostname });
      if (hostname === void 0) {
        throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);
      }
      const signingRegion = (0, getResolvedSigningRegion_1.getResolvedSigningRegion)(hostname, {
        signingRegion: (_e = regionHash[resolvedRegion]) === null || _e === void 0 ? void 0 : _e.signingRegion,
        regionRegex: partitionHash[partition].regionRegex,
        useFipsEndpoint
      });
      return {
        partition,
        signingService,
        hostname,
        ...signingRegion && { signingRegion },
        ...((_f = regionHash[resolvedRegion]) === null || _f === void 0 ? void 0 : _f.signingService) && {
          signingService: regionHash[resolvedRegion].signingService
        }
      };
    };
    exports2.getRegionInfo = getRegionInfo;
  }
});

var require_regionInfo = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/regionInfo/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_PartitionHash(), exports2);
    tslib_1.__exportStar(require_RegionHash(), exports2);
    tslib_1.__exportStar(require_getRegionInfo(), exports2);
  }
});

var require_dist_cjs21 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/config-resolver/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_endpointsConfig(), exports2);
    tslib_1.__exportStar(require_regionConfig(), exports2);
    tslib_1.__exportStar(require_regionInfo(), exports2);
  }
});

var require_dist_cjs22 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-content-length/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getContentLengthPlugin = exports2.contentLengthMiddlewareOptions = exports2.contentLengthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var CONTENT_LENGTH_HEADER = "content-length";
    function contentLengthMiddleware(bodyLengthChecker) {
      return (next) => async (args) => {
        const request = args.request;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          const { body, headers } = request;
          if (body && Object.keys(headers).map((str) => str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER) === -1) {
            try {
              const length = bodyLengthChecker(body);
              request.headers = {
                ...request.headers,
                [CONTENT_LENGTH_HEADER]: String(length)
              };
            } catch (error) {
            }
          }
        }
        return next({
          ...args,
          request
        });
      };
    }
    exports2.contentLengthMiddleware = contentLengthMiddleware;
    exports2.contentLengthMiddlewareOptions = {
      step: "build",
      tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
      name: "contentLengthMiddleware",
      override: true
    };
    var getContentLengthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), exports2.contentLengthMiddlewareOptions);
      }
    });
    exports2.getContentLengthPlugin = getContentLengthPlugin;
  }
});

var require_s3 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-endpoint/dist-cjs/service-customizations/s3.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isArnBucketName = exports2.isDnsCompatibleBucketName = exports2.S3_HOSTNAME_PATTERN = exports2.DOT_PATTERN = exports2.resolveParamsForS3 = void 0;
    var resolveParamsForS3 = async (endpointParams) => {
      const bucket = (endpointParams === null || endpointParams === void 0 ? void 0 : endpointParams.Bucket) || "";
      if (typeof endpointParams.Bucket === "string") {
        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent("#")).replace(/\?/g, encodeURIComponent("?"));
      }
      if ((0, exports2.isArnBucketName)(bucket)) {
        if (endpointParams.ForcePathStyle === true) {
          throw new Error("Path-style addressing cannot be used with ARN buckets");
        }
      } else if (!(0, exports2.isDnsCompatibleBucketName)(bucket) || bucket.indexOf(".") !== -1 && !String(endpointParams.Endpoint).startsWith("http:") || bucket.toLowerCase() !== bucket || bucket.length < 3) {
        endpointParams.ForcePathStyle = true;
      }
      if (endpointParams.DisableMultiRegionAccessPoints) {
        endpointParams.disableMultiRegionAccessPoints = true;
        endpointParams.DisableMRAP = true;
      }
      return endpointParams;
    };
    exports2.resolveParamsForS3 = resolveParamsForS3;
    var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
    var IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
    var DOTS_PATTERN = /\.\./;
    exports2.DOT_PATTERN = /\./;
    exports2.S3_HOSTNAME_PATTERN = /^(.+\.)?s3(-fips)?(\.dualstack)?[.-]([a-z0-9-]+)\./;
    var isDnsCompatibleBucketName = (bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);
    exports2.isDnsCompatibleBucketName = isDnsCompatibleBucketName;
    var isArnBucketName = (bucketName) => {
      const [arn, partition, service, region, account, typeOrId] = bucketName.split(":");
      const isArn = arn === "arn" && bucketName.split(":").length >= 6;
      const isValidArn = [arn, partition, service, account, typeOrId].filter(Boolean).length === 5;
      if (isArn && !isValidArn) {
        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
      }
      return arn === "arn" && !!partition && !!service && !!account && !!typeOrId;
    };
    exports2.isArnBucketName = isArnBucketName;
  }
});

var require_service_customizations = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-endpoint/dist-cjs/service-customizations/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_s3(), exports2);
  }
});

var require_createConfigValueProvider = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/createConfigValueProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createConfigValueProvider = void 0;
    var createConfigValueProvider = (configKey, canonicalEndpointParamKey, config) => {
      const configProvider = async () => {
        var _a;
        const configValue = (_a = config[configKey]) !== null && _a !== void 0 ? _a : config[canonicalEndpointParamKey];
        if (typeof configValue === "function") {
          return configValue();
        }
        return configValue;
      };
      if (configKey === "endpoint" || canonicalEndpointParamKey === "endpoint") {
        return async () => {
          const endpoint = await configProvider();
          if (endpoint && typeof endpoint === "object") {
            if ("url" in endpoint) {
              return endpoint.url.href;
            }
            if ("hostname" in endpoint) {
              const { protocol, hostname, port, path } = endpoint;
              return `${protocol}//${hostname}${port ? ":" + port : ""}${path}`;
            }
          }
          return endpoint;
        };
      }
      return configProvider;
    };
    exports2.createConfigValueProvider = createConfigValueProvider;
  }
});

var require_getEndpointFromInstructions = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointFromInstructions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveParams = exports2.getEndpointFromInstructions = void 0;
    var service_customizations_1 = require_service_customizations();
    var createConfigValueProvider_1 = require_createConfigValueProvider();
    var getEndpointFromInstructions = async (commandInput, instructionsSupplier, clientConfig, context) => {
      const endpointParams = await (0, exports2.resolveParams)(commandInput, instructionsSupplier, clientConfig);
      if (typeof clientConfig.endpointProvider !== "function") {
        throw new Error("config.endpointProvider is not set.");
      }
      const endpoint = clientConfig.endpointProvider(endpointParams, context);
      return endpoint;
    };
    exports2.getEndpointFromInstructions = getEndpointFromInstructions;
    var resolveParams = async (commandInput, instructionsSupplier, clientConfig) => {
      var _a;
      const endpointParams = {};
      const instructions = ((_a = instructionsSupplier === null || instructionsSupplier === void 0 ? void 0 : instructionsSupplier.getEndpointParameterInstructions) === null || _a === void 0 ? void 0 : _a.call(instructionsSupplier)) || {};
      for (const [name, instruction] of Object.entries(instructions)) {
        switch (instruction.type) {
          case "staticContextParams":
            endpointParams[name] = instruction.value;
            break;
          case "contextParams":
            endpointParams[name] = commandInput[instruction.name];
            break;
          case "clientContextParams":
          case "builtInParams":
            endpointParams[name] = await (0, createConfigValueProvider_1.createConfigValueProvider)(instruction.name, name, clientConfig)();
            break;
          default:
            throw new Error("Unrecognized endpoint parameter instruction: " + JSON.stringify(instruction));
        }
      }
      if (Object.keys(instructions).length === 0) {
        Object.assign(endpointParams, clientConfig);
      }
      if (String(clientConfig.serviceId).toLowerCase() === "s3") {
        await (0, service_customizations_1.resolveParamsForS3)(endpointParams);
      }
      return endpointParams;
    };
    exports2.resolveParams = resolveParams;
  }
});

var require_dist_cjs23 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/querystring-parser/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseQueryString = void 0;
    function parseQueryString(querystring) {
      const query = {};
      querystring = querystring.replace(/^\?/, "");
      if (querystring) {
        for (const pair of querystring.split("&")) {
          let [key, value = null] = pair.split("=");
          key = decodeURIComponent(key);
          if (value) {
            value = decodeURIComponent(value);
          }
          if (!(key in query)) {
            query[key] = value;
          } else if (Array.isArray(query[key])) {
            query[key].push(value);
          } else {
            query[key] = [query[key], value];
          }
        }
      }
      return query;
    }
    exports2.parseQueryString = parseQueryString;
  }
});

var require_dist_cjs24 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/url-parser/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseUrl = void 0;
    var querystring_parser_1 = require_dist_cjs23();
    var parseUrl = (url) => {
      if (typeof url === "string") {
        return (0, exports2.parseUrl)(new URL(url));
      }
      const { hostname, pathname, port, protocol, search } = url;
      let query;
      if (search) {
        query = (0, querystring_parser_1.parseQueryString)(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query
      };
    };
    exports2.parseUrl = parseUrl;
  }
});

var require_toEndpointV1 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/toEndpointV1.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toEndpointV1 = void 0;
    var url_parser_1 = require_dist_cjs24();
    var toEndpointV1 = (endpoint) => {
      if (typeof endpoint === "object") {
        if ("url" in endpoint) {
          return (0, url_parser_1.parseUrl)(endpoint.url);
        }
        return endpoint;
      }
      return (0, url_parser_1.parseUrl)(endpoint);
    };
    exports2.toEndpointV1 = toEndpointV1;
  }
});

var require_adaptors = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_getEndpointFromInstructions(), exports2);
    tslib_1.__exportStar(require_toEndpointV1(), exports2);
  }
});

var require_endpointMiddleware = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-endpoint/dist-cjs/endpointMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.endpointMiddleware = void 0;
    var getEndpointFromInstructions_1 = require_getEndpointFromInstructions();
    var endpointMiddleware = ({ config, instructions }) => {
      return (next, context) => async (args) => {
        var _a, _b;
        const endpoint = await (0, getEndpointFromInstructions_1.getEndpointFromInstructions)(args.input, {
          getEndpointParameterInstructions() {
            return instructions;
          }
        }, { ...config }, context);
        context.endpointV2 = endpoint;
        context.authSchemes = (_a = endpoint.properties) === null || _a === void 0 ? void 0 : _a.authSchemes;
        const authScheme = (_b = context.authSchemes) === null || _b === void 0 ? void 0 : _b[0];
        if (authScheme) {
          context["signing_region"] = authScheme.signingRegion;
          context["signing_service"] = authScheme.signingName;
        }
        return next({
          ...args
        });
      };
    };
    exports2.endpointMiddleware = endpointMiddleware;
  }
});

var require_deserializerMiddleware = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-serde/dist-cjs/deserializerMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.deserializerMiddleware = void 0;
    var deserializerMiddleware = (options, deserializer) => (next, context) => async (args) => {
      const { response } = await next(args);
      try {
        const parsed = await deserializer(response, options);
        return {
          response,
          output: parsed
        };
      } catch (error) {
        Object.defineProperty(error, "$response", {
          value: response
        });
        if (!("$metadata" in error)) {
          const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;
          error.message += "\n  " + hint;
        }
        throw error;
      }
    };
    exports2.deserializerMiddleware = deserializerMiddleware;
  }
});

var require_serializerMiddleware = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-serde/dist-cjs/serializerMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.serializerMiddleware = void 0;
    var serializerMiddleware = (options, serializer) => (next, context) => async (args) => {
      var _a;
      const endpoint = ((_a = context.endpointV2) === null || _a === void 0 ? void 0 : _a.url) && options.urlParser ? async () => options.urlParser(context.endpointV2.url) : options.endpoint;
      if (!endpoint) {
        throw new Error("No valid endpoint provider available.");
      }
      const request = await serializer(args.input, { ...options, endpoint });
      return next({
        ...args,
        request
      });
    };
    exports2.serializerMiddleware = serializerMiddleware;
  }
});

var require_serdePlugin = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-serde/dist-cjs/serdePlugin.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSerdePlugin = exports2.serializerMiddlewareOption = exports2.deserializerMiddlewareOption = void 0;
    var deserializerMiddleware_1 = require_deserializerMiddleware();
    var serializerMiddleware_1 = require_serializerMiddleware();
    exports2.deserializerMiddlewareOption = {
      name: "deserializerMiddleware",
      step: "deserialize",
      tags: ["DESERIALIZER"],
      override: true
    };
    exports2.serializerMiddlewareOption = {
      name: "serializerMiddleware",
      step: "serialize",
      tags: ["SERIALIZER"],
      override: true
    };
    function getSerdePlugin(config, serializer, deserializer) {
      return {
        applyToStack: (commandStack) => {
          commandStack.add((0, deserializerMiddleware_1.deserializerMiddleware)(config, deserializer), exports2.deserializerMiddlewareOption);
          commandStack.add((0, serializerMiddleware_1.serializerMiddleware)(config, serializer), exports2.serializerMiddlewareOption);
        }
      };
    }
    exports2.getSerdePlugin = getSerdePlugin;
  }
});

var require_dist_cjs25 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-serde/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_deserializerMiddleware(), exports2);
    tslib_1.__exportStar(require_serdePlugin(), exports2);
    tslib_1.__exportStar(require_serializerMiddleware(), exports2);
  }
});

var require_getEndpointPlugin = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-endpoint/dist-cjs/getEndpointPlugin.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEndpointPlugin = exports2.endpointMiddlewareOptions = void 0;
    var middleware_serde_1 = require_dist_cjs25();
    var endpointMiddleware_1 = require_endpointMiddleware();
    exports2.endpointMiddlewareOptions = {
      step: "serialize",
      tags: ["ENDPOINT_PARAMETERS", "ENDPOINT_V2", "ENDPOINT"],
      name: "endpointV2Middleware",
      override: true,
      relation: "before",
      toMiddleware: middleware_serde_1.serializerMiddlewareOption.name
    };
    var getEndpointPlugin = (config, instructions) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, endpointMiddleware_1.endpointMiddleware)({
          config,
          instructions
        }), exports2.endpointMiddlewareOptions);
      }
    });
    exports2.getEndpointPlugin = getEndpointPlugin;
  }
});

var require_resolveEndpointConfig = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-endpoint/dist-cjs/resolveEndpointConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveEndpointConfig = void 0;
    var util_middleware_1 = require_dist_cjs10();
    var toEndpointV1_1 = require_toEndpointV1();
    var resolveEndpointConfig = (input) => {
      var _a, _b, _c;
      const tls = (_a = input.tls) !== null && _a !== void 0 ? _a : true;
      const { endpoint } = input;
      const customEndpointProvider = endpoint != null ? async () => (0, toEndpointV1_1.toEndpointV1)(await (0, util_middleware_1.normalizeProvider)(endpoint)()) : void 0;
      const isCustomEndpoint = !!endpoint;
      return {
        ...input,
        endpoint: customEndpointProvider,
        tls,
        isCustomEndpoint,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)((_b = input.useDualstackEndpoint) !== null && _b !== void 0 ? _b : false),
        useFipsEndpoint: (0, util_middleware_1.normalizeProvider)((_c = input.useFipsEndpoint) !== null && _c !== void 0 ? _c : false)
      };
    };
    exports2.resolveEndpointConfig = resolveEndpointConfig;
  }
});

var require_types3 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-endpoint/dist-cjs/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_dist_cjs26 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-endpoint/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_adaptors(), exports2);
    tslib_1.__exportStar(require_endpointMiddleware(), exports2);
    tslib_1.__exportStar(require_getEndpointPlugin(), exports2);
    tslib_1.__exportStar(require_resolveEndpointConfig(), exports2);
    tslib_1.__exportStar(require_types3(), exports2);
  }
});

var require_config3 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-retry/dist-cjs/config.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DEFAULT_RETRY_MODE = exports2.DEFAULT_MAX_ATTEMPTS = exports2.RETRY_MODES = void 0;
    var RETRY_MODES;
    (function(RETRY_MODES2) {
      RETRY_MODES2["STANDARD"] = "standard";
      RETRY_MODES2["ADAPTIVE"] = "adaptive";
    })(RETRY_MODES = exports2.RETRY_MODES || (exports2.RETRY_MODES = {}));
    exports2.DEFAULT_MAX_ATTEMPTS = 3;
    exports2.DEFAULT_RETRY_MODE = RETRY_MODES.STANDARD;
  }
});

var require_constants4 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/service-error-classification/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODEJS_TIMEOUT_ERROR_CODES = exports2.TRANSIENT_ERROR_STATUS_CODES = exports2.TRANSIENT_ERROR_CODES = exports2.THROTTLING_ERROR_CODES = exports2.CLOCK_SKEW_ERROR_CODES = void 0;
    exports2.CLOCK_SKEW_ERROR_CODES = [
      "AuthFailure",
      "InvalidSignatureException",
      "RequestExpired",
      "RequestInTheFuture",
      "RequestTimeTooSkewed",
      "SignatureDoesNotMatch"
    ];
    exports2.THROTTLING_ERROR_CODES = [
      "BandwidthLimitExceeded",
      "EC2ThrottledException",
      "LimitExceededException",
      "PriorRequestNotComplete",
      "ProvisionedThroughputExceededException",
      "RequestLimitExceeded",
      "RequestThrottled",
      "RequestThrottledException",
      "SlowDown",
      "ThrottledException",
      "Throttling",
      "ThrottlingException",
      "TooManyRequestsException",
      "TransactionInProgressException"
    ];
    exports2.TRANSIENT_ERROR_CODES = ["TimeoutError", "RequestTimeout", "RequestTimeoutException"];
    exports2.TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
    exports2.NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "ECONNREFUSED", "EPIPE", "ETIMEDOUT"];
  }
});

var require_dist_cjs27 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/service-error-classification/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isServerError = exports2.isTransientError = exports2.isThrottlingError = exports2.isClockSkewError = exports2.isRetryableByTrait = void 0;
    var constants_1 = require_constants4();
    var isRetryableByTrait = (error) => error.$retryable !== void 0;
    exports2.isRetryableByTrait = isRetryableByTrait;
    var isClockSkewError = (error) => constants_1.CLOCK_SKEW_ERROR_CODES.includes(error.name);
    exports2.isClockSkewError = isClockSkewError;
    var isThrottlingError = (error) => {
      var _a, _b;
      return ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 || constants_1.THROTTLING_ERROR_CODES.includes(error.name) || ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true;
    };
    exports2.isThrottlingError = isThrottlingError;
    var isTransientError = (error) => {
      var _a;
      return constants_1.TRANSIENT_ERROR_CODES.includes(error.name) || constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes((error === null || error === void 0 ? void 0 : error.code) || "") || constants_1.TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0);
    };
    exports2.isTransientError = isTransientError;
    var isServerError = (error) => {
      var _a;
      if (((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) !== void 0) {
        const statusCode = error.$metadata.httpStatusCode;
        if (500 <= statusCode && statusCode <= 599 && !(0, exports2.isTransientError)(error)) {
          return true;
        }
        return false;
      }
      return false;
    };
    exports2.isServerError = isServerError;
  }
});

var require_DefaultRateLimiter = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-retry/dist-cjs/DefaultRateLimiter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DefaultRateLimiter = void 0;
    var service_error_classification_1 = require_dist_cjs27();
    var DefaultRateLimiter = class {
      constructor(options) {
        var _a, _b, _c, _d, _e;
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = (_a = options === null || options === void 0 ? void 0 : options.beta) !== null && _a !== void 0 ? _a : 0.7;
        this.minCapacity = (_b = options === null || options === void 0 ? void 0 : options.minCapacity) !== null && _b !== void 0 ? _b : 1;
        this.minFillRate = (_c = options === null || options === void 0 ? void 0 : options.minFillRate) !== null && _c !== void 0 ? _c : 0.5;
        this.scaleConstant = (_d = options === null || options === void 0 ? void 0 : options.scaleConstant) !== null && _d !== void 0 ? _d : 0.4;
        this.smooth = (_e = options === null || options === void 0 ? void 0 : options.smooth) !== null && _e !== void 0 ? _e : 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
      }
      getCurrentTimeInSeconds() {
        return Date.now() / 1e3;
      }
      async getSendToken() {
        return this.acquireTokenBucket(1);
      }
      async acquireTokenBucket(amount) {
        if (!this.enabled) {
          return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
          const delay = (amount - this.currentCapacity) / this.fillRate * 1e3;
          await new Promise((resolve) => setTimeout(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
      }
      refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
          this.lastTimestamp = timestamp;
          return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
      }
      updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if ((0, service_error_classification_1.isThrottlingError)(response)) {
          const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
          this.lastMaxRate = rateToUse;
          this.calculateTimeWindow();
          this.lastThrottleTime = this.getCurrentTimeInSeconds();
          calculatedRate = this.cubicThrottle(rateToUse);
          this.enableTokenBucket();
        } else {
          this.calculateTimeWindow();
          calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
      }
      calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
      }
      cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
      }
      cubicSuccess(timestamp) {
        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
      }
      enableTokenBucket() {
        this.enabled = true;
      }
      updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
      }
      updateMeasuredRate() {
        const t = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
          const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
          this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
          this.requestCount = 0;
          this.lastTxRateBucket = timeBucket;
        }
      }
      getPrecise(num) {
        return parseFloat(num.toFixed(8));
      }
    };
    exports2.DefaultRateLimiter = DefaultRateLimiter;
  }
});

var require_constants5 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-retry/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.REQUEST_HEADER = exports2.INVOCATION_ID_HEADER = exports2.NO_RETRY_INCREMENT = exports2.TIMEOUT_RETRY_COST = exports2.RETRY_COST = exports2.INITIAL_RETRY_TOKENS = exports2.THROTTLING_RETRY_DELAY_BASE = exports2.MAXIMUM_RETRY_DELAY = exports2.DEFAULT_RETRY_DELAY_BASE = void 0;
    exports2.DEFAULT_RETRY_DELAY_BASE = 100;
    exports2.MAXIMUM_RETRY_DELAY = 20 * 1e3;
    exports2.THROTTLING_RETRY_DELAY_BASE = 500;
    exports2.INITIAL_RETRY_TOKENS = 500;
    exports2.RETRY_COST = 5;
    exports2.TIMEOUT_RETRY_COST = 10;
    exports2.NO_RETRY_INCREMENT = 1;
    exports2.INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
    exports2.REQUEST_HEADER = "amz-sdk-request";
  }
});

var require_defaultRetryBackoffStrategy = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-retry/dist-cjs/defaultRetryBackoffStrategy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getDefaultRetryBackoffStrategy = void 0;
    var constants_1 = require_constants5();
    var getDefaultRetryBackoffStrategy = () => {
      let delayBase = constants_1.DEFAULT_RETRY_DELAY_BASE;
      const computeNextBackoffDelay = (attempts) => {
        return Math.floor(Math.min(constants_1.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
      };
      const setDelayBase = (delay) => {
        delayBase = delay;
      };
      return {
        computeNextBackoffDelay,
        setDelayBase
      };
    };
    exports2.getDefaultRetryBackoffStrategy = getDefaultRetryBackoffStrategy;
  }
});

var require_defaultRetryToken = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-retry/dist-cjs/defaultRetryToken.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createDefaultRetryToken = void 0;
    var constants_1 = require_constants5();
    var createDefaultRetryToken = ({ retryDelay, retryCount, retryCost }) => {
      const getRetryCount = () => retryCount;
      const getRetryDelay = () => Math.min(constants_1.MAXIMUM_RETRY_DELAY, retryDelay);
      const getRetryCost = () => retryCost;
      return {
        getRetryCount,
        getRetryDelay,
        getRetryCost
      };
    };
    exports2.createDefaultRetryToken = createDefaultRetryToken;
  }
});

var require_StandardRetryStrategy = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-retry/dist-cjs/StandardRetryStrategy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StandardRetryStrategy = void 0;
    var config_1 = require_config3();
    var constants_1 = require_constants5();
    var defaultRetryBackoffStrategy_1 = require_defaultRetryBackoffStrategy();
    var defaultRetryToken_1 = require_defaultRetryToken();
    var StandardRetryStrategy = class {
      constructor(maxAttempts) {
        this.maxAttempts = maxAttempts;
        this.mode = config_1.RETRY_MODES.STANDARD;
        this.capacity = constants_1.INITIAL_RETRY_TOKENS;
        this.retryBackoffStrategy = (0, defaultRetryBackoffStrategy_1.getDefaultRetryBackoffStrategy)();
        this.maxAttemptsProvider = typeof maxAttempts === "function" ? maxAttempts : async () => maxAttempts;
      }
      async acquireInitialRetryToken(retryTokenScope) {
        return (0, defaultRetryToken_1.createDefaultRetryToken)({
          retryDelay: constants_1.DEFAULT_RETRY_DELAY_BASE,
          retryCount: 0
        });
      }
      async refreshRetryTokenForRetry(token, errorInfo) {
        const maxAttempts = await this.getMaxAttempts();
        if (this.shouldRetry(token, errorInfo, maxAttempts)) {
          const errorType = errorInfo.errorType;
          this.retryBackoffStrategy.setDelayBase(errorType === "THROTTLING" ? constants_1.THROTTLING_RETRY_DELAY_BASE : constants_1.DEFAULT_RETRY_DELAY_BASE);
          const delayFromErrorType = this.retryBackoffStrategy.computeNextBackoffDelay(token.getRetryCount());
          const retryDelay = errorInfo.retryAfterHint ? Math.max(errorInfo.retryAfterHint.getTime() - Date.now() || 0, delayFromErrorType) : delayFromErrorType;
          const capacityCost = this.getCapacityCost(errorType);
          this.capacity -= capacityCost;
          return (0, defaultRetryToken_1.createDefaultRetryToken)({
            retryDelay,
            retryCount: token.getRetryCount() + 1,
            retryCost: capacityCost
          });
        }
        throw new Error("No retry token available");
      }
      recordSuccess(token) {
        var _a;
        this.capacity = Math.max(constants_1.INITIAL_RETRY_TOKENS, this.capacity + ((_a = token.getRetryCost()) !== null && _a !== void 0 ? _a : constants_1.NO_RETRY_INCREMENT));
      }
      getCapacity() {
        return this.capacity;
      }
      async getMaxAttempts() {
        try {
          return await this.maxAttemptsProvider();
        } catch (error) {
          console.warn(`Max attempts provider could not resolve. Using default of ${config_1.DEFAULT_MAX_ATTEMPTS}`);
          return config_1.DEFAULT_MAX_ATTEMPTS;
        }
      }
      shouldRetry(tokenToRenew, errorInfo, maxAttempts) {
        const attempts = tokenToRenew.getRetryCount() + 1;
        return attempts < maxAttempts && this.capacity >= this.getCapacityCost(errorInfo.errorType) && this.isRetryableError(errorInfo.errorType);
      }
      getCapacityCost(errorType) {
        return errorType === "TRANSIENT" ? constants_1.TIMEOUT_RETRY_COST : constants_1.RETRY_COST;
      }
      isRetryableError(errorType) {
        return errorType === "THROTTLING" || errorType === "TRANSIENT";
      }
    };
    exports2.StandardRetryStrategy = StandardRetryStrategy;
  }
});

var require_AdaptiveRetryStrategy = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-retry/dist-cjs/AdaptiveRetryStrategy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AdaptiveRetryStrategy = void 0;
    var config_1 = require_config3();
    var DefaultRateLimiter_1 = require_DefaultRateLimiter();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy();
    var AdaptiveRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = config_1.RETRY_MODES.ADAPTIVE;
        const { rateLimiter } = options !== null && options !== void 0 ? options : {};
        this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new DefaultRateLimiter_1.DefaultRateLimiter();
        this.standardRetryStrategy = new StandardRetryStrategy_1.StandardRetryStrategy(maxAttemptsProvider);
      }
      async acquireInitialRetryToken(retryTokenScope) {
        await this.rateLimiter.getSendToken();
        return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        this.rateLimiter.updateClientSendingRate(errorInfo);
        return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
      }
      recordSuccess(token) {
        this.rateLimiter.updateClientSendingRate({});
        this.standardRetryStrategy.recordSuccess(token);
      }
    };
    exports2.AdaptiveRetryStrategy = AdaptiveRetryStrategy;
  }
});

var require_ConfiguredRetryStrategy = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-retry/dist-cjs/ConfiguredRetryStrategy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ConfiguredRetryStrategy = void 0;
    var constants_1 = require_constants5();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy();
    var ConfiguredRetryStrategy = class extends StandardRetryStrategy_1.StandardRetryStrategy {
      constructor(maxAttempts, computeNextBackoffDelay = constants_1.DEFAULT_RETRY_DELAY_BASE) {
        super(typeof maxAttempts === "function" ? maxAttempts : async () => maxAttempts);
        if (typeof computeNextBackoffDelay === "number") {
          this.computeNextBackoffDelay = () => computeNextBackoffDelay;
        } else {
          this.computeNextBackoffDelay = computeNextBackoffDelay;
        }
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        const token = await super.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
        token.getRetryDelay = () => this.computeNextBackoffDelay(token.getRetryCount());
        return token;
      }
    };
    exports2.ConfiguredRetryStrategy = ConfiguredRetryStrategy;
  }
});

var require_types4 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-retry/dist-cjs/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_dist_cjs28 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-retry/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AdaptiveRetryStrategy(), exports2);
    tslib_1.__exportStar(require_ConfiguredRetryStrategy(), exports2);
    tslib_1.__exportStar(require_DefaultRateLimiter(), exports2);
    tslib_1.__exportStar(require_StandardRetryStrategy(), exports2);
    tslib_1.__exportStar(require_config3(), exports2);
    tslib_1.__exportStar(require_constants5(), exports2);
    tslib_1.__exportStar(require_types4(), exports2);
  }
});

var require_defaultRetryQuota = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-retry/dist-cjs/defaultRetryQuota.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getDefaultRetryQuota = void 0;
    var util_retry_1 = require_dist_cjs28();
    var getDefaultRetryQuota = (initialRetryTokens, options) => {
      var _a, _b, _c;
      const MAX_CAPACITY = initialRetryTokens;
      const noRetryIncrement = (_a = options === null || options === void 0 ? void 0 : options.noRetryIncrement) !== null && _a !== void 0 ? _a : util_retry_1.NO_RETRY_INCREMENT;
      const retryCost = (_b = options === null || options === void 0 ? void 0 : options.retryCost) !== null && _b !== void 0 ? _b : util_retry_1.RETRY_COST;
      const timeoutRetryCost = (_c = options === null || options === void 0 ? void 0 : options.timeoutRetryCost) !== null && _c !== void 0 ? _c : util_retry_1.TIMEOUT_RETRY_COST;
      let availableCapacity = initialRetryTokens;
      const getCapacityAmount = (error) => error.name === "TimeoutError" ? timeoutRetryCost : retryCost;
      const hasRetryTokens = (error) => getCapacityAmount(error) <= availableCapacity;
      const retrieveRetryTokens = (error) => {
        if (!hasRetryTokens(error)) {
          throw new Error("No retry token available");
        }
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
      };
      const releaseRetryTokens = (capacityReleaseAmount) => {
        availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      };
      return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens
      });
    };
    exports2.getDefaultRetryQuota = getDefaultRetryQuota;
  }
});

var require_delayDecider = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-retry/dist-cjs/delayDecider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultDelayDecider = void 0;
    var util_retry_1 = require_dist_cjs28();
    var defaultDelayDecider = (delayBase, attempts) => Math.floor(Math.min(util_retry_1.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
    exports2.defaultDelayDecider = defaultDelayDecider;
  }
});

var require_retryDecider = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-retry/dist-cjs/retryDecider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultRetryDecider = void 0;
    var service_error_classification_1 = require_dist_cjs27();
    var defaultRetryDecider = (error) => {
      if (!error) {
        return false;
      }
      return (0, service_error_classification_1.isRetryableByTrait)(error) || (0, service_error_classification_1.isClockSkewError)(error) || (0, service_error_classification_1.isThrottlingError)(error) || (0, service_error_classification_1.isTransientError)(error);
    };
    exports2.defaultRetryDecider = defaultRetryDecider;
  }
});

var require_util4 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-retry/dist-cjs/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.asSdkError = void 0;
    var asSdkError = (error) => {
      if (error instanceof Error)
        return error;
      if (error instanceof Object)
        return Object.assign(new Error(), error);
      if (typeof error === "string")
        return new Error(error);
      return new Error(`AWS SDK error wrapper for ${error}`);
    };
    exports2.asSdkError = asSdkError;
  }
});

var require_StandardRetryStrategy2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-retry/dist-cjs/StandardRetryStrategy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StandardRetryStrategy = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var service_error_classification_1 = require_dist_cjs27();
    var util_retry_1 = require_dist_cjs28();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var defaultRetryQuota_1 = require_defaultRetryQuota();
    var delayDecider_1 = require_delayDecider();
    var retryDecider_1 = require_retryDecider();
    var util_1 = require_util4();
    var StandardRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        var _a, _b, _c;
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = util_retry_1.RETRY_MODES.STANDARD;
        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;
        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;
        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(util_retry_1.INITIAL_RETRY_TOKENS);
      }
      shouldRetry(error, attempts, maxAttempts) {
        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
      }
      async getMaxAttempts() {
        let maxAttempts;
        try {
          maxAttempts = await this.maxAttemptsProvider();
        } catch (error) {
          maxAttempts = util_retry_1.DEFAULT_MAX_ATTEMPTS;
        }
        return maxAttempts;
      }
      async retry(next, args, options) {
        let retryTokenAmount;
        let attempts = 0;
        let totalDelay = 0;
        const maxAttempts = await this.getMaxAttempts();
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();
        }
        while (true) {
          try {
            if (protocol_http_1.HttpRequest.isInstance(request)) {
              request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            if (options === null || options === void 0 ? void 0 : options.beforeRequest) {
              await options.beforeRequest();
            }
            const { response, output } = await next(args);
            if (options === null || options === void 0 ? void 0 : options.afterRequest) {
              options.afterRequest(response);
            }
            this.retryQuota.releaseRetryTokens(retryTokenAmount);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalDelay;
            return { response, output };
          } catch (e) {
            const err = (0, util_1.asSdkError)(e);
            attempts++;
            if (this.shouldRetry(err, attempts, maxAttempts)) {
              retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
              const delayFromDecider = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? util_retry_1.THROTTLING_RETRY_DELAY_BASE : util_retry_1.DEFAULT_RETRY_DELAY_BASE, attempts);
              const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);
              const delay = Math.max(delayFromResponse || 0, delayFromDecider);
              totalDelay += delay;
              await new Promise((resolve) => setTimeout(resolve, delay));
              continue;
            }
            if (!err.$metadata) {
              err.$metadata = {};
            }
            err.$metadata.attempts = attempts;
            err.$metadata.totalRetryDelay = totalDelay;
            throw err;
          }
        }
      }
    };
    exports2.StandardRetryStrategy = StandardRetryStrategy;
    var getDelayFromRetryAfterHeader = (response) => {
      if (!protocol_http_1.HttpResponse.isInstance(response))
        return;
      const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
      if (!retryAfterHeaderName)
        return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return retryAfterSeconds * 1e3;
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate.getTime() - Date.now();
    };
  }
});

var require_AdaptiveRetryStrategy2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AdaptiveRetryStrategy = void 0;
    var util_retry_1 = require_dist_cjs28();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy2();
    var AdaptiveRetryStrategy = class extends StandardRetryStrategy_1.StandardRetryStrategy {
      constructor(maxAttemptsProvider, options) {
        const { rateLimiter, ...superOptions } = options !== null && options !== void 0 ? options : {};
        super(maxAttemptsProvider, superOptions);
        this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new util_retry_1.DefaultRateLimiter();
        this.mode = util_retry_1.RETRY_MODES.ADAPTIVE;
      }
      async retry(next, args) {
        return super.retry(next, args, {
          beforeRequest: async () => {
            return this.rateLimiter.getSendToken();
          },
          afterRequest: (response) => {
            this.rateLimiter.updateClientSendingRate(response);
          }
        });
      }
    };
    exports2.AdaptiveRetryStrategy = AdaptiveRetryStrategy;
  }
});

var require_configurations2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-retry/dist-cjs/configurations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODE_RETRY_MODE_CONFIG_OPTIONS = exports2.CONFIG_RETRY_MODE = exports2.ENV_RETRY_MODE = exports2.resolveRetryConfig = exports2.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = exports2.CONFIG_MAX_ATTEMPTS = exports2.ENV_MAX_ATTEMPTS = void 0;
    var util_middleware_1 = require_dist_cjs10();
    var util_retry_1 = require_dist_cjs28();
    exports2.ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
    exports2.CONFIG_MAX_ATTEMPTS = "max_attempts";
    exports2.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        const value = env[exports2.ENV_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Environment variable ${exports2.ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      configFileSelector: (profile) => {
        const value = profile[exports2.CONFIG_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Shared config file entry ${exports2.CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      default: util_retry_1.DEFAULT_MAX_ATTEMPTS
    };
    var resolveRetryConfig = (input) => {
      var _a;
      const { retryStrategy } = input;
      const maxAttempts = (0, util_middleware_1.normalizeProvider)((_a = input.maxAttempts) !== null && _a !== void 0 ? _a : util_retry_1.DEFAULT_MAX_ATTEMPTS);
      return {
        ...input,
        maxAttempts,
        retryStrategy: async () => {
          if (retryStrategy) {
            return retryStrategy;
          }
          const retryMode = await (0, util_middleware_1.normalizeProvider)(input.retryMode)();
          if (retryMode === util_retry_1.RETRY_MODES.ADAPTIVE) {
            return new util_retry_1.AdaptiveRetryStrategy(maxAttempts);
          }
          return new util_retry_1.StandardRetryStrategy(maxAttempts);
        }
      };
    };
    exports2.resolveRetryConfig = resolveRetryConfig;
    exports2.ENV_RETRY_MODE = "AWS_RETRY_MODE";
    exports2.CONFIG_RETRY_MODE = "retry_mode";
    exports2.NODE_RETRY_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports2.ENV_RETRY_MODE],
      configFileSelector: (profile) => profile[exports2.CONFIG_RETRY_MODE],
      default: util_retry_1.DEFAULT_RETRY_MODE
    };
  }
});

var require_omitRetryHeadersMiddleware = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getOmitRetryHeadersPlugin = exports2.omitRetryHeadersMiddlewareOptions = exports2.omitRetryHeadersMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var util_retry_1 = require_dist_cjs28();
    var omitRetryHeadersMiddleware = () => (next) => async (args) => {
      const { request } = args;
      if (protocol_http_1.HttpRequest.isInstance(request)) {
        delete request.headers[util_retry_1.INVOCATION_ID_HEADER];
        delete request.headers[util_retry_1.REQUEST_HEADER];
      }
      return next(args);
    };
    exports2.omitRetryHeadersMiddleware = omitRetryHeadersMiddleware;
    exports2.omitRetryHeadersMiddlewareOptions = {
      name: "omitRetryHeadersMiddleware",
      tags: ["RETRY", "HEADERS", "OMIT_RETRY_HEADERS"],
      relation: "before",
      toMiddleware: "awsAuthMiddleware",
      override: true
    };
    var getOmitRetryHeadersPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports2.omitRetryHeadersMiddleware)(), exports2.omitRetryHeadersMiddlewareOptions);
      }
    });
    exports2.getOmitRetryHeadersPlugin = getOmitRetryHeadersPlugin;
  }
});

var require_retryMiddleware = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-retry/dist-cjs/retryMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRetryAfterHint = exports2.getRetryPlugin = exports2.retryMiddlewareOptions = exports2.retryMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var service_error_classification_1 = require_dist_cjs27();
    var util_retry_1 = require_dist_cjs28();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var util_1 = require_util4();
    var retryMiddleware = (options) => (next, context) => async (args) => {
      let retryStrategy = await options.retryStrategy();
      const maxAttempts = await options.maxAttempts();
      if (isRetryStrategyV2(retryStrategy)) {
        retryStrategy = retryStrategy;
        let retryToken = await retryStrategy.acquireInitialRetryToken(context["partition_id"]);
        let lastError = new Error();
        let attempts = 0;
        let totalRetryDelay = 0;
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();
        }
        while (true) {
          try {
            if (protocol_http_1.HttpRequest.isInstance(request)) {
              request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            const { response, output } = await next(args);
            retryStrategy.recordSuccess(retryToken);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalRetryDelay;
            return { response, output };
          } catch (e) {
            const retryErrorInfo = getRetryErrorInfo(e);
            lastError = (0, util_1.asSdkError)(e);
            try {
              retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);
            } catch (refreshError) {
              if (!lastError.$metadata) {
                lastError.$metadata = {};
              }
              lastError.$metadata.attempts = attempts + 1;
              lastError.$metadata.totalRetryDelay = totalRetryDelay;
              throw lastError;
            }
            attempts = retryToken.getRetryCount();
            const delay = retryToken.getRetryDelay();
            totalRetryDelay += delay;
            await new Promise((resolve) => setTimeout(resolve, delay));
          }
        }
      } else {
        retryStrategy = retryStrategy;
        if (retryStrategy === null || retryStrategy === void 0 ? void 0 : retryStrategy.mode)
          context.userAgent = [...context.userAgent || [], ["cfg/retry-mode", retryStrategy.mode]];
        return retryStrategy.retry(next, args);
      }
    };
    exports2.retryMiddleware = retryMiddleware;
    var isRetryStrategyV2 = (retryStrategy) => typeof retryStrategy.acquireInitialRetryToken !== "undefined" && typeof retryStrategy.refreshRetryTokenForRetry !== "undefined" && typeof retryStrategy.recordSuccess !== "undefined";
    var getRetryErrorInfo = (error) => {
      const errorInfo = {
        errorType: getRetryErrorType(error)
      };
      const retryAfterHint = (0, exports2.getRetryAfterHint)(error.$response);
      if (retryAfterHint) {
        errorInfo.retryAfterHint = retryAfterHint;
      }
      return errorInfo;
    };
    var getRetryErrorType = (error) => {
      if ((0, service_error_classification_1.isThrottlingError)(error))
        return "THROTTLING";
      if ((0, service_error_classification_1.isTransientError)(error))
        return "TRANSIENT";
      if ((0, service_error_classification_1.isServerError)(error))
        return "SERVER_ERROR";
      return "CLIENT_ERROR";
    };
    exports2.retryMiddlewareOptions = {
      name: "retryMiddleware",
      tags: ["RETRY"],
      step: "finalizeRequest",
      priority: "high",
      override: true
    };
    var getRetryPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports2.retryMiddleware)(options), exports2.retryMiddlewareOptions);
      }
    });
    exports2.getRetryPlugin = getRetryPlugin;
    var getRetryAfterHint = (response) => {
      if (!protocol_http_1.HttpResponse.isInstance(response))
        return;
      const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
      if (!retryAfterHeaderName)
        return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return new Date(retryAfterSeconds * 1e3);
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate;
    };
    exports2.getRetryAfterHint = getRetryAfterHint;
  }
});

var require_dist_cjs29 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-retry/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AdaptiveRetryStrategy2(), exports2);
    tslib_1.__exportStar(require_StandardRetryStrategy2(), exports2);
    tslib_1.__exportStar(require_configurations2(), exports2);
    tslib_1.__exportStar(require_delayDecider(), exports2);
    tslib_1.__exportStar(require_omitRetryHeadersMiddleware(), exports2);
    tslib_1.__exportStar(require_retryDecider(), exports2);
    tslib_1.__exportStar(require_retryMiddleware(), exports2);
  }
});

var require_NoOpLogger = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/NoOpLogger.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NoOpLogger = void 0;
    var NoOpLogger = class {
      trace() {
      }
      debug() {
      }
      info() {
      }
      warn() {
      }
      error() {
      }
    };
    exports2.NoOpLogger = NoOpLogger;
  }
});

var require_MiddlewareStack = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-stack/dist-cjs/MiddlewareStack.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.constructStack = void 0;
    var constructStack = () => {
      let absoluteEntries = [];
      let relativeEntries = [];
      const entriesNameSet = /* @__PURE__ */ new Set();
      const sort = (entries) => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"]);
      const removeByName = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.name && entry.name === toRemove) {
            isRemoved = true;
            entriesNameSet.delete(toRemove);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const removeByReference = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.middleware === toRemove) {
            isRemoved = true;
            if (entry.name)
              entriesNameSet.delete(entry.name);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const cloneTo = (toStack) => {
        absoluteEntries.forEach((entry) => {
          toStack.add(entry.middleware, { ...entry });
        });
        relativeEntries.forEach((entry) => {
          toStack.addRelativeTo(entry.middleware, { ...entry });
        });
        return toStack;
      };
      const expandRelativeMiddlewareList = (from) => {
        const expandedMiddlewareList = [];
        from.before.forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        return expandedMiddlewareList;
      };
      const getMiddlewareList = (debug = false) => {
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry) => {
          if (entry.toMiddleware) {
            const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
            if (toMiddleware === void 0) {
              if (debug) {
                return;
              }
              throw new Error(`${entry.toMiddleware} is not found when adding ${entry.name || "anonymous"} middleware ${entry.relation} ${entry.toMiddleware}`);
            }
            if (entry.relation === "after") {
              toMiddleware.after.push(entry);
            }
            if (entry.relation === "before") {
              toMiddleware.before.push(entry);
            }
          }
        });
        const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expandedMiddlewareList) => {
          wholeList.push(...expandedMiddlewareList);
          return wholeList;
        }, []);
        return mainChain;
      };
      const stack = {
        add: (middleware, options = {}) => {
          const { name, override } = options;
          const entry = {
            step: "initialize",
            priority: "normal",
            middleware,
            ...options
          };
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = absoluteEntries.findIndex((entry2) => entry2.name === name);
              const toOverride = absoluteEntries[toOverrideIndex];
              if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {
                throw new Error(`"${name}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`);
              }
              absoluteEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options) => {
          const { name, override } = options;
          const entry = {
            middleware,
            ...options
          };
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = relativeEntries.findIndex((entry2) => entry2.name === name);
              const toOverride = relativeEntries[toOverrideIndex];
              if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                throw new Error(`"${name}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden by same-name middleware ${entry.relation} "${entry.toMiddleware}" middleware.`);
              }
              relativeEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          relativeEntries.push(entry);
        },
        clone: () => cloneTo((0, exports2.constructStack)()),
        use: (plugin) => {
          plugin.applyToStack(stack);
        },
        remove: (toRemove) => {
          if (typeof toRemove === "string")
            return removeByName(toRemove);
          else
            return removeByReference(toRemove);
        },
        removeByTag: (toRemove) => {
          let isRemoved = false;
          const filterCb = (entry) => {
            const { tags, name } = entry;
            if (tags && tags.includes(toRemove)) {
              if (name)
                entriesNameSet.delete(name);
              isRemoved = true;
              return false;
            }
            return true;
          };
          absoluteEntries = absoluteEntries.filter(filterCb);
          relativeEntries = relativeEntries.filter(filterCb);
          return isRemoved;
        },
        concat: (from) => {
          const cloned = cloneTo((0, exports2.constructStack)());
          cloned.use(from);
          return cloned;
        },
        applyToStack: cloneTo,
        identify: () => {
          return getMiddlewareList(true).map((mw) => {
            return mw.name + ": " + (mw.tags || []).join(",");
          });
        },
        resolve: (handler, context) => {
          for (const middleware of getMiddlewareList().map((entry) => entry.middleware).reverse()) {
            handler = middleware(handler, context);
          }
          return handler;
        }
      };
      return stack;
    };
    exports2.constructStack = constructStack;
    var stepWeights = {
      initialize: 5,
      serialize: 4,
      build: 3,
      finalizeRequest: 2,
      deserialize: 1
    };
    var priorityWeights = {
      high: 3,
      normal: 2,
      low: 1
    };
  }
});

var require_dist_cjs30 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/middleware-stack/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_MiddlewareStack(), exports2);
  }
});

var require_client3 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Client = void 0;
    var middleware_stack_1 = require_dist_cjs30();
    var Client = class {
      constructor(config) {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
        this.config = config;
      }
      send(command, optionsOrCb, cb) {
        const options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
        const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
        if (callback) {
          handler(command).then((result) => callback(null, result.output), (err) => callback(err)).catch(() => {
          });
        } else {
          return handler(command).then((result) => result.output);
        }
      }
      destroy() {
        if (this.config.requestHandler.destroy)
          this.config.requestHandler.destroy();
      }
    };
    exports2.Client = Client;
  }
});

var require_fromBase64 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-base64/dist-cjs/fromBase64.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs12();
    var BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
    var fromBase64 = (input) => {
      if (input.length * 3 % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
      }
      if (!BASE64_REGEX.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
      }
      const buffer = (0, util_buffer_from_1.fromString)(input, "base64");
      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    };
    exports2.fromBase64 = fromBase64;
  }
});

var require_toBase64 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-base64/dist-cjs/toBase64.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs12();
    var toBase64 = (input) => (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("base64");
    exports2.toBase64 = toBase64;
  }
});

var require_dist_cjs31 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-base64/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromBase64(), exports2);
    tslib_1.__exportStar(require_toBase64(), exports2);
  }
});

var require_transforms = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-stream/dist-cjs/blob/transforms.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformFromString = exports2.transformToString = void 0;
    var util_base64_1 = require_dist_cjs31();
    var util_utf8_1 = require_dist_cjs13();
    var Uint8ArrayBlobAdapter_1 = require_Uint8ArrayBlobAdapter();
    function transformToString(payload, encoding = "utf-8") {
      if (encoding === "base64") {
        return (0, util_base64_1.toBase64)(payload);
      }
      return (0, util_utf8_1.toUtf8)(payload);
    }
    exports2.transformToString = transformToString;
    function transformFromString(str, encoding) {
      if (encoding === "base64") {
        return Uint8ArrayBlobAdapter_1.Uint8ArrayBlobAdapter.mutate((0, util_base64_1.fromBase64)(str));
      }
      return Uint8ArrayBlobAdapter_1.Uint8ArrayBlobAdapter.mutate((0, util_utf8_1.fromUtf8)(str));
    }
    exports2.transformFromString = transformFromString;
  }
});

var require_Uint8ArrayBlobAdapter = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-stream/dist-cjs/blob/Uint8ArrayBlobAdapter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Uint8ArrayBlobAdapter = void 0;
    var transforms_1 = require_transforms();
    var Uint8ArrayBlobAdapter = class _Uint8ArrayBlobAdapter extends Uint8Array {
      static fromString(source, encoding = "utf-8") {
        switch (typeof source) {
          case "string":
            return (0, transforms_1.transformFromString)(source, encoding);
          default:
            throw new Error(`Unsupported conversion from ${typeof source} to Uint8ArrayBlobAdapter.`);
        }
      }
      static mutate(source) {
        Object.setPrototypeOf(source, _Uint8ArrayBlobAdapter.prototype);
        return source;
      }
      transformToString(encoding = "utf-8") {
        return (0, transforms_1.transformToString)(this, encoding);
      }
    };
    exports2.Uint8ArrayBlobAdapter = Uint8ArrayBlobAdapter;
  }
});

var require_getAwsChunkedEncodingStream = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-stream/dist-cjs/getAwsChunkedEncodingStream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getAwsChunkedEncodingStream = void 0;
    var stream_1 = require("stream");
    var getAwsChunkedEncodingStream = (readableStream, options) => {
      const { base64Encoder, bodyLengthChecker, checksumAlgorithmFn, checksumLocationName, streamHasher } = options;
      const checksumRequired = base64Encoder !== void 0 && checksumAlgorithmFn !== void 0 && checksumLocationName !== void 0 && streamHasher !== void 0;
      const digest = checksumRequired ? streamHasher(checksumAlgorithmFn, readableStream) : void 0;
      const awsChunkedEncodingStream = new stream_1.Readable({ read: () => {
      } });
      readableStream.on("data", (data) => {
        const length = bodyLengthChecker(data) || 0;
        awsChunkedEncodingStream.push(`${length.toString(16)}\r
`);
        awsChunkedEncodingStream.push(data);
        awsChunkedEncodingStream.push("\r\n");
      });
      readableStream.on("end", async () => {
        awsChunkedEncodingStream.push(`0\r
`);
        if (checksumRequired) {
          const checksum = base64Encoder(await digest);
          awsChunkedEncodingStream.push(`${checksumLocationName}:${checksum}\r
`);
          awsChunkedEncodingStream.push(`\r
`);
        }
        awsChunkedEncodingStream.push(null);
      });
      return awsChunkedEncodingStream;
    };
    exports2.getAwsChunkedEncodingStream = getAwsChunkedEncodingStream;
  }
});

var require_dist_cjs32 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/querystring-builder/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.buildQueryString = void 0;
    var util_uri_escape_1 = require_dist_cjs14();
    function buildQueryString(query) {
      const parts = [];
      for (let key of Object.keys(query).sort()) {
        const value = query[key];
        key = (0, util_uri_escape_1.escapeUri)(key);
        if (Array.isArray(value)) {
          for (let i = 0, iLen = value.length; i < iLen; i++) {
            parts.push(`${key}=${(0, util_uri_escape_1.escapeUri)(value[i])}`);
          }
        } else {
          let qsEntry = key;
          if (value || typeof value === "string") {
            qsEntry += `=${(0, util_uri_escape_1.escapeUri)(value)}`;
          }
          parts.push(qsEntry);
        }
      }
      return parts.join("&");
    }
    exports2.buildQueryString = buildQueryString;
  }
});

var require_constants6 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-http-handler/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODEJS_TIMEOUT_ERROR_CODES = void 0;
    exports2.NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
  }
});

var require_get_transformed_headers = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-http-handler/dist-cjs/get-transformed-headers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getTransformedHeaders = void 0;
    var getTransformedHeaders = (headers) => {
      const transformedHeaders = {};
      for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(",") : headerValues;
      }
      return transformedHeaders;
    };
    exports2.getTransformedHeaders = getTransformedHeaders;
  }
});

var require_set_connection_timeout = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-http-handler/dist-cjs/set-connection-timeout.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setConnectionTimeout = void 0;
    var setConnectionTimeout = (request, reject, timeoutInMs = 0) => {
      if (!timeoutInMs) {
        return;
      }
      const timeoutId = setTimeout(() => {
        request.destroy();
        reject(Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
          name: "TimeoutError"
        }));
      }, timeoutInMs);
      request.on("socket", (socket) => {
        if (socket.connecting) {
          socket.on("connect", () => {
            clearTimeout(timeoutId);
          });
        } else {
          clearTimeout(timeoutId);
        }
      });
    };
    exports2.setConnectionTimeout = setConnectionTimeout;
  }
});

var require_set_socket_keep_alive = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-http-handler/dist-cjs/set-socket-keep-alive.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setSocketKeepAlive = void 0;
    var setSocketKeepAlive = (request, { keepAlive, keepAliveMsecs }) => {
      if (keepAlive !== true) {
        return;
      }
      request.on("socket", (socket) => {
        socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);
      });
    };
    exports2.setSocketKeepAlive = setSocketKeepAlive;
  }
});

var require_set_socket_timeout = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-http-handler/dist-cjs/set-socket-timeout.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setSocketTimeout = void 0;
    var setSocketTimeout = (request, reject, timeoutInMs = 0) => {
      request.setTimeout(timeoutInMs, () => {
        request.destroy();
        reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: "TimeoutError" }));
      });
    };
    exports2.setSocketTimeout = setSocketTimeout;
  }
});

var require_write_request_body = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-http-handler/dist-cjs/write-request-body.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.writeRequestBody = void 0;
    var stream_1 = require("stream");
    var MIN_WAIT_TIME = 1e3;
    async function writeRequestBody(httpRequest, request, maxContinueTimeoutMs = MIN_WAIT_TIME) {
      var _a;
      const headers = (_a = request.headers) !== null && _a !== void 0 ? _a : {};
      const expect = headers["Expect"] || headers["expect"];
      let timeoutId = -1;
      let hasError = false;
      if (expect === "100-continue") {
        await Promise.race([
          new Promise((resolve) => {
            timeoutId = Number(setTimeout(resolve, Math.max(MIN_WAIT_TIME, maxContinueTimeoutMs)));
          }),
          new Promise((resolve) => {
            httpRequest.on("continue", () => {
              clearTimeout(timeoutId);
              resolve();
            });
            httpRequest.on("error", () => {
              hasError = true;
              clearTimeout(timeoutId);
              resolve();
            });
          })
        ]);
      }
      if (!hasError) {
        writeBody(httpRequest, request.body);
      }
    }
    exports2.writeRequestBody = writeRequestBody;
    function writeBody(httpRequest, body) {
      if (body instanceof stream_1.Readable) {
        body.pipe(httpRequest);
      } else if (body) {
        httpRequest.end(Buffer.from(body));
      } else {
        httpRequest.end();
      }
    }
  }
});

var require_node_http_handler = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-http-handler/dist-cjs/node-http-handler.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NodeHttpHandler = exports2.DEFAULT_REQUEST_TIMEOUT = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var querystring_builder_1 = require_dist_cjs32();
    var http_1 = require("http");
    var https_1 = require("https");
    var constants_1 = require_constants6();
    var get_transformed_headers_1 = require_get_transformed_headers();
    var set_connection_timeout_1 = require_set_connection_timeout();
    var set_socket_keep_alive_1 = require_set_socket_keep_alive();
    var set_socket_timeout_1 = require_set_socket_timeout();
    var write_request_body_1 = require_write_request_body();
    exports2.DEFAULT_REQUEST_TIMEOUT = 0;
    var NodeHttpHandler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: "http/1.1" };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((_options) => {
              resolve(this.resolveDefaultConfig(_options));
            }).catch(reject);
          } else {
            resolve(this.resolveDefaultConfig(options));
          }
        });
      }
      resolveDefaultConfig(options) {
        const { requestTimeout, connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
          connectionTimeout,
          requestTimeout: requestTimeout !== null && requestTimeout !== void 0 ? requestTimeout : socketTimeout,
          httpAgent: httpAgent || new http_1.Agent({ keepAlive, maxSockets }),
          httpsAgent: httpsAgent || new https_1.Agent({ keepAlive, maxSockets })
        };
      }
      destroy() {
        var _a, _b, _c, _d;
        (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.httpAgent) === null || _b === void 0 ? void 0 : _b.destroy();
        (_d = (_c = this.config) === null || _c === void 0 ? void 0 : _c.httpsAgent) === null || _d === void 0 ? void 0 : _d.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        return new Promise((_resolve, _reject) => {
          var _a, _b;
          let writeRequestBodyPromise = void 0;
          const resolve = async (arg) => {
            await writeRequestBodyPromise;
            _resolve(arg);
          };
          const reject = async (arg) => {
            await writeRequestBodyPromise;
            _reject(arg);
          };
          if (!this.config) {
            throw new Error("Node HTTP request handler config is not resolved");
          }
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
            return;
          }
          const isSSL = request.protocol === "https:";
          const queryString = (0, querystring_builder_1.buildQueryString)(request.query || {});
          let auth = void 0;
          if (request.username != null || request.password != null) {
            const username = (_a = request.username) !== null && _a !== void 0 ? _a : "";
            const password = (_b = request.password) !== null && _b !== void 0 ? _b : "";
            auth = `${username}:${password}`;
          }
          let path = request.path;
          if (queryString) {
            path += `?${queryString}`;
          }
          if (request.fragment) {
            path += `#${request.fragment}`;
          }
          const nodeHttpsOptions = {
            headers: request.headers,
            host: request.hostname,
            method: request.method,
            path,
            port: request.port,
            agent: isSSL ? this.config.httpsAgent : this.config.httpAgent,
            auth
          };
          const requestFunc = isSSL ? https_1.request : http_1.request;
          const req = requestFunc(nodeHttpsOptions, (res) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: res.statusCode || -1,
              reason: res.statusMessage,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(res.headers),
              body: res
            });
            resolve({ response: httpResponse });
          });
          req.on("error", (err) => {
            if (constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {
              reject(Object.assign(err, { name: "TimeoutError" }));
            } else {
              reject(err);
            }
          });
          (0, set_connection_timeout_1.setConnectionTimeout)(req, reject, this.config.connectionTimeout);
          (0, set_socket_timeout_1.setSocketTimeout)(req, reject, this.config.requestTimeout);
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.abort();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            };
          }
          const httpAgent = nodeHttpsOptions.agent;
          if (typeof httpAgent === "object" && "keepAlive" in httpAgent) {
            (0, set_socket_keep_alive_1.setSocketKeepAlive)(req, {
              keepAlive: httpAgent.keepAlive,
              keepAliveMsecs: httpAgent.keepAliveMsecs
            });
          }
          writeRequestBodyPromise = (0, write_request_body_1.writeRequestBody)(req, request, this.config.requestTimeout).catch(_reject);
        });
      }
    };
    exports2.NodeHttpHandler = NodeHttpHandler;
  }
});

var require_node_http2_connection_pool = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-http-handler/dist-cjs/node-http2-connection-pool.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NodeHttp2ConnectionPool = void 0;
    var NodeHttp2ConnectionPool = class {
      constructor(sessions) {
        this.sessions = [];
        this.sessions = sessions !== null && sessions !== void 0 ? sessions : [];
      }
      poll() {
        if (this.sessions.length > 0) {
          return this.sessions.shift();
        }
      }
      offerLast(session) {
        this.sessions.push(session);
      }
      contains(session) {
        return this.sessions.includes(session);
      }
      remove(session) {
        this.sessions = this.sessions.filter((s) => s !== session);
      }
      [Symbol.iterator]() {
        return this.sessions[Symbol.iterator]();
      }
      destroy(connection) {
        for (const session of this.sessions) {
          if (session === connection) {
            if (!session.destroyed) {
              session.destroy();
            }
          }
        }
      }
    };
    exports2.NodeHttp2ConnectionPool = NodeHttp2ConnectionPool;
  }
});

var require_node_http2_connection_manager = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-http-handler/dist-cjs/node-http2-connection-manager.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NodeHttp2ConnectionManager = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var http2_1 = tslib_1.__importDefault(require("http2"));
    var node_http2_connection_pool_1 = require_node_http2_connection_pool();
    var NodeHttp2ConnectionManager = class {
      constructor(config) {
        this.sessionCache = /* @__PURE__ */ new Map();
        this.config = config;
        if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) {
          throw new RangeError("maxConcurrency must be greater than zero.");
        }
      }
      lease(requestContext, connectionConfiguration) {
        const url = this.getUrlString(requestContext);
        const existingPool = this.sessionCache.get(url);
        if (existingPool) {
          const existingSession = existingPool.poll();
          if (existingSession && !this.config.disableConcurrency) {
            return existingSession;
          }
        }
        const session = http2_1.default.connect(url);
        if (this.config.maxConcurrency) {
          session.settings({ maxConcurrentStreams: this.config.maxConcurrency }, (err) => {
            if (err) {
              throw new Error("Fail to set maxConcurrentStreams to " + this.config.maxConcurrency + "when creating new session for " + requestContext.destination.toString());
            }
          });
        }
        session.unref();
        const destroySessionCb = () => {
          session.destroy();
          this.deleteSession(url, session);
        };
        session.on("goaway", destroySessionCb);
        session.on("error", destroySessionCb);
        session.on("frameError", destroySessionCb);
        session.on("close", () => this.deleteSession(url, session));
        if (connectionConfiguration.requestTimeout) {
          session.setTimeout(connectionConfiguration.requestTimeout, destroySessionCb);
        }
        const connectionPool = this.sessionCache.get(url) || new node_http2_connection_pool_1.NodeHttp2ConnectionPool();
        connectionPool.offerLast(session);
        this.sessionCache.set(url, connectionPool);
        return session;
      }
      deleteSession(authority, session) {
        const existingConnectionPool = this.sessionCache.get(authority);
        if (!existingConnectionPool) {
          return;
        }
        if (!existingConnectionPool.contains(session)) {
          return;
        }
        existingConnectionPool.remove(session);
        this.sessionCache.set(authority, existingConnectionPool);
      }
      release(requestContext, session) {
        var _a;
        const cacheKey = this.getUrlString(requestContext);
        (_a = this.sessionCache.get(cacheKey)) === null || _a === void 0 ? void 0 : _a.offerLast(session);
      }
      destroy() {
        for (const [key, connectionPool] of this.sessionCache) {
          for (const session of connectionPool) {
            if (!session.destroyed) {
              session.destroy();
            }
            connectionPool.remove(session);
          }
          this.sessionCache.delete(key);
        }
      }
      setMaxConcurrentStreams(maxConcurrentStreams) {
        if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) {
          throw new RangeError("maxConcurrentStreams must be greater than zero.");
        }
        this.config.maxConcurrency = maxConcurrentStreams;
      }
      setDisableConcurrentStreams(disableConcurrentStreams) {
        this.config.disableConcurrency = disableConcurrentStreams;
      }
      getUrlString(request) {
        return request.destination.toString();
      }
    };
    exports2.NodeHttp2ConnectionManager = NodeHttp2ConnectionManager;
  }
});

var require_node_http2_handler = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-http-handler/dist-cjs/node-http2-handler.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NodeHttp2Handler = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var querystring_builder_1 = require_dist_cjs32();
    var http2_1 = require("http2");
    var get_transformed_headers_1 = require_get_transformed_headers();
    var node_http2_connection_manager_1 = require_node_http2_connection_manager();
    var write_request_body_1 = require_write_request_body();
    var NodeHttp2Handler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: "h2" };
        this.connectionManager = new node_http2_connection_manager_1.NodeHttp2ConnectionManager({});
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((opts) => {
              resolve(opts || {});
            }).catch(reject);
          } else {
            resolve(options || {});
          }
        });
      }
      destroy() {
        this.connectionManager.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
          this.connectionManager.setDisableConcurrentStreams(this.config.disableConcurrentStreams || false);
          if (this.config.maxConcurrentStreams) {
            this.connectionManager.setMaxConcurrentStreams(this.config.maxConcurrentStreams);
          }
        }
        const { requestTimeout, disableConcurrentStreams } = this.config;
        return new Promise((_resolve, _reject) => {
          var _a, _b, _c;
          let fulfilled = false;
          let writeRequestBodyPromise = void 0;
          const resolve = async (arg) => {
            await writeRequestBodyPromise;
            _resolve(arg);
          };
          const reject = async (arg) => {
            await writeRequestBodyPromise;
            _reject(arg);
          };
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            fulfilled = true;
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
            return;
          }
          const { hostname, method, port, protocol, query } = request;
          let auth = "";
          if (request.username != null || request.password != null) {
            const username = (_a = request.username) !== null && _a !== void 0 ? _a : "";
            const password = (_b = request.password) !== null && _b !== void 0 ? _b : "";
            auth = `${username}:${password}@`;
          }
          const authority = `${protocol}//${auth}${hostname}${port ? `:${port}` : ""}`;
          const requestContext = { destination: new URL(authority) };
          const session = this.connectionManager.lease(requestContext, {
            requestTimeout: (_c = this.config) === null || _c === void 0 ? void 0 : _c.sessionTimeout,
            disableConcurrentStreams: disableConcurrentStreams || false
          });
          const rejectWithDestroy = (err) => {
            if (disableConcurrentStreams) {
              this.destroySession(session);
            }
            fulfilled = true;
            reject(err);
          };
          const queryString = (0, querystring_builder_1.buildQueryString)(query || {});
          let path = request.path;
          if (queryString) {
            path += `?${queryString}`;
          }
          if (request.fragment) {
            path += `#${request.fragment}`;
          }
          const req = session.request({
            ...request.headers,
            [http2_1.constants.HTTP2_HEADER_PATH]: path,
            [http2_1.constants.HTTP2_HEADER_METHOD]: method
          });
          session.ref();
          req.on("response", (headers) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: headers[":status"] || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(headers),
              body: req
            });
            fulfilled = true;
            resolve({ response: httpResponse });
            if (disableConcurrentStreams) {
              session.close();
              this.connectionManager.deleteSession(authority, session);
            }
          });
          if (requestTimeout) {
            req.setTimeout(requestTimeout, () => {
              req.close();
              const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);
              timeoutError.name = "TimeoutError";
              rejectWithDestroy(timeoutError);
            });
          }
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.close();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              rejectWithDestroy(abortError);
            };
          }
          req.on("frameError", (type, code, id) => {
            rejectWithDestroy(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));
          });
          req.on("error", rejectWithDestroy);
          req.on("aborted", () => {
            rejectWithDestroy(new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`));
          });
          req.on("close", () => {
            session.unref();
            if (disableConcurrentStreams) {
              session.destroy();
            }
            if (!fulfilled) {
              rejectWithDestroy(new Error("Unexpected error: http2 request did not get a response"));
            }
          });
          writeRequestBodyPromise = (0, write_request_body_1.writeRequestBody)(req, request, requestTimeout);
        });
      }
      destroySession(session) {
        if (!session.destroyed) {
          session.destroy();
        }
      }
    };
    exports2.NodeHttp2Handler = NodeHttp2Handler;
  }
});

var require_collector = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-http-handler/dist-cjs/stream-collector/collector.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Collector = void 0;
    var stream_1 = require("stream");
    var Collector = class extends stream_1.Writable {
      constructor() {
        super(...arguments);
        this.bufferedBytes = [];
      }
      _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
      }
    };
    exports2.Collector = Collector;
  }
});

var require_stream_collector = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-http-handler/dist-cjs/stream-collector/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.streamCollector = void 0;
    var collector_1 = require_collector();
    var streamCollector = (stream) => new Promise((resolve, reject) => {
      const collector = new collector_1.Collector();
      stream.pipe(collector);
      stream.on("error", (err) => {
        collector.end();
        reject(err);
      });
      collector.on("error", reject);
      collector.on("finish", function() {
        const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
        resolve(bytes);
      });
    });
    exports2.streamCollector = streamCollector;
  }
});

var require_dist_cjs33 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-http-handler/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_node_http_handler(), exports2);
    tslib_1.__exportStar(require_node_http2_handler(), exports2);
    tslib_1.__exportStar(require_stream_collector(), exports2);
  }
});

var require_sdk_stream_mixin = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sdkStreamMixin = void 0;
    var node_http_handler_1 = require_dist_cjs33();
    var util_buffer_from_1 = require_dist_cjs12();
    var stream_1 = require("stream");
    var util_1 = require("util");
    var ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
    var sdkStreamMixin = (stream) => {
      var _a, _b;
      if (!(stream instanceof stream_1.Readable)) {
        const name = ((_b = (_a = stream === null || stream === void 0 ? void 0 : stream.__proto__) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) || stream;
        throw new Error(`Unexpected stream implementation, expect Stream.Readable instance, got ${name}`);
      }
      let transformed = false;
      const transformToByteArray = async () => {
        if (transformed) {
          throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
        }
        transformed = true;
        return await (0, node_http_handler_1.streamCollector)(stream);
      };
      return Object.assign(stream, {
        transformToByteArray,
        transformToString: async (encoding) => {
          const buf = await transformToByteArray();
          if (encoding === void 0 || Buffer.isEncoding(encoding)) {
            return (0, util_buffer_from_1.fromArrayBuffer)(buf.buffer, buf.byteOffset, buf.byteLength).toString(encoding);
          } else {
            const decoder = new util_1.TextDecoder(encoding);
            return decoder.decode(buf);
          }
        },
        transformToWebStream: () => {
          if (transformed) {
            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
          }
          if (stream.readableFlowing !== null) {
            throw new Error("The stream has been consumed by other callbacks.");
          }
          if (typeof stream_1.Readable.toWeb !== "function") {
            throw new Error("Readable.toWeb() is not supported. Please make sure you are using Node.js >= 17.0.0, or polyfill is available.");
          }
          transformed = true;
          return stream_1.Readable.toWeb(stream);
        }
      });
    };
    exports2.sdkStreamMixin = sdkStreamMixin;
  }
});

var require_dist_cjs34 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-stream/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Uint8ArrayBlobAdapter(), exports2);
    tslib_1.__exportStar(require_getAwsChunkedEncodingStream(), exports2);
    tslib_1.__exportStar(require_sdk_stream_mixin(), exports2);
  }
});

var require_collect_stream_body = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/collect-stream-body.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.collectBody = void 0;
    var util_stream_1 = require_dist_cjs34();
    var collectBody = async (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return util_stream_1.Uint8ArrayBlobAdapter.mutate(streamBody);
      }
      if (!streamBody) {
        return util_stream_1.Uint8ArrayBlobAdapter.mutate(new Uint8Array());
      }
      const fromContext = context.streamCollector(streamBody);
      return util_stream_1.Uint8ArrayBlobAdapter.mutate(await fromContext);
    };
    exports2.collectBody = collectBody;
  }
});

var require_command3 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/command.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Command = void 0;
    var middleware_stack_1 = require_dist_cjs30();
    var Command = class {
      constructor() {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
      }
    };
    exports2.Command = Command;
  }
});

var require_constants7 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SENSITIVE_STRING = void 0;
    exports2.SENSITIVE_STRING = "***SensitiveInformation***";
  }
});

var require_create_aggregated_client = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/create-aggregated-client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createAggregatedClient = void 0;
    var createAggregatedClient = (commands, Client) => {
      for (const command of Object.keys(commands)) {
        const CommandCtor = commands[command];
        const methodImpl = async function(args, optionsOrCb, cb) {
          const command2 = new CommandCtor(args);
          if (typeof optionsOrCb === "function") {
            this.send(command2, optionsOrCb);
          } else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
              throw new Error(`Expected http options but got ${typeof optionsOrCb}`);
            this.send(command2, optionsOrCb || {}, cb);
          } else {
            return this.send(command2, optionsOrCb);
          }
        };
        const methodName = (command[0].toLowerCase() + command.slice(1)).replace(/Command$/, "");
        Client.prototype[methodName] = methodImpl;
      }
    };
    exports2.createAggregatedClient = createAggregatedClient;
  }
});

var require_parse_utils = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/parse-utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.logger = exports2.strictParseByte = exports2.strictParseShort = exports2.strictParseInt32 = exports2.strictParseInt = exports2.strictParseLong = exports2.limitedParseFloat32 = exports2.limitedParseFloat = exports2.handleFloat = exports2.limitedParseDouble = exports2.strictParseFloat32 = exports2.strictParseFloat = exports2.strictParseDouble = exports2.expectUnion = exports2.expectString = exports2.expectObject = exports2.expectNonNull = exports2.expectByte = exports2.expectShort = exports2.expectInt32 = exports2.expectInt = exports2.expectLong = exports2.expectFloat32 = exports2.expectNumber = exports2.expectBoolean = exports2.parseBoolean = void 0;
    var parseBoolean = (value) => {
      switch (value) {
        case "true":
          return true;
        case "false":
          return false;
        default:
          throw new Error(`Unable to parse boolean value "${value}"`);
      }
    };
    exports2.parseBoolean = parseBoolean;
    var expectBoolean = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "number") {
        if (value === 0 || value === 1) {
          exports2.logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (value === 0) {
          return false;
        }
        if (value === 1) {
          return true;
        }
      }
      if (typeof value === "string") {
        const lower = value.toLowerCase();
        if (lower === "false" || lower === "true") {
          exports2.logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (lower === "false") {
          return false;
        }
        if (lower === "true") {
          return true;
        }
      }
      if (typeof value === "boolean") {
        return value;
      }
      throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);
    };
    exports2.expectBoolean = expectBoolean;
    var expectNumber = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        const parsed = parseFloat(value);
        if (!Number.isNaN(parsed)) {
          if (String(parsed) !== String(value)) {
            exports2.logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));
          }
          return parsed;
        }
      }
      if (typeof value === "number") {
        return value;
      }
      throw new TypeError(`Expected number, got ${typeof value}: ${value}`);
    };
    exports2.expectNumber = expectNumber;
    var MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
    var expectFloat32 = (value) => {
      const expected = (0, exports2.expectNumber)(value);
      if (expected !== void 0 && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) {
          throw new TypeError(`Expected 32-bit float, got ${value}`);
        }
      }
      return expected;
    };
    exports2.expectFloat32 = expectFloat32;
    var expectLong = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (Number.isInteger(value) && !Number.isNaN(value)) {
        return value;
      }
      throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);
    };
    exports2.expectLong = expectLong;
    exports2.expectInt = exports2.expectLong;
    var expectInt32 = (value) => expectSizedInt(value, 32);
    exports2.expectInt32 = expectInt32;
    var expectShort = (value) => expectSizedInt(value, 16);
    exports2.expectShort = expectShort;
    var expectByte = (value) => expectSizedInt(value, 8);
    exports2.expectByte = expectByte;
    var expectSizedInt = (value, size) => {
      const expected = (0, exports2.expectLong)(value);
      if (expected !== void 0 && castInt(expected, size) !== expected) {
        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
      }
      return expected;
    };
    var castInt = (value, size) => {
      switch (size) {
        case 32:
          return Int32Array.of(value)[0];
        case 16:
          return Int16Array.of(value)[0];
        case 8:
          return Int8Array.of(value)[0];
      }
    };
    var expectNonNull = (value, location) => {
      if (value === null || value === void 0) {
        if (location) {
          throw new TypeError(`Expected a non-null value for ${location}`);
        }
        throw new TypeError("Expected a non-null value");
      }
      return value;
    };
    exports2.expectNonNull = expectNonNull;
    var expectObject = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "object" && !Array.isArray(value)) {
        return value;
      }
      const receivedType = Array.isArray(value) ? "array" : typeof value;
      throw new TypeError(`Expected object, got ${receivedType}: ${value}`);
    };
    exports2.expectObject = expectObject;
    var expectString = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        return value;
      }
      if (["boolean", "number", "bigint"].includes(typeof value)) {
        exports2.logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));
        return String(value);
      }
      throw new TypeError(`Expected string, got ${typeof value}: ${value}`);
    };
    exports2.expectString = expectString;
    var expectUnion = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      const asObject = (0, exports2.expectObject)(value);
      const setKeys = Object.entries(asObject).filter(([, v]) => v != null).map(([k]) => k);
      if (setKeys.length === 0) {
        throw new TypeError(`Unions must have exactly one non-null member. None were found.`);
      }
      if (setKeys.length > 1) {
        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
      }
      return asObject;
    };
    exports2.expectUnion = expectUnion;
    var strictParseDouble = (value) => {
      if (typeof value == "string") {
        return (0, exports2.expectNumber)(parseNumber(value));
      }
      return (0, exports2.expectNumber)(value);
    };
    exports2.strictParseDouble = strictParseDouble;
    exports2.strictParseFloat = exports2.strictParseDouble;
    var strictParseFloat32 = (value) => {
      if (typeof value == "string") {
        return (0, exports2.expectFloat32)(parseNumber(value));
      }
      return (0, exports2.expectFloat32)(value);
    };
    exports2.strictParseFloat32 = strictParseFloat32;
    var NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
    var parseNumber = (value) => {
      const matches = value.match(NUMBER_REGEX);
      if (matches === null || matches[0].length !== value.length) {
        throw new TypeError(`Expected real number, got implicit NaN`);
      }
      return parseFloat(value);
    };
    var limitedParseDouble = (value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return (0, exports2.expectNumber)(value);
    };
    exports2.limitedParseDouble = limitedParseDouble;
    exports2.handleFloat = exports2.limitedParseDouble;
    exports2.limitedParseFloat = exports2.limitedParseDouble;
    var limitedParseFloat32 = (value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return (0, exports2.expectFloat32)(value);
    };
    exports2.limitedParseFloat32 = limitedParseFloat32;
    var parseFloatString = (value) => {
      switch (value) {
        case "NaN":
          return NaN;
        case "Infinity":
          return Infinity;
        case "-Infinity":
          return -Infinity;
        default:
          throw new Error(`Unable to parse float value: ${value}`);
      }
    };
    var strictParseLong = (value) => {
      if (typeof value === "string") {
        return (0, exports2.expectLong)(parseNumber(value));
      }
      return (0, exports2.expectLong)(value);
    };
    exports2.strictParseLong = strictParseLong;
    exports2.strictParseInt = exports2.strictParseLong;
    var strictParseInt32 = (value) => {
      if (typeof value === "string") {
        return (0, exports2.expectInt32)(parseNumber(value));
      }
      return (0, exports2.expectInt32)(value);
    };
    exports2.strictParseInt32 = strictParseInt32;
    var strictParseShort = (value) => {
      if (typeof value === "string") {
        return (0, exports2.expectShort)(parseNumber(value));
      }
      return (0, exports2.expectShort)(value);
    };
    exports2.strictParseShort = strictParseShort;
    var strictParseByte = (value) => {
      if (typeof value === "string") {
        return (0, exports2.expectByte)(parseNumber(value));
      }
      return (0, exports2.expectByte)(value);
    };
    exports2.strictParseByte = strictParseByte;
    var stackTraceWarning = (message) => {
      return String(new TypeError(message).stack || message).split("\n").slice(0, 5).filter((s) => !s.includes("stackTraceWarning")).join("\n");
    };
    exports2.logger = {
      warn: console.warn
    };
  }
});

var require_date_utils = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/date-utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseEpochTimestamp = exports2.parseRfc7231DateTime = exports2.parseRfc3339DateTimeWithOffset = exports2.parseRfc3339DateTime = exports2.dateToUtcString = void 0;
    var parse_utils_1 = require_parse_utils();
    var DAYS = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    var MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    function dateToUtcString(date) {
      const year = date.getUTCFullYear();
      const month = date.getUTCMonth();
      const dayOfWeek = date.getUTCDay();
      const dayOfMonthInt = date.getUTCDate();
      const hoursInt = date.getUTCHours();
      const minutesInt = date.getUTCMinutes();
      const secondsInt = date.getUTCSeconds();
      const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
      const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
      const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
      const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
      return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
    }
    exports2.dateToUtcString = dateToUtcString;
    var RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
    var parseRfc3339DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
      const year = (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
    };
    exports2.parseRfc3339DateTime = parseRfc3339DateTime;
    var RFC3339_WITH_OFFSET = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/);
    var parseRfc3339DateTimeWithOffset = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339_WITH_OFFSET.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, offsetStr] = match;
      const year = (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      const date = buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
      if (offsetStr.toUpperCase() != "Z") {
        date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));
      }
      return date;
    };
    exports2.parseRfc3339DateTimeWithOffset = parseRfc3339DateTimeWithOffset;
    var IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    var RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    var ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/);
    var parseRfc7231DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-7231 date-times must be expressed as strings");
      }
      let match = IMF_FIXDATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return buildDate((0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      match = RFC_850_DATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
          hours,
          minutes,
          seconds,
          fractionalMilliseconds
        }));
      }
      match = ASC_TIME.exec(value);
      if (match) {
        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
        return buildDate((0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      throw new TypeError("Invalid RFC-7231 date-time value");
    };
    exports2.parseRfc7231DateTime = parseRfc7231DateTime;
    var parseEpochTimestamp = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      let valueAsDouble;
      if (typeof value === "number") {
        valueAsDouble = value;
      } else if (typeof value === "string") {
        valueAsDouble = (0, parse_utils_1.strictParseDouble)(value);
      } else {
        throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");
      }
      if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {
        throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");
      }
      return new Date(Math.round(valueAsDouble * 1e3));
    };
    exports2.parseEpochTimestamp = parseEpochTimestamp;
    var buildDate = (year, month, day, time) => {
      const adjustedMonth = month - 1;
      validateDayOfMonth(year, adjustedMonth, day);
      return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, "hour", 0, 23), parseDateValue(time.minutes, "minute", 0, 59), parseDateValue(time.seconds, "seconds", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));
    };
    var parseTwoDigitYear = (value) => {
      const thisYear = (/* @__PURE__ */ new Date()).getUTCFullYear();
      const valueInThisCentury = Math.floor(thisYear / 100) * 100 + (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(value));
      if (valueInThisCentury < thisYear) {
        return valueInThisCentury + 100;
      }
      return valueInThisCentury;
    };
    var FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;
    var adjustRfc850Year = (input) => {
      if (input.getTime() - (/* @__PURE__ */ new Date()).getTime() > FIFTY_YEARS_IN_MILLIS) {
        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));
      }
      return input;
    };
    var parseMonthByShortName = (value) => {
      const monthIdx = MONTHS.indexOf(value);
      if (monthIdx < 0) {
        throw new TypeError(`Invalid month: ${value}`);
      }
      return monthIdx + 1;
    };
    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var validateDayOfMonth = (year, month, day) => {
      let maxDays = DAYS_IN_MONTH[month];
      if (month === 1 && isLeapYear(year)) {
        maxDays = 29;
      }
      if (day > maxDays) {
        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
      }
    };
    var isLeapYear = (year) => {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    };
    var parseDateValue = (value, type, lower, upper) => {
      const dateVal = (0, parse_utils_1.strictParseByte)(stripLeadingZeroes(value));
      if (dateVal < lower || dateVal > upper) {
        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
      }
      return dateVal;
    };
    var parseMilliseconds = (value) => {
      if (value === null || value === void 0) {
        return 0;
      }
      return (0, parse_utils_1.strictParseFloat32)("0." + value) * 1e3;
    };
    var parseOffsetToMilliseconds = (value) => {
      const directionStr = value[0];
      let direction = 1;
      if (directionStr == "+") {
        direction = 1;
      } else if (directionStr == "-") {
        direction = -1;
      } else {
        throw new TypeError(`Offset direction, ${directionStr}, must be "+" or "-"`);
      }
      const hour = Number(value.substring(1, 3));
      const minute = Number(value.substring(4, 6));
      return direction * (hour * 60 + minute) * 60 * 1e3;
    };
    var stripLeadingZeroes = (value) => {
      let idx = 0;
      while (idx < value.length - 1 && value.charAt(idx) === "0") {
        idx++;
      }
      if (idx === 0) {
        return value;
      }
      return value.slice(idx);
    };
  }
});

var require_exceptions = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/exceptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decorateServiceException = exports2.ServiceException = void 0;
    var ServiceException = class _ServiceException extends Error {
      constructor(options) {
        super(options.message);
        Object.setPrototypeOf(this, _ServiceException.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
      }
    };
    exports2.ServiceException = ServiceException;
    var decorateServiceException = (exception, additions = {}) => {
      Object.entries(additions).filter(([, v]) => v !== void 0).forEach(([k, v]) => {
        if (exception[k] == void 0 || exception[k] === "") {
          exception[k] = v;
        }
      });
      const message = exception.message || exception.Message || "UnknownError";
      exception.message = message;
      delete exception.Message;
      return exception;
    };
    exports2.decorateServiceException = decorateServiceException;
  }
});

var require_default_error_handler = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/default-error-handler.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.withBaseException = exports2.throwDefaultError = void 0;
    var exceptions_1 = require_exceptions();
    var throwDefaultError = ({ output, parsedBody, exceptionCtor, errorCode }) => {
      const $metadata = deserializeMetadata(output);
      const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
      const response = new exceptionCtor({
        name: (parsedBody === null || parsedBody === void 0 ? void 0 : parsedBody.code) || (parsedBody === null || parsedBody === void 0 ? void 0 : parsedBody.Code) || errorCode || statusCode || "UnknownError",
        $fault: "client",
        $metadata
      });
      throw (0, exceptions_1.decorateServiceException)(response, parsedBody);
    };
    exports2.throwDefaultError = throwDefaultError;
    var withBaseException = (ExceptionCtor) => {
      return ({ output, parsedBody, errorCode }) => {
        (0, exports2.throwDefaultError)({ output, parsedBody, exceptionCtor: ExceptionCtor, errorCode });
      };
    };
    exports2.withBaseException = withBaseException;
    var deserializeMetadata = (output) => {
      var _a, _b;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_b = (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"]) !== null && _b !== void 0 ? _b : output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
      };
    };
  }
});

var require_defaults_mode = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/defaults-mode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.loadConfigsForDefaultMode = void 0;
    var loadConfigsForDefaultMode = (mode) => {
      switch (mode) {
        case "standard":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "in-region":
          return {
            retryMode: "standard",
            connectionTimeout: 1100
          };
        case "cross-region":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "mobile":
          return {
            retryMode: "standard",
            connectionTimeout: 3e4
          };
        default:
          return {};
      }
    };
    exports2.loadConfigsForDefaultMode = loadConfigsForDefaultMode;
  }
});

var require_emitWarningIfUnsupportedVersion = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.emitWarningIfUnsupportedVersion = void 0;
    var warningEmitted = false;
    var emitWarningIfUnsupportedVersion = (version2) => {
      if (version2 && !warningEmitted && parseInt(version2.substring(1, version2.indexOf("."))) < 14) {
        warningEmitted = true;
      }
    };
    exports2.emitWarningIfUnsupportedVersion = emitWarningIfUnsupportedVersion;
  }
});

var require_checksum4 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/extensions/checksum.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveChecksumRuntimeConfig = exports2.getChecksumConfiguration = exports2.AlgorithmId = void 0;
    var types_1 = require_dist_cjs();
    Object.defineProperty(exports2, "AlgorithmId", { enumerable: true, get: function() {
      return types_1.AlgorithmId;
    } });
    var getChecksumConfiguration = (runtimeConfig) => {
      const checksumAlgorithms = [];
      if (runtimeConfig.sha256 !== void 0) {
        checksumAlgorithms.push({
          algorithmId: () => types_1.AlgorithmId.SHA256,
          checksumConstructor: () => runtimeConfig.sha256
        });
      }
      if (runtimeConfig.md5 != void 0) {
        checksumAlgorithms.push({
          algorithmId: () => types_1.AlgorithmId.MD5,
          checksumConstructor: () => runtimeConfig.md5
        });
      }
      return {
        _checksumAlgorithms: checksumAlgorithms,
        addChecksumAlgorithm(algo) {
          this._checksumAlgorithms.push(algo);
        },
        checksumAlgorithms() {
          return this._checksumAlgorithms;
        }
      };
    };
    exports2.getChecksumConfiguration = getChecksumConfiguration;
    var resolveChecksumRuntimeConfig = (clientConfig) => {
      const runtimeConfig = {};
      clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {
        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
      });
      return runtimeConfig;
    };
    exports2.resolveChecksumRuntimeConfig = resolveChecksumRuntimeConfig;
  }
});

var require_defaultExtensionConfiguration2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/extensions/defaultExtensionConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveDefaultRuntimeConfig = exports2.getDefaultClientConfiguration = exports2.getDefaultExtensionConfiguration = void 0;
    var checksum_1 = require_checksum4();
    var getDefaultExtensionConfiguration = (runtimeConfig) => {
      return {
        ...(0, checksum_1.getChecksumConfiguration)(runtimeConfig)
      };
    };
    exports2.getDefaultExtensionConfiguration = getDefaultExtensionConfiguration;
    exports2.getDefaultClientConfiguration = exports2.getDefaultExtensionConfiguration;
    var resolveDefaultRuntimeConfig = (config) => {
      return {
        ...(0, checksum_1.resolveChecksumRuntimeConfig)(config)
      };
    };
    exports2.resolveDefaultRuntimeConfig = resolveDefaultRuntimeConfig;
  }
});

var require_extensions2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/extensions/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_defaultExtensionConfiguration2(), exports2);
  }
});

var require_extended_encode_uri_component = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/extended-encode-uri-component.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.extendedEncodeURIComponent = void 0;
    function extendedEncodeURIComponent(str) {
      return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    exports2.extendedEncodeURIComponent = extendedEncodeURIComponent;
  }
});

var require_get_array_if_single_item = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/get-array-if-single-item.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getArrayIfSingleItem = void 0;
    var getArrayIfSingleItem = (mayBeArray) => Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray];
    exports2.getArrayIfSingleItem = getArrayIfSingleItem;
  }
});

var require_get_value_from_text_node = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/get-value-from-text-node.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getValueFromTextNode = void 0;
    var getValueFromTextNode = (obj) => {
      const textNodeName = "#text";
      for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
          obj[key] = obj[key][textNodeName];
        } else if (typeof obj[key] === "object" && obj[key] !== null) {
          obj[key] = (0, exports2.getValueFromTextNode)(obj[key]);
        }
      }
      return obj;
    };
    exports2.getValueFromTextNode = getValueFromTextNode;
  }
});

var require_lazy_json = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/lazy-json.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LazyJsonString = exports2.StringWrapper = void 0;
    var StringWrapper = function() {
      const Class = Object.getPrototypeOf(this).constructor;
      const Constructor = Function.bind.apply(String, [null, ...arguments]);
      const instance = new Constructor();
      Object.setPrototypeOf(instance, Class.prototype);
      return instance;
    };
    exports2.StringWrapper = StringWrapper;
    exports2.StringWrapper.prototype = Object.create(String.prototype, {
      constructor: {
        value: exports2.StringWrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    Object.setPrototypeOf(exports2.StringWrapper, String);
    var LazyJsonString = class _LazyJsonString extends exports2.StringWrapper {
      deserializeJSON() {
        return JSON.parse(super.toString());
      }
      toJSON() {
        return super.toString();
      }
      static fromObject(object) {
        if (object instanceof _LazyJsonString) {
          return object;
        } else if (object instanceof String || typeof object === "string") {
          return new _LazyJsonString(object);
        }
        return new _LazyJsonString(JSON.stringify(object));
      }
    };
    exports2.LazyJsonString = LazyJsonString;
  }
});

var require_object_mapping = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/object-mapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.take = exports2.convertMap = exports2.map = void 0;
    function map(arg0, arg1, arg2) {
      let target;
      let filter;
      let instructions;
      if (typeof arg1 === "undefined" && typeof arg2 === "undefined") {
        target = {};
        instructions = arg0;
      } else {
        target = arg0;
        if (typeof arg1 === "function") {
          filter = arg1;
          instructions = arg2;
          return mapWithFilter(target, filter, instructions);
        } else {
          instructions = arg1;
        }
      }
      for (const key of Object.keys(instructions)) {
        if (!Array.isArray(instructions[key])) {
          target[key] = instructions[key];
          continue;
        }
        applyInstruction(target, null, instructions, key);
      }
      return target;
    }
    exports2.map = map;
    var convertMap = (target) => {
      const output = {};
      for (const [k, v] of Object.entries(target || {})) {
        output[k] = [, v];
      }
      return output;
    };
    exports2.convertMap = convertMap;
    var take = (source, instructions) => {
      const out = {};
      for (const key in instructions) {
        applyInstruction(out, source, instructions, key);
      }
      return out;
    };
    exports2.take = take;
    var mapWithFilter = (target, filter, instructions) => {
      return map(target, Object.entries(instructions).reduce((_instructions, [key, value]) => {
        if (Array.isArray(value)) {
          _instructions[key] = value;
        } else {
          if (typeof value === "function") {
            _instructions[key] = [filter, value()];
          } else {
            _instructions[key] = [filter, value];
          }
        }
        return _instructions;
      }, {}));
    };
    var applyInstruction = (target, source, instructions, targetKey) => {
      if (source !== null) {
        let instruction = instructions[targetKey];
        if (typeof instruction === "function") {
          instruction = [, instruction];
        }
        const [filter2 = nonNullish, valueFn = pass, sourceKey = targetKey] = instruction;
        if (typeof filter2 === "function" && filter2(source[sourceKey]) || typeof filter2 !== "function" && !!filter2) {
          target[targetKey] = valueFn(source[sourceKey]);
        }
        return;
      }
      let [filter, value] = instructions[targetKey];
      if (typeof value === "function") {
        let _value;
        const defaultFilterPassed = filter === void 0 && (_value = value()) != null;
        const customFilterPassed = typeof filter === "function" && !!filter(void 0) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed) {
          target[targetKey] = _value;
        } else if (customFilterPassed) {
          target[targetKey] = value();
        }
      } else {
        const defaultFilterPassed = filter === void 0 && value != null;
        const customFilterPassed = typeof filter === "function" && !!filter(value) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed || customFilterPassed) {
          target[targetKey] = value;
        }
      }
    };
    var nonNullish = (_) => _ != null;
    var pass = (_) => _;
  }
});

var require_resolve_path = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/resolve-path.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolvedPath = void 0;
    var extended_encode_uri_component_1 = require_extended_encode_uri_component();
    var resolvedPath = (resolvedPath2, input, memberName, labelValueProvider, uriLabel, isGreedyLabel) => {
      if (input != null && input[memberName] !== void 0) {
        const labelValue = labelValueProvider();
        if (labelValue.length <= 0) {
          throw new Error("Empty value provided for input HTTP label: " + memberName + ".");
        }
        resolvedPath2 = resolvedPath2.replace(uriLabel, isGreedyLabel ? labelValue.split("/").map((segment) => (0, extended_encode_uri_component_1.extendedEncodeURIComponent)(segment)).join("/") : (0, extended_encode_uri_component_1.extendedEncodeURIComponent)(labelValue));
      } else {
        throw new Error("No value provided for input HTTP label: " + memberName + ".");
      }
      return resolvedPath2;
    };
    exports2.resolvedPath = resolvedPath;
  }
});

var require_ser_utils = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/ser-utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.serializeFloat = void 0;
    var serializeFloat = (value) => {
      if (value !== value) {
        return "NaN";
      }
      switch (value) {
        case Infinity:
          return "Infinity";
        case -Infinity:
          return "-Infinity";
        default:
          return value;
      }
    };
    exports2.serializeFloat = serializeFloat;
  }
});

var require_serde_json = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/serde-json.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2._json = void 0;
    var _json = (obj) => {
      if (obj == null) {
        return {};
      }
      if (Array.isArray(obj)) {
        return obj.filter((_) => _ != null);
      }
      if (typeof obj === "object") {
        const target = {};
        for (const key of Object.keys(obj)) {
          if (obj[key] == null) {
            continue;
          }
          target[key] = (0, exports2._json)(obj[key]);
        }
        return target;
      }
      return obj;
    };
    exports2._json = _json;
  }
});

var require_split_every = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/split-every.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.splitEvery = void 0;
    function splitEvery(value, delimiter, numDelimiters) {
      if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {
        throw new Error("Invalid number of delimiters (" + numDelimiters + ") for splitEvery.");
      }
      const segments = value.split(delimiter);
      if (numDelimiters === 1) {
        return segments;
      }
      const compoundSegments = [];
      let currentSegment = "";
      for (let i = 0; i < segments.length; i++) {
        if (currentSegment === "") {
          currentSegment = segments[i];
        } else {
          currentSegment += delimiter + segments[i];
        }
        if ((i + 1) % numDelimiters === 0) {
          compoundSegments.push(currentSegment);
          currentSegment = "";
        }
      }
      if (currentSegment !== "") {
        compoundSegments.push(currentSegment);
      }
      return compoundSegments;
    }
    exports2.splitEvery = splitEvery;
  }
});

var require_dist_cjs35 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/smithy-client/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_NoOpLogger(), exports2);
    tslib_1.__exportStar(require_client3(), exports2);
    tslib_1.__exportStar(require_collect_stream_body(), exports2);
    tslib_1.__exportStar(require_command3(), exports2);
    tslib_1.__exportStar(require_constants7(), exports2);
    tslib_1.__exportStar(require_create_aggregated_client(), exports2);
    tslib_1.__exportStar(require_date_utils(), exports2);
    tslib_1.__exportStar(require_default_error_handler(), exports2);
    tslib_1.__exportStar(require_defaults_mode(), exports2);
    tslib_1.__exportStar(require_emitWarningIfUnsupportedVersion(), exports2);
    tslib_1.__exportStar(require_extensions2(), exports2);
    tslib_1.__exportStar(require_exceptions(), exports2);
    tslib_1.__exportStar(require_extended_encode_uri_component(), exports2);
    tslib_1.__exportStar(require_get_array_if_single_item(), exports2);
    tslib_1.__exportStar(require_get_value_from_text_node(), exports2);
    tslib_1.__exportStar(require_lazy_json(), exports2);
    tslib_1.__exportStar(require_object_mapping(), exports2);
    tslib_1.__exportStar(require_parse_utils(), exports2);
    tslib_1.__exportStar(require_resolve_path(), exports2);
    tslib_1.__exportStar(require_ser_utils(), exports2);
    tslib_1.__exportStar(require_serde_json(), exports2);
    tslib_1.__exportStar(require_split_every(), exports2);
  }
});

var require_EndpointParameters = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/endpoint/EndpointParameters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "elasticache"
      };
    };
    exports2.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

var require_package2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/package.json"(exports2, module2) {
    module2.exports = {
      name: "@aws-sdk/client-elasticache",
      description: "AWS SDK for JavaScript Elasticache Client for Node.js, Browser and React Native",
      version: "3.405.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo elasticache"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/client-sts": "3.405.0",
        "@aws-sdk/credential-provider-node": "3.405.0",
        "@aws-sdk/middleware-host-header": "3.398.0",
        "@aws-sdk/middleware-logger": "3.398.0",
        "@aws-sdk/middleware-recursion-detection": "3.398.0",
        "@aws-sdk/middleware-signing": "3.398.0",
        "@aws-sdk/middleware-user-agent": "3.398.0",
        "@aws-sdk/types": "3.398.0",
        "@aws-sdk/util-endpoints": "3.398.0",
        "@aws-sdk/util-user-agent-browser": "3.398.0",
        "@aws-sdk/util-user-agent-node": "3.405.0",
        "@smithy/config-resolver": "^2.0.5",
        "@smithy/fetch-http-handler": "^2.0.5",
        "@smithy/hash-node": "^2.0.5",
        "@smithy/invalid-dependency": "^2.0.5",
        "@smithy/middleware-content-length": "^2.0.5",
        "@smithy/middleware-endpoint": "^2.0.5",
        "@smithy/middleware-retry": "^2.0.5",
        "@smithy/middleware-serde": "^2.0.5",
        "@smithy/middleware-stack": "^2.0.0",
        "@smithy/node-config-provider": "^2.0.6",
        "@smithy/node-http-handler": "^2.0.5",
        "@smithy/protocol-http": "^2.0.5",
        "@smithy/smithy-client": "^2.0.5",
        "@smithy/types": "^2.2.2",
        "@smithy/url-parser": "^2.0.5",
        "@smithy/util-base64": "^2.0.0",
        "@smithy/util-body-length-browser": "^2.0.0",
        "@smithy/util-body-length-node": "^2.1.0",
        "@smithy/util-defaults-mode-browser": "^2.0.6",
        "@smithy/util-defaults-mode-node": "^2.0.6",
        "@smithy/util-retry": "^2.0.0",
        "@smithy/util-utf8": "^2.0.0",
        "@smithy/util-waiter": "^2.0.5",
        "fast-xml-parser": "4.2.5",
        tslib: "^2.5.0"
      },
      devDependencies: {
        "@smithy/service-client-documentation-generator": "^2.0.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.23.23",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-elasticache",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-elasticache"
      }
    };
  }
});

var require_dist_cjs36 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveStsAuthConfig = void 0;
    var middleware_signing_1 = require_dist_cjs16();
    var resolveStsAuthConfig = (input, { stsClientCtor }) => (0, middleware_signing_1.resolveAwsAuthConfig)({
      ...input,
      stsClientCtor
    });
    exports2.resolveStsAuthConfig = resolveStsAuthConfig;
  }
});

var require_EndpointParameters2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/EndpointParameters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        useGlobalEndpoint: options.useGlobalEndpoint ?? false,
        defaultSigningName: "sts"
      };
    };
    exports2.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

var require_package3 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/package.json"(exports2, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sts",
      description: "AWS SDK for JavaScript Sts Client for Node.js, Browser and React Native",
      version: "3.405.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sts",
        test: "yarn test:unit",
        "test:unit": "jest"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/credential-provider-node": "3.405.0",
        "@aws-sdk/middleware-host-header": "3.398.0",
        "@aws-sdk/middleware-logger": "3.398.0",
        "@aws-sdk/middleware-recursion-detection": "3.398.0",
        "@aws-sdk/middleware-sdk-sts": "3.398.0",
        "@aws-sdk/middleware-signing": "3.398.0",
        "@aws-sdk/middleware-user-agent": "3.398.0",
        "@aws-sdk/types": "3.398.0",
        "@aws-sdk/util-endpoints": "3.398.0",
        "@aws-sdk/util-user-agent-browser": "3.398.0",
        "@aws-sdk/util-user-agent-node": "3.405.0",
        "@smithy/config-resolver": "^2.0.5",
        "@smithy/fetch-http-handler": "^2.0.5",
        "@smithy/hash-node": "^2.0.5",
        "@smithy/invalid-dependency": "^2.0.5",
        "@smithy/middleware-content-length": "^2.0.5",
        "@smithy/middleware-endpoint": "^2.0.5",
        "@smithy/middleware-retry": "^2.0.5",
        "@smithy/middleware-serde": "^2.0.5",
        "@smithy/middleware-stack": "^2.0.0",
        "@smithy/node-config-provider": "^2.0.6",
        "@smithy/node-http-handler": "^2.0.5",
        "@smithy/protocol-http": "^2.0.5",
        "@smithy/smithy-client": "^2.0.5",
        "@smithy/types": "^2.2.2",
        "@smithy/url-parser": "^2.0.5",
        "@smithy/util-base64": "^2.0.0",
        "@smithy/util-body-length-browser": "^2.0.0",
        "@smithy/util-body-length-node": "^2.1.0",
        "@smithy/util-defaults-mode-browser": "^2.0.6",
        "@smithy/util-defaults-mode-node": "^2.0.6",
        "@smithy/util-retry": "^2.0.0",
        "@smithy/util-utf8": "^2.0.0",
        "fast-xml-parser": "4.2.5",
        tslib: "^2.5.0"
      },
      devDependencies: {
        "@smithy/service-client-documentation-generator": "^2.0.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.23.23",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sts",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sts"
      }
    };
  }
});

var require_STSServiceException = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.STSServiceException = exports2.__ServiceException = void 0;
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "__ServiceException", { enumerable: true, get: function() {
      return smithy_client_1.ServiceException;
    } });
    var STSServiceException = class _STSServiceException extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _STSServiceException.prototype);
      }
    };
    exports2.STSServiceException = STSServiceException;
  }
});

var require_models_0 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetSessionTokenResponseFilterSensitiveLog = exports2.GetFederationTokenResponseFilterSensitiveLog = exports2.AssumeRoleWithWebIdentityResponseFilterSensitiveLog = exports2.AssumeRoleWithWebIdentityRequestFilterSensitiveLog = exports2.AssumeRoleWithSAMLResponseFilterSensitiveLog = exports2.AssumeRoleWithSAMLRequestFilterSensitiveLog = exports2.AssumeRoleResponseFilterSensitiveLog = exports2.CredentialsFilterSensitiveLog = exports2.InvalidAuthorizationMessageException = exports2.IDPCommunicationErrorException = exports2.InvalidIdentityTokenException = exports2.IDPRejectedClaimException = exports2.RegionDisabledException = exports2.PackedPolicyTooLargeException = exports2.MalformedPolicyDocumentException = exports2.ExpiredTokenException = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var STSServiceException_1 = require_STSServiceException();
    var ExpiredTokenException = class _ExpiredTokenException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ExpiredTokenException.prototype);
      }
    };
    exports2.ExpiredTokenException = ExpiredTokenException;
    var MalformedPolicyDocumentException = class _MalformedPolicyDocumentException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "MalformedPolicyDocumentException",
          $fault: "client",
          ...opts
        });
        this.name = "MalformedPolicyDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _MalformedPolicyDocumentException.prototype);
      }
    };
    exports2.MalformedPolicyDocumentException = MalformedPolicyDocumentException;
    var PackedPolicyTooLargeException = class _PackedPolicyTooLargeException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "PackedPolicyTooLargeException",
          $fault: "client",
          ...opts
        });
        this.name = "PackedPolicyTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _PackedPolicyTooLargeException.prototype);
      }
    };
    exports2.PackedPolicyTooLargeException = PackedPolicyTooLargeException;
    var RegionDisabledException = class _RegionDisabledException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "RegionDisabledException",
          $fault: "client",
          ...opts
        });
        this.name = "RegionDisabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _RegionDisabledException.prototype);
      }
    };
    exports2.RegionDisabledException = RegionDisabledException;
    var IDPRejectedClaimException = class _IDPRejectedClaimException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "IDPRejectedClaimException",
          $fault: "client",
          ...opts
        });
        this.name = "IDPRejectedClaimException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _IDPRejectedClaimException.prototype);
      }
    };
    exports2.IDPRejectedClaimException = IDPRejectedClaimException;
    var InvalidIdentityTokenException = class _InvalidIdentityTokenException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "InvalidIdentityTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidIdentityTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidIdentityTokenException.prototype);
      }
    };
    exports2.InvalidIdentityTokenException = InvalidIdentityTokenException;
    var IDPCommunicationErrorException = class _IDPCommunicationErrorException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "IDPCommunicationErrorException",
          $fault: "client",
          ...opts
        });
        this.name = "IDPCommunicationErrorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _IDPCommunicationErrorException.prototype);
      }
    };
    exports2.IDPCommunicationErrorException = IDPCommunicationErrorException;
    var InvalidAuthorizationMessageException = class _InvalidAuthorizationMessageException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "InvalidAuthorizationMessageException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAuthorizationMessageException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidAuthorizationMessageException.prototype);
      }
    };
    exports2.InvalidAuthorizationMessageException = InvalidAuthorizationMessageException;
    var CredentialsFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SecretAccessKey && { SecretAccessKey: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.CredentialsFilterSensitiveLog = CredentialsFilterSensitiveLog;
    var AssumeRoleResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: (0, exports2.CredentialsFilterSensitiveLog)(obj.Credentials) }
    });
    exports2.AssumeRoleResponseFilterSensitiveLog = AssumeRoleResponseFilterSensitiveLog;
    var AssumeRoleWithSAMLRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SAMLAssertion && { SAMLAssertion: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.AssumeRoleWithSAMLRequestFilterSensitiveLog = AssumeRoleWithSAMLRequestFilterSensitiveLog;
    var AssumeRoleWithSAMLResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: (0, exports2.CredentialsFilterSensitiveLog)(obj.Credentials) }
    });
    exports2.AssumeRoleWithSAMLResponseFilterSensitiveLog = AssumeRoleWithSAMLResponseFilterSensitiveLog;
    var AssumeRoleWithWebIdentityRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.WebIdentityToken && { WebIdentityToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.AssumeRoleWithWebIdentityRequestFilterSensitiveLog = AssumeRoleWithWebIdentityRequestFilterSensitiveLog;
    var AssumeRoleWithWebIdentityResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: (0, exports2.CredentialsFilterSensitiveLog)(obj.Credentials) }
    });
    exports2.AssumeRoleWithWebIdentityResponseFilterSensitiveLog = AssumeRoleWithWebIdentityResponseFilterSensitiveLog;
    var GetFederationTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: (0, exports2.CredentialsFilterSensitiveLog)(obj.Credentials) }
    });
    exports2.GetFederationTokenResponseFilterSensitiveLog = GetFederationTokenResponseFilterSensitiveLog;
    var GetSessionTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: (0, exports2.CredentialsFilterSensitiveLog)(obj.Credentials) }
    });
    exports2.GetSessionTokenResponseFilterSensitiveLog = GetSessionTokenResponseFilterSensitiveLog;
  }
});

var require_util5 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/util.js"(exports2) {
    "use strict";
    var nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    var nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
    var regexName = new RegExp("^" + nameRegexp + "$");
    var getAllMatches = function(string, regex) {
      const matches = [];
      let match = regex.exec(string);
      while (match) {
        const allmatches = [];
        allmatches.startIndex = regex.lastIndex - match[0].length;
        const len = match.length;
        for (let index = 0; index < len; index++) {
          allmatches.push(match[index]);
        }
        matches.push(allmatches);
        match = regex.exec(string);
      }
      return matches;
    };
    var isName = function(string) {
      const match = regexName.exec(string);
      return !(match === null || typeof match === "undefined");
    };
    exports2.isExist = function(v) {
      return typeof v !== "undefined";
    };
    exports2.isEmptyObject = function(obj) {
      return Object.keys(obj).length === 0;
    };
    exports2.merge = function(target, a, arrayMode) {
      if (a) {
        const keys = Object.keys(a);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          if (arrayMode === "strict") {
            target[keys[i]] = [a[keys[i]]];
          } else {
            target[keys[i]] = a[keys[i]];
          }
        }
      }
    };
    exports2.getValue = function(v) {
      if (exports2.isExist(v)) {
        return v;
      } else {
        return "";
      }
    };
    exports2.isName = isName;
    exports2.getAllMatches = getAllMatches;
    exports2.nameRegexp = nameRegexp;
  }
});

var require_validator2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/validator.js"(exports2) {
    "use strict";
    var util = require_util5();
    var defaultOptions = {
      allowBooleanAttributes: false,
      //A tag can have attributes without any value
      unpairedTags: []
    };
    exports2.validate = function(xmlData, options) {
      options = Object.assign({}, defaultOptions, options);
      const tags = [];
      let tagFound = false;
      let reachedRoot = false;
      if (xmlData[0] === "\uFEFF") {
        xmlData = xmlData.substr(1);
      }
      for (let i = 0; i < xmlData.length; i++) {
        if (xmlData[i] === "<" && xmlData[i + 1] === "?") {
          i += 2;
          i = readPI(xmlData, i);
          if (i.err)
            return i;
        } else if (xmlData[i] === "<") {
          let tagStartPos = i;
          i++;
          if (xmlData[i] === "!") {
            i = readCommentAndCDATA(xmlData, i);
            continue;
          } else {
            let closingTag = false;
            if (xmlData[i] === "/") {
              closingTag = true;
              i++;
            }
            let tagName = "";
            for (; i < xmlData.length && xmlData[i] !== ">" && xmlData[i] !== " " && xmlData[i] !== "	" && xmlData[i] !== "\n" && xmlData[i] !== "\r"; i++) {
              tagName += xmlData[i];
            }
            tagName = tagName.trim();
            if (tagName[tagName.length - 1] === "/") {
              tagName = tagName.substring(0, tagName.length - 1);
              i--;
            }
            if (!validateTagName(tagName)) {
              let msg;
              if (tagName.trim().length === 0) {
                msg = "Invalid space after '<'.";
              } else {
                msg = "Tag '" + tagName + "' is an invalid name.";
              }
              return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i));
            }
            const result = readAttributeStr(xmlData, i);
            if (result === false) {
              return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i));
            }
            let attrStr = result.value;
            i = result.index;
            if (attrStr[attrStr.length - 1] === "/") {
              const attrStrStart = i - attrStr.length;
              attrStr = attrStr.substring(0, attrStr.length - 1);
              const isValid = validateAttributeString(attrStr, options);
              if (isValid === true) {
                tagFound = true;
              } else {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
              }
            } else if (closingTag) {
              if (!result.tagClosed) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
              } else if (attrStr.trim().length > 0) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
              } else {
                const otg = tags.pop();
                if (tagName !== otg.tagName) {
                  let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
                  return getErrorObject(
                    "InvalidTag",
                    "Expected closing tag '" + otg.tagName + "' (opened in line " + openPos.line + ", col " + openPos.col + ") instead of closing tag '" + tagName + "'.",
                    getLineNumberForPosition(xmlData, tagStartPos)
                  );
                }
                if (tags.length == 0) {
                  reachedRoot = true;
                }
              }
            } else {
              const isValid = validateAttributeString(attrStr, options);
              if (isValid !== true) {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
              }
              if (reachedRoot === true) {
                return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i));
              } else if (options.unpairedTags.indexOf(tagName) !== -1) {
              } else {
                tags.push({ tagName, tagStartPos });
              }
              tagFound = true;
            }
            for (i++; i < xmlData.length; i++) {
              if (xmlData[i] === "<") {
                if (xmlData[i + 1] === "!") {
                  i++;
                  i = readCommentAndCDATA(xmlData, i);
                  continue;
                } else if (xmlData[i + 1] === "?") {
                  i = readPI(xmlData, ++i);
                  if (i.err)
                    return i;
                } else {
                  break;
                }
              } else if (xmlData[i] === "&") {
                const afterAmp = validateAmpersand(xmlData, i);
                if (afterAmp == -1)
                  return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
                i = afterAmp;
              } else {
                if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {
                  return getErrorObject("InvalidXml", "Extra text at the end", getLineNumberForPosition(xmlData, i));
                }
              }
            }
            if (xmlData[i] === "<") {
              i--;
            }
          }
        } else {
          if (isWhiteSpace(xmlData[i])) {
            continue;
          }
          return getErrorObject("InvalidChar", "char '" + xmlData[i] + "' is not expected.", getLineNumberForPosition(xmlData, i));
        }
      }
      if (!tagFound) {
        return getErrorObject("InvalidXml", "Start tag expected.", 1);
      } else if (tags.length == 1) {
        return getErrorObject("InvalidTag", "Unclosed tag '" + tags[0].tagName + "'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos));
      } else if (tags.length > 0) {
        return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags.map((t) => t.tagName), null, 4).replace(/\r?\n/g, "") + "' found.", { line: 1, col: 1 });
      }
      return true;
    };
    function isWhiteSpace(char) {
      return char === " " || char === "	" || char === "\n" || char === "\r";
    }
    function readPI(xmlData, i) {
      const start = i;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] == "?" || xmlData[i] == " ") {
          const tagname = xmlData.substr(start, i - start);
          if (i > 5 && tagname === "xml") {
            return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i));
          } else if (xmlData[i] == "?" && xmlData[i + 1] == ">") {
            i++;
            break;
          } else {
            continue;
          }
        }
      }
      return i;
    }
    function readCommentAndCDATA(xmlData, i) {
      if (xmlData.length > i + 5 && xmlData[i + 1] === "-" && xmlData[i + 2] === "-") {
        for (i += 3; i < xmlData.length; i++) {
          if (xmlData[i] === "-" && xmlData[i + 1] === "-" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      } else if (xmlData.length > i + 8 && xmlData[i + 1] === "D" && xmlData[i + 2] === "O" && xmlData[i + 3] === "C" && xmlData[i + 4] === "T" && xmlData[i + 5] === "Y" && xmlData[i + 6] === "P" && xmlData[i + 7] === "E") {
        let angleBracketsCount = 1;
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "<") {
            angleBracketsCount++;
          } else if (xmlData[i] === ">") {
            angleBracketsCount--;
            if (angleBracketsCount === 0) {
              break;
            }
          }
        }
      } else if (xmlData.length > i + 9 && xmlData[i + 1] === "[" && xmlData[i + 2] === "C" && xmlData[i + 3] === "D" && xmlData[i + 4] === "A" && xmlData[i + 5] === "T" && xmlData[i + 6] === "A" && xmlData[i + 7] === "[") {
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "]" && xmlData[i + 1] === "]" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      }
      return i;
    }
    var doubleQuote = '"';
    var singleQuote = "'";
    function readAttributeStr(xmlData, i) {
      let attrStr = "";
      let startChar = "";
      let tagClosed = false;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
          if (startChar === "") {
            startChar = xmlData[i];
          } else if (startChar !== xmlData[i]) {
          } else {
            startChar = "";
          }
        } else if (xmlData[i] === ">") {
          if (startChar === "") {
            tagClosed = true;
            break;
          }
        }
        attrStr += xmlData[i];
      }
      if (startChar !== "") {
        return false;
      }
      return {
        value: attrStr,
        index: i,
        tagClosed
      };
    }
    var validAttrStrRegxp = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
    function validateAttributeString(attrStr, options) {
      const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
      const attrNames = {};
      for (let i = 0; i < matches.length; i++) {
        if (matches[i][1].length === 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' has no space in starting.", getPositionFromMatch(matches[i]));
        } else if (matches[i][3] !== void 0 && matches[i][4] === void 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' is without value.", getPositionFromMatch(matches[i]));
        } else if (matches[i][3] === void 0 && !options.allowBooleanAttributes) {
          return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i][2] + "' is not allowed.", getPositionFromMatch(matches[i]));
        }
        const attrName = matches[i][2];
        if (!validateAttrName(attrName)) {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(matches[i]));
        }
        if (!attrNames.hasOwnProperty(attrName)) {
          attrNames[attrName] = 1;
        } else {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(matches[i]));
        }
      }
      return true;
    }
    function validateNumberAmpersand(xmlData, i) {
      let re = /\d/;
      if (xmlData[i] === "x") {
        i++;
        re = /[\da-fA-F]/;
      }
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === ";")
          return i;
        if (!xmlData[i].match(re))
          break;
      }
      return -1;
    }
    function validateAmpersand(xmlData, i) {
      i++;
      if (xmlData[i] === ";")
        return -1;
      if (xmlData[i] === "#") {
        i++;
        return validateNumberAmpersand(xmlData, i);
      }
      let count = 0;
      for (; i < xmlData.length; i++, count++) {
        if (xmlData[i].match(/\w/) && count < 20)
          continue;
        if (xmlData[i] === ";")
          break;
        return -1;
      }
      return i;
    }
    function getErrorObject(code, message, lineNumber) {
      return {
        err: {
          code,
          msg: message,
          line: lineNumber.line || lineNumber,
          col: lineNumber.col
        }
      };
    }
    function validateAttrName(attrName) {
      return util.isName(attrName);
    }
    function validateTagName(tagname) {
      return util.isName(tagname);
    }
    function getLineNumberForPosition(xmlData, index) {
      const lines = xmlData.substring(0, index).split(/\r?\n/);
      return {
        line: lines.length,
        // column number is last line's length + 1, because column numbering starts at 1:
        col: lines[lines.length - 1].length + 1
      };
    }
    function getPositionFromMatch(match) {
      return match.startIndex + match[1].length;
    }
  }
});

var require_OptionsBuilder = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js"(exports2) {
    var defaultOptions = {
      preserveOrder: false,
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      removeNSPrefix: false,
      // remove NS from tag name or attribute name if true
      allowBooleanAttributes: false,
      //a tag can have attributes without any value
      //ignoreRootElement : false,
      parseTagValue: true,
      parseAttributeValue: false,
      trimValues: true,
      //Trim string values of tag and attributes
      cdataPropName: false,
      numberParseOptions: {
        hex: true,
        leadingZeros: true,
        eNotation: true
      },
      tagValueProcessor: function(tagName, val2) {
        return val2;
      },
      attributeValueProcessor: function(attrName, val2) {
        return val2;
      },
      stopNodes: [],
      //nested tags will not be parsed even for errors
      alwaysCreateTextNode: false,
      isArray: () => false,
      commentPropName: false,
      unpairedTags: [],
      processEntities: true,
      htmlEntities: false,
      ignoreDeclaration: false,
      ignorePiTags: false,
      transformTagName: false,
      transformAttributeName: false,
      updateTag: function(tagName, jPath, attrs) {
        return tagName;
      }
      // skipEmptyListItem: false
    };
    var buildOptions = function(options) {
      return Object.assign({}, defaultOptions, options);
    };
    exports2.buildOptions = buildOptions;
    exports2.defaultOptions = defaultOptions;
  }
});

var require_xmlNode = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js"(exports2, module2) {
    "use strict";
    var XmlNode = class {
      constructor(tagname) {
        this.tagname = tagname;
        this.child = [];
        this[":@"] = {};
      }
      add(key, val2) {
        if (key === "__proto__")
          key = "#__proto__";
        this.child.push({ [key]: val2 });
      }
      addChild(node) {
        if (node.tagname === "__proto__")
          node.tagname = "#__proto__";
        if (node[":@"] && Object.keys(node[":@"]).length > 0) {
          this.child.push({ [node.tagname]: node.child, [":@"]: node[":@"] });
        } else {
          this.child.push({ [node.tagname]: node.child });
        }
      }
    };
    module2.exports = XmlNode;
  }
});

var require_DocTypeReader = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js"(exports2, module2) {
    var util = require_util5();
    function readDocType(xmlData, i) {
      const entities = {};
      if (xmlData[i + 3] === "O" && xmlData[i + 4] === "C" && xmlData[i + 5] === "T" && xmlData[i + 6] === "Y" && xmlData[i + 7] === "P" && xmlData[i + 8] === "E") {
        i = i + 9;
        let angleBracketsCount = 1;
        let hasBody = false, comment = false;
        let exp = "";
        for (; i < xmlData.length; i++) {
          if (xmlData[i] === "<" && !comment) {
            if (hasBody && isEntity(xmlData, i)) {
              i += 7;
              [entityName, val, i] = readEntityExp(xmlData, i + 1);
              if (val.indexOf("&") === -1)
                entities[validateEntityName(entityName)] = {
                  regx: RegExp(`&${entityName};`, "g"),
                  val
                };
            } else if (hasBody && isElement(xmlData, i))
              i += 8;
            else if (hasBody && isAttlist(xmlData, i))
              i += 8;
            else if (hasBody && isNotation(xmlData, i))
              i += 9;
            else if (isComment)
              comment = true;
            else
              throw new Error("Invalid DOCTYPE");
            angleBracketsCount++;
            exp = "";
          } else if (xmlData[i] === ">") {
            if (comment) {
              if (xmlData[i - 1] === "-" && xmlData[i - 2] === "-") {
                comment = false;
                angleBracketsCount--;
              }
            } else {
              angleBracketsCount--;
            }
            if (angleBracketsCount === 0) {
              break;
            }
          } else if (xmlData[i] === "[") {
            hasBody = true;
          } else {
            exp += xmlData[i];
          }
        }
        if (angleBracketsCount !== 0) {
          throw new Error(`Unclosed DOCTYPE`);
        }
      } else {
        throw new Error(`Invalid Tag instead of DOCTYPE`);
      }
      return { entities, i };
    }
    function readEntityExp(xmlData, i) {
      let entityName2 = "";
      for (; i < xmlData.length && (xmlData[i] !== "'" && xmlData[i] !== '"'); i++) {
        entityName2 += xmlData[i];
      }
      entityName2 = entityName2.trim();
      if (entityName2.indexOf(" ") !== -1)
        throw new Error("External entites are not supported");
      const startChar = xmlData[i++];
      let val2 = "";
      for (; i < xmlData.length && xmlData[i] !== startChar; i++) {
        val2 += xmlData[i];
      }
      return [entityName2, val2, i];
    }
    function isComment(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "-" && xmlData[i + 3] === "-")
        return true;
      return false;
    }
    function isEntity(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "N" && xmlData[i + 4] === "T" && xmlData[i + 5] === "I" && xmlData[i + 6] === "T" && xmlData[i + 7] === "Y")
        return true;
      return false;
    }
    function isElement(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "L" && xmlData[i + 4] === "E" && xmlData[i + 5] === "M" && xmlData[i + 6] === "E" && xmlData[i + 7] === "N" && xmlData[i + 8] === "T")
        return true;
      return false;
    }
    function isAttlist(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "A" && xmlData[i + 3] === "T" && xmlData[i + 4] === "T" && xmlData[i + 5] === "L" && xmlData[i + 6] === "I" && xmlData[i + 7] === "S" && xmlData[i + 8] === "T")
        return true;
      return false;
    }
    function isNotation(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "N" && xmlData[i + 3] === "O" && xmlData[i + 4] === "T" && xmlData[i + 5] === "A" && xmlData[i + 6] === "T" && xmlData[i + 7] === "I" && xmlData[i + 8] === "O" && xmlData[i + 9] === "N")
        return true;
      return false;
    }
    function validateEntityName(name) {
      if (util.isName(name))
        return name;
      else
        throw new Error(`Invalid entity name ${name}`);
    }
    module2.exports = readDocType;
  }
});

var require_strnum = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/strnum/strnum.js"(exports2, module2) {
    var hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
    var numRegex = /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
    if (!Number.parseInt && window.parseInt) {
      Number.parseInt = window.parseInt;
    }
    if (!Number.parseFloat && window.parseFloat) {
      Number.parseFloat = window.parseFloat;
    }
    var consider = {
      hex: true,
      leadingZeros: true,
      decimalPoint: ".",
      eNotation: true
      //skipLike: /regex/
    };
    function toNumber(str, options = {}) {
      options = Object.assign({}, consider, options);
      if (!str || typeof str !== "string")
        return str;
      let trimmedStr = str.trim();
      if (options.skipLike !== void 0 && options.skipLike.test(trimmedStr))
        return str;
      else if (options.hex && hexRegex.test(trimmedStr)) {
        return Number.parseInt(trimmedStr, 16);
      } else {
        const match = numRegex.exec(trimmedStr);
        if (match) {
          const sign = match[1];
          const leadingZeros = match[2];
          let numTrimmedByZeros = trimZeros(match[3]);
          const eNotation = match[4] || match[6];
          if (!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== ".")
            return str;
          else if (!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== ".")
            return str;
          else {
            const num = Number(trimmedStr);
            const numStr = "" + num;
            if (numStr.search(/[eE]/) !== -1) {
              if (options.eNotation)
                return num;
              else
                return str;
            } else if (eNotation) {
              if (options.eNotation)
                return num;
              else
                return str;
            } else if (trimmedStr.indexOf(".") !== -1) {
              if (numStr === "0" && numTrimmedByZeros === "")
                return num;
              else if (numStr === numTrimmedByZeros)
                return num;
              else if (sign && numStr === "-" + numTrimmedByZeros)
                return num;
              else
                return str;
            }
            if (leadingZeros) {
              if (numTrimmedByZeros === numStr)
                return num;
              else if (sign + numTrimmedByZeros === numStr)
                return num;
              else
                return str;
            }
            if (trimmedStr === numStr)
              return num;
            else if (trimmedStr === sign + numStr)
              return num;
            return str;
          }
        } else {
          return str;
        }
      }
    }
    function trimZeros(numStr) {
      if (numStr && numStr.indexOf(".") !== -1) {
        numStr = numStr.replace(/0+$/, "");
        if (numStr === ".")
          numStr = "0";
        else if (numStr[0] === ".")
          numStr = "0" + numStr;
        else if (numStr[numStr.length - 1] === ".")
          numStr = numStr.substr(0, numStr.length - 1);
        return numStr;
      }
      return numStr;
    }
    module2.exports = toNumber;
  }
});

var require_OrderedObjParser = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js"(exports2, module2) {
    "use strict";
    var util = require_util5();
    var xmlNode = require_xmlNode();
    var readDocType = require_DocTypeReader();
    var toNumber = require_strnum();
    var regx = "<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g, util.nameRegexp);
    var OrderedObjParser = class {
      constructor(options) {
        this.options = options;
        this.currentNode = null;
        this.tagsNodeStack = [];
        this.docTypeEntities = {};
        this.lastEntities = {
          "apos": { regex: /&(apos|#39|#x27);/g, val: "'" },
          "gt": { regex: /&(gt|#62|#x3E);/g, val: ">" },
          "lt": { regex: /&(lt|#60|#x3C);/g, val: "<" },
          "quot": { regex: /&(quot|#34|#x22);/g, val: '"' }
        };
        this.ampEntity = { regex: /&(amp|#38|#x26);/g, val: "&" };
        this.htmlEntities = {
          "space": { regex: /&(nbsp|#160);/g, val: " " },
          // "lt" : { regex: /&(lt|#60);/g, val: "<" },
          // "gt" : { regex: /&(gt|#62);/g, val: ">" },
          // "amp" : { regex: /&(amp|#38);/g, val: "&" },
          // "quot" : { regex: /&(quot|#34);/g, val: "\"" },
          // "apos" : { regex: /&(apos|#39);/g, val: "'" },
          "cent": { regex: /&(cent|#162);/g, val: "\xA2" },
          "pound": { regex: /&(pound|#163);/g, val: "\xA3" },
          "yen": { regex: /&(yen|#165);/g, val: "\xA5" },
          "euro": { regex: /&(euro|#8364);/g, val: "\u20AC" },
          "copyright": { regex: /&(copy|#169);/g, val: "\xA9" },
          "reg": { regex: /&(reg|#174);/g, val: "\xAE" },
          "inr": { regex: /&(inr|#8377);/g, val: "\u20B9" }
        };
        this.addExternalEntities = addExternalEntities;
        this.parseXml = parseXml;
        this.parseTextData = parseTextData;
        this.resolveNameSpace = resolveNameSpace;
        this.buildAttributesMap = buildAttributesMap;
        this.isItStopNode = isItStopNode;
        this.replaceEntitiesValue = replaceEntitiesValue;
        this.readStopNodeData = readStopNodeData;
        this.saveTextToParentTag = saveTextToParentTag;
        this.addChild = addChild;
      }
    };
    function addExternalEntities(externalEntities) {
      const entKeys = Object.keys(externalEntities);
      for (let i = 0; i < entKeys.length; i++) {
        const ent = entKeys[i];
        this.lastEntities[ent] = {
          regex: new RegExp("&" + ent + ";", "g"),
          val: externalEntities[ent]
        };
      }
    }
    function parseTextData(val2, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {
      if (val2 !== void 0) {
        if (this.options.trimValues && !dontTrim) {
          val2 = val2.trim();
        }
        if (val2.length > 0) {
          if (!escapeEntities)
            val2 = this.replaceEntitiesValue(val2);
          const newval = this.options.tagValueProcessor(tagName, val2, jPath, hasAttributes, isLeafNode);
          if (newval === null || newval === void 0) {
            return val2;
          } else if (typeof newval !== typeof val2 || newval !== val2) {
            return newval;
          } else if (this.options.trimValues) {
            return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);
          } else {
            const trimmedVal = val2.trim();
            if (trimmedVal === val2) {
              return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);
            } else {
              return val2;
            }
          }
        }
      }
    }
    function resolveNameSpace(tagname) {
      if (this.options.removeNSPrefix) {
        const tags = tagname.split(":");
        const prefix = tagname.charAt(0) === "/" ? "/" : "";
        if (tags[0] === "xmlns") {
          return "";
        }
        if (tags.length === 2) {
          tagname = prefix + tags[1];
        }
      }
      return tagname;
    }
    var attrsRegx = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])([\\s\\S]*?)\\3)?`, "gm");
    function buildAttributesMap(attrStr, jPath, tagName) {
      if (!this.options.ignoreAttributes && typeof attrStr === "string") {
        const matches = util.getAllMatches(attrStr, attrsRegx);
        const len = matches.length;
        const attrs = {};
        for (let i = 0; i < len; i++) {
          const attrName = this.resolveNameSpace(matches[i][1]);
          let oldVal = matches[i][4];
          let aName = this.options.attributeNamePrefix + attrName;
          if (attrName.length) {
            if (this.options.transformAttributeName) {
              aName = this.options.transformAttributeName(aName);
            }
            if (aName === "__proto__")
              aName = "#__proto__";
            if (oldVal !== void 0) {
              if (this.options.trimValues) {
                oldVal = oldVal.trim();
              }
              oldVal = this.replaceEntitiesValue(oldVal);
              const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);
              if (newVal === null || newVal === void 0) {
                attrs[aName] = oldVal;
              } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {
                attrs[aName] = newVal;
              } else {
                attrs[aName] = parseValue(
                  oldVal,
                  this.options.parseAttributeValue,
                  this.options.numberParseOptions
                );
              }
            } else if (this.options.allowBooleanAttributes) {
              attrs[aName] = true;
            }
          }
        }
        if (!Object.keys(attrs).length) {
          return;
        }
        if (this.options.attributesGroupName) {
          const attrCollection = {};
          attrCollection[this.options.attributesGroupName] = attrs;
          return attrCollection;
        }
        return attrs;
      }
    }
    var parseXml = function(xmlData) {
      xmlData = xmlData.replace(/\r\n?/g, "\n");
      const xmlObj = new xmlNode("!xml");
      let currentNode = xmlObj;
      let textData = "";
      let jPath = "";
      for (let i = 0; i < xmlData.length; i++) {
        const ch = xmlData[i];
        if (ch === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.");
            let tagName = xmlData.substring(i + 2, closeIndex).trim();
            if (this.options.removeNSPrefix) {
              const colonIndex = tagName.indexOf(":");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
              }
            }
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode) {
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
            }
            const lastTagName = jPath.substring(jPath.lastIndexOf(".") + 1);
            if (tagName && this.options.unpairedTags.indexOf(tagName) !== -1) {
              throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);
            }
            let propIndex = 0;
            if (lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1) {
              propIndex = jPath.lastIndexOf(".", jPath.lastIndexOf(".") - 1);
              this.tagsNodeStack.pop();
            } else {
              propIndex = jPath.lastIndexOf(".");
            }
            jPath = jPath.substring(0, propIndex);
            currentNode = this.tagsNodeStack.pop();
            textData = "";
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            let tagData = readTagExp(xmlData, i, false, "?>");
            if (!tagData)
              throw new Error("Pi Tag is not closed.");
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.ignoreDeclaration && tagData.tagName === "?xml" || this.options.ignorePiTags) {
            } else {
              const childNode = new xmlNode(tagData.tagName);
              childNode.add(this.options.textNodeName, "");
              if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);
              }
              this.addChild(currentNode, childNode, jPath);
            }
            i = tagData.closeIndex + 1;
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            const endIndex = findClosingIndex(xmlData, "-->", i + 4, "Comment is not closed.");
            if (this.options.commentPropName) {
              const comment = xmlData.substring(i + 4, endIndex - 2);
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
              currentNode.add(this.options.commentPropName, [{ [this.options.textNodeName]: comment }]);
            }
            i = endIndex;
          } else if (xmlData.substr(i + 1, 2) === "!D") {
            const result = readDocType(xmlData, i);
            this.docTypeEntities = result.entities;
            i = result.i;
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2;
            const tagExp = xmlData.substring(i + 9, closeIndex);
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.cdataPropName) {
              currentNode.add(this.options.cdataPropName, [{ [this.options.textNodeName]: tagExp }]);
            } else {
              let val2 = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);
              if (val2 == void 0)
                val2 = "";
              currentNode.add(this.options.textNodeName, val2);
            }
            i = closeIndex + 2;
          } else {
            let result = readTagExp(xmlData, i, this.options.removeNSPrefix);
            let tagName = result.tagName;
            let tagExp = result.tagExp;
            let attrExpPresent = result.attrExpPresent;
            let closeIndex = result.closeIndex;
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode && textData) {
              if (currentNode.tagname !== "!xml") {
                textData = this.saveTextToParentTag(textData, currentNode, jPath, false);
              }
            }
            const lastTag = currentNode;
            if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {
              currentNode = this.tagsNodeStack.pop();
              jPath = jPath.substring(0, jPath.lastIndexOf("."));
            }
            if (tagName !== xmlObj.tagname) {
              jPath += jPath ? "." + tagName : tagName;
            }
            if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {
              let tagContent = "";
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                i = result.closeIndex;
              } else if (this.options.unpairedTags.indexOf(tagName) !== -1) {
                i = result.closeIndex;
              } else {
                const result2 = this.readStopNodeData(xmlData, tagName, closeIndex + 1);
                if (!result2)
                  throw new Error(`Unexpected end of ${tagName}`);
                i = result2.i;
                tagContent = result2.tagContent;
              }
              const childNode = new xmlNode(tagName);
              if (tagName !== tagExp && attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
              }
              if (tagContent) {
                tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);
              }
              jPath = jPath.substr(0, jPath.lastIndexOf("."));
              childNode.add(this.options.textNodeName, tagContent);
              this.addChild(currentNode, childNode, jPath);
            } else {
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                if (tagName[tagName.length - 1] === "/") {
                  tagName = tagName.substr(0, tagName.length - 1);
                  tagExp = tagName;
                } else {
                  tagExp = tagExp.substr(0, tagExp.length - 1);
                }
                if (this.options.transformTagName) {
                  tagName = this.options.transformTagName(tagName);
                }
                const childNode = new xmlNode(tagName);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                }
                this.addChild(currentNode, childNode, jPath);
                jPath = jPath.substr(0, jPath.lastIndexOf("."));
              } else {
                const childNode = new xmlNode(tagName);
                this.tagsNodeStack.push(currentNode);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                }
                this.addChild(currentNode, childNode, jPath);
                currentNode = childNode;
              }
              textData = "";
              i = closeIndex;
            }
          }
        } else {
          textData += xmlData[i];
        }
      }
      return xmlObj.child;
    };
    function addChild(currentNode, childNode, jPath) {
      const result = this.options.updateTag(childNode.tagname, jPath, childNode[":@"]);
      if (result === false) {
      } else if (typeof result === "string") {
        childNode.tagname = result;
        currentNode.addChild(childNode);
      } else {
        currentNode.addChild(childNode);
      }
    }
    var replaceEntitiesValue = function(val2) {
      if (this.options.processEntities) {
        for (let entityName2 in this.docTypeEntities) {
          const entity = this.docTypeEntities[entityName2];
          val2 = val2.replace(entity.regx, entity.val);
        }
        for (let entityName2 in this.lastEntities) {
          const entity = this.lastEntities[entityName2];
          val2 = val2.replace(entity.regex, entity.val);
        }
        if (this.options.htmlEntities) {
          for (let entityName2 in this.htmlEntities) {
            const entity = this.htmlEntities[entityName2];
            val2 = val2.replace(entity.regex, entity.val);
          }
        }
        val2 = val2.replace(this.ampEntity.regex, this.ampEntity.val);
      }
      return val2;
    };
    function saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {
      if (textData) {
        if (isLeafNode === void 0)
          isLeafNode = Object.keys(currentNode.child).length === 0;
        textData = this.parseTextData(
          textData,
          currentNode.tagname,
          jPath,
          false,
          currentNode[":@"] ? Object.keys(currentNode[":@"]).length !== 0 : false,
          isLeafNode
        );
        if (textData !== void 0 && textData !== "")
          currentNode.add(this.options.textNodeName, textData);
        textData = "";
      }
      return textData;
    }
    function isItStopNode(stopNodes, jPath, currentTagName) {
      const allNodesExp = "*." + currentTagName;
      for (const stopNodePath in stopNodes) {
        const stopNodeExp = stopNodes[stopNodePath];
        if (allNodesExp === stopNodeExp || jPath === stopNodeExp)
          return true;
      }
      return false;
    }
    function tagExpWithClosingIndex(xmlData, i, closingChar = ">") {
      let attrBoundary;
      let tagExp = "";
      for (let index = i; index < xmlData.length; index++) {
        let ch = xmlData[index];
        if (attrBoundary) {
          if (ch === attrBoundary)
            attrBoundary = "";
        } else if (ch === '"' || ch === "'") {
          attrBoundary = ch;
        } else if (ch === closingChar[0]) {
          if (closingChar[1]) {
            if (xmlData[index + 1] === closingChar[1]) {
              return {
                data: tagExp,
                index
              };
            }
          } else {
            return {
              data: tagExp,
              index
            };
          }
        } else if (ch === "	") {
          ch = " ";
        }
        tagExp += ch;
      }
    }
    function findClosingIndex(xmlData, str, i, errMsg) {
      const closingIndex = xmlData.indexOf(str, i);
      if (closingIndex === -1) {
        throw new Error(errMsg);
      } else {
        return closingIndex + str.length - 1;
      }
    }
    function readTagExp(xmlData, i, removeNSPrefix, closingChar = ">") {
      const result = tagExpWithClosingIndex(xmlData, i + 1, closingChar);
      if (!result)
        return;
      let tagExp = result.data;
      const closeIndex = result.index;
      const separatorIndex = tagExp.search(/\s/);
      let tagName = tagExp;
      let attrExpPresent = true;
      if (separatorIndex !== -1) {
        tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, "");
        tagExp = tagExp.substr(separatorIndex + 1);
      }
      if (removeNSPrefix) {
        const colonIndex = tagName.indexOf(":");
        if (colonIndex !== -1) {
          tagName = tagName.substr(colonIndex + 1);
          attrExpPresent = tagName !== result.data.substr(colonIndex + 1);
        }
      }
      return {
        tagName,
        tagExp,
        closeIndex,
        attrExpPresent
      };
    }
    function readStopNodeData(xmlData, tagName, i) {
      const startIndex = i;
      let openTagCount = 1;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, `${tagName} is not closed`);
            let closeTagName = xmlData.substring(i + 2, closeIndex).trim();
            if (closeTagName === tagName) {
              openTagCount--;
              if (openTagCount === 0) {
                return {
                  tagContent: xmlData.substring(startIndex, i),
                  i: closeIndex
                };
              }
            }
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            const closeIndex = findClosingIndex(xmlData, "?>", i + 1, "StopNode is not closed.");
            i = closeIndex;
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            const closeIndex = findClosingIndex(xmlData, "-->", i + 3, "StopNode is not closed.");
            i = closeIndex;
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "StopNode is not closed.") - 2;
            i = closeIndex;
          } else {
            const tagData = readTagExp(xmlData, i, ">");
            if (tagData) {
              const openTagName = tagData && tagData.tagName;
              if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== "/") {
                openTagCount++;
              }
              i = tagData.closeIndex;
            }
          }
        }
      }
    }
    function parseValue(val2, shouldParse, options) {
      if (shouldParse && typeof val2 === "string") {
        const newval = val2.trim();
        if (newval === "true")
          return true;
        else if (newval === "false")
          return false;
        else
          return toNumber(val2, options);
      } else {
        if (util.isExist(val2)) {
          return val2;
        } else {
          return "";
        }
      }
    }
    module2.exports = OrderedObjParser;
  }
});

var require_node2json = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/xmlparser/node2json.js"(exports2) {
    "use strict";
    function prettify(node, options) {
      return compress(node, options);
    }
    function compress(arr, options, jPath) {
      let text;
      const compressedObj = {};
      for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const property = propName(tagObj);
        let newJpath = "";
        if (jPath === void 0)
          newJpath = property;
        else
          newJpath = jPath + "." + property;
        if (property === options.textNodeName) {
          if (text === void 0)
            text = tagObj[property];
          else
            text += "" + tagObj[property];
        } else if (property === void 0) {
          continue;
        } else if (tagObj[property]) {
          let val2 = compress(tagObj[property], options, newJpath);
          const isLeaf = isLeafTag(val2, options);
          if (tagObj[":@"]) {
            assignAttributes(val2, tagObj[":@"], newJpath, options);
          } else if (Object.keys(val2).length === 1 && val2[options.textNodeName] !== void 0 && !options.alwaysCreateTextNode) {
            val2 = val2[options.textNodeName];
          } else if (Object.keys(val2).length === 0) {
            if (options.alwaysCreateTextNode)
              val2[options.textNodeName] = "";
            else
              val2 = "";
          }
          if (compressedObj[property] !== void 0 && compressedObj.hasOwnProperty(property)) {
            if (!Array.isArray(compressedObj[property])) {
              compressedObj[property] = [compressedObj[property]];
            }
            compressedObj[property].push(val2);
          } else {
            if (options.isArray(property, newJpath, isLeaf)) {
              compressedObj[property] = [val2];
            } else {
              compressedObj[property] = val2;
            }
          }
        }
      }
      if (typeof text === "string") {
        if (text.length > 0)
          compressedObj[options.textNodeName] = text;
      } else if (text !== void 0)
        compressedObj[options.textNodeName] = text;
      return compressedObj;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (key !== ":@")
          return key;
      }
    }
    function assignAttributes(obj, attrMap, jpath, options) {
      if (attrMap) {
        const keys = Object.keys(attrMap);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          const atrrName = keys[i];
          if (options.isArray(atrrName, jpath + "." + atrrName, true, true)) {
            obj[atrrName] = [attrMap[atrrName]];
          } else {
            obj[atrrName] = attrMap[atrrName];
          }
        }
      }
    }
    function isLeafTag(obj, options) {
      const { textNodeName } = options;
      const propCount = Object.keys(obj).length;
      if (propCount === 0) {
        return true;
      }
      if (propCount === 1 && (obj[textNodeName] || typeof obj[textNodeName] === "boolean" || obj[textNodeName] === 0)) {
        return true;
      }
      return false;
    }
    exports2.prettify = prettify;
  }
});

var require_XMLParser = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js"(exports2, module2) {
    var { buildOptions } = require_OptionsBuilder();
    var OrderedObjParser = require_OrderedObjParser();
    var { prettify } = require_node2json();
    var validator = require_validator2();
    var XMLParser = class {
      constructor(options) {
        this.externalEntities = {};
        this.options = buildOptions(options);
      }
      /**
       * Parse XML dats to JS object 
       * @param {string|Buffer} xmlData 
       * @param {boolean|Object} validationOption 
       */
      parse(xmlData, validationOption) {
        if (typeof xmlData === "string") {
        } else if (xmlData.toString) {
          xmlData = xmlData.toString();
        } else {
          throw new Error("XML data is accepted in String or Bytes[] form.");
        }
        if (validationOption) {
          if (validationOption === true)
            validationOption = {};
          const result = validator.validate(xmlData, validationOption);
          if (result !== true) {
            throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);
          }
        }
        const orderedObjParser = new OrderedObjParser(this.options);
        orderedObjParser.addExternalEntities(this.externalEntities);
        const orderedResult = orderedObjParser.parseXml(xmlData);
        if (this.options.preserveOrder || orderedResult === void 0)
          return orderedResult;
        else
          return prettify(orderedResult, this.options);
      }
      /**
       * Add Entity which is not by default supported by this library
       * @param {string} key 
       * @param {string} value 
       */
      addEntity(key, value) {
        if (value.indexOf("&") !== -1) {
          throw new Error("Entity value can't have '&'");
        } else if (key.indexOf("&") !== -1 || key.indexOf(";") !== -1) {
          throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
        } else if (value === "&") {
          throw new Error("An entity with value '&' is not permitted");
        } else {
          this.externalEntities[key] = value;
        }
      }
    };
    module2.exports = XMLParser;
  }
});

var require_orderedJs2Xml = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js"(exports2, module2) {
    var EOL = "\n";
    function toXml(jArray, options) {
      let indentation = "";
      if (options.format && options.indentBy.length > 0) {
        indentation = EOL;
      }
      return arrToStr(jArray, options, "", indentation);
    }
    function arrToStr(arr, options, jPath, indentation) {
      let xmlStr = "";
      let isPreviousElementTag = false;
      for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const tagName = propName(tagObj);
        let newJPath = "";
        if (jPath.length === 0)
          newJPath = tagName;
        else
          newJPath = `${jPath}.${tagName}`;
        if (tagName === options.textNodeName) {
          let tagText = tagObj[tagName];
          if (!isStopNode(newJPath, options)) {
            tagText = options.tagValueProcessor(tagName, tagText);
            tagText = replaceEntitiesValue(tagText, options);
          }
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += tagText;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.cdataPropName) {
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.commentPropName) {
          xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;
          isPreviousElementTag = true;
          continue;
        } else if (tagName[0] === "?") {
          const attStr2 = attr_to_str(tagObj[":@"], options);
          const tempInd = tagName === "?xml" ? "" : indentation;
          let piTextNodeName = tagObj[tagName][0][options.textNodeName];
          piTextNodeName = piTextNodeName.length !== 0 ? " " + piTextNodeName : "";
          xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr2}?>`;
          isPreviousElementTag = true;
          continue;
        }
        let newIdentation = indentation;
        if (newIdentation !== "") {
          newIdentation += options.indentBy;
        }
        const attStr = attr_to_str(tagObj[":@"], options);
        const tagStart = indentation + `<${tagName}${attStr}`;
        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);
        if (options.unpairedTags.indexOf(tagName) !== -1) {
          if (options.suppressUnpairedNode)
            xmlStr += tagStart + ">";
          else
            xmlStr += tagStart + "/>";
        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {
          xmlStr += tagStart + "/>";
        } else if (tagValue && tagValue.endsWith(">")) {
          xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;
        } else {
          xmlStr += tagStart + ">";
          if (tagValue && indentation !== "" && (tagValue.includes("/>") || tagValue.includes("</"))) {
            xmlStr += indentation + options.indentBy + tagValue + indentation;
          } else {
            xmlStr += tagValue;
          }
          xmlStr += `</${tagName}>`;
        }
        isPreviousElementTag = true;
      }
      return xmlStr;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (key !== ":@")
          return key;
      }
    }
    function attr_to_str(attrMap, options) {
      let attrStr = "";
      if (attrMap && !options.ignoreAttributes) {
        for (let attr in attrMap) {
          let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);
          attrVal = replaceEntitiesValue(attrVal, options);
          if (attrVal === true && options.suppressBooleanAttributes) {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;
          } else {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}="${attrVal}"`;
          }
        }
      }
      return attrStr;
    }
    function isStopNode(jPath, options) {
      jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);
      let tagName = jPath.substr(jPath.lastIndexOf(".") + 1);
      for (let index in options.stopNodes) {
        if (options.stopNodes[index] === jPath || options.stopNodes[index] === "*." + tagName)
          return true;
      }
      return false;
    }
    function replaceEntitiesValue(textValue, options) {
      if (textValue && textValue.length > 0 && options.processEntities) {
        for (let i = 0; i < options.entities.length; i++) {
          const entity = options.entities[i];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    }
    module2.exports = toXml;
  }
});

var require_json2xml = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js"(exports2, module2) {
    "use strict";
    var buildFromOrderedJs = require_orderedJs2Xml();
    var defaultOptions = {
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      cdataPropName: false,
      format: false,
      indentBy: "  ",
      suppressEmptyNode: false,
      suppressUnpairedNode: true,
      suppressBooleanAttributes: true,
      tagValueProcessor: function(key, a) {
        return a;
      },
      attributeValueProcessor: function(attrName, a) {
        return a;
      },
      preserveOrder: false,
      commentPropName: false,
      unpairedTags: [],
      entities: [
        { regex: new RegExp("&", "g"), val: "&amp;" },
        //it must be on top
        { regex: new RegExp(">", "g"), val: "&gt;" },
        { regex: new RegExp("<", "g"), val: "&lt;" },
        { regex: new RegExp("'", "g"), val: "&apos;" },
        { regex: new RegExp('"', "g"), val: "&quot;" }
      ],
      processEntities: true,
      stopNodes: [],
      // transformTagName: false,
      // transformAttributeName: false,
      oneListGroup: false
    };
    function Builder(options) {
      this.options = Object.assign({}, defaultOptions, options);
      if (this.options.ignoreAttributes || this.options.attributesGroupName) {
        this.isAttribute = function() {
          return false;
        };
      } else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
      }
      this.processTextOrObjNode = processTextOrObjNode;
      if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = ">\n";
        this.newLine = "\n";
      } else {
        this.indentate = function() {
          return "";
        };
        this.tagEndChar = ">";
        this.newLine = "";
      }
    }
    Builder.prototype.build = function(jObj) {
      if (this.options.preserveOrder) {
        return buildFromOrderedJs(jObj, this.options);
      } else {
        if (Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1) {
          jObj = {
            [this.options.arrayNodeName]: jObj
          };
        }
        return this.j2x(jObj, 0).val;
      }
    };
    Builder.prototype.j2x = function(jObj, level) {
      let attrStr = "";
      let val2 = "";
      for (let key in jObj) {
        if (typeof jObj[key] === "undefined") {
        } else if (jObj[key] === null) {
          if (key[0] === "?")
            val2 += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
          else
            val2 += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
        } else if (jObj[key] instanceof Date) {
          val2 += this.buildTextValNode(jObj[key], key, "", level);
        } else if (typeof jObj[key] !== "object") {
          const attr = this.isAttribute(key);
          if (attr) {
            attrStr += this.buildAttrPairStr(attr, "" + jObj[key]);
          } else {
            if (key === this.options.textNodeName) {
              let newval = this.options.tagValueProcessor(key, "" + jObj[key]);
              val2 += this.replaceEntitiesValue(newval);
            } else {
              val2 += this.buildTextValNode(jObj[key], key, "", level);
            }
          }
        } else if (Array.isArray(jObj[key])) {
          const arrLen = jObj[key].length;
          let listTagVal = "";
          for (let j = 0; j < arrLen; j++) {
            const item = jObj[key][j];
            if (typeof item === "undefined") {
            } else if (item === null) {
              if (key[0] === "?")
                val2 += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
              else
                val2 += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
            } else if (typeof item === "object") {
              if (this.options.oneListGroup) {
                listTagVal += this.j2x(item, level + 1).val;
              } else {
                listTagVal += this.processTextOrObjNode(item, key, level);
              }
            } else {
              listTagVal += this.buildTextValNode(item, key, "", level);
            }
          }
          if (this.options.oneListGroup) {
            listTagVal = this.buildObjectNode(listTagVal, key, "", level);
          }
          val2 += listTagVal;
        } else {
          if (this.options.attributesGroupName && key === this.options.attributesGroupName) {
            const Ks = Object.keys(jObj[key]);
            const L = Ks.length;
            for (let j = 0; j < L; j++) {
              attrStr += this.buildAttrPairStr(Ks[j], "" + jObj[key][Ks[j]]);
            }
          } else {
            val2 += this.processTextOrObjNode(jObj[key], key, level);
          }
        }
      }
      return { attrStr, val: val2 };
    };
    Builder.prototype.buildAttrPairStr = function(attrName, val2) {
      val2 = this.options.attributeValueProcessor(attrName, "" + val2);
      val2 = this.replaceEntitiesValue(val2);
      if (this.options.suppressBooleanAttributes && val2 === "true") {
        return " " + attrName;
      } else
        return " " + attrName + '="' + val2 + '"';
    };
    function processTextOrObjNode(object, key, level) {
      const result = this.j2x(object, level + 1);
      if (object[this.options.textNodeName] !== void 0 && Object.keys(object).length === 1) {
        return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);
      } else {
        return this.buildObjectNode(result.val, key, result.attrStr, level);
      }
    }
    Builder.prototype.buildObjectNode = function(val2, key, attrStr, level) {
      if (val2 === "") {
        if (key[0] === "?")
          return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
        else {
          return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        }
      } else {
        let tagEndExp = "</" + key + this.tagEndChar;
        let piClosingChar = "";
        if (key[0] === "?") {
          piClosingChar = "?";
          tagEndExp = "";
        }
        if (attrStr && val2.indexOf("<") === -1) {
          return this.indentate(level) + "<" + key + attrStr + piClosingChar + ">" + val2 + tagEndExp;
        } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {
          return this.indentate(level) + `<!--${val2}-->` + this.newLine;
        } else {
          return this.indentate(level) + "<" + key + attrStr + piClosingChar + this.tagEndChar + val2 + this.indentate(level) + tagEndExp;
        }
      }
    };
    Builder.prototype.closeTag = function(key) {
      let closeTag = "";
      if (this.options.unpairedTags.indexOf(key) !== -1) {
        if (!this.options.suppressUnpairedNode)
          closeTag = "/";
      } else if (this.options.suppressEmptyNode) {
        closeTag = "/";
      } else {
        closeTag = `></${key}`;
      }
      return closeTag;
    };
    Builder.prototype.buildTextValNode = function(val2, key, attrStr, level) {
      if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {
        return this.indentate(level) + `<![CDATA[${val2}]]>` + this.newLine;
      } else if (this.options.commentPropName !== false && key === this.options.commentPropName) {
        return this.indentate(level) + `<!--${val2}-->` + this.newLine;
      } else if (key[0] === "?") {
        return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
      } else {
        let textValue = this.options.tagValueProcessor(key, val2);
        textValue = this.replaceEntitiesValue(textValue);
        if (textValue === "") {
          return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        } else {
          return this.indentate(level) + "<" + key + attrStr + ">" + textValue + "</" + key + this.tagEndChar;
        }
      }
    };
    Builder.prototype.replaceEntitiesValue = function(textValue) {
      if (textValue && textValue.length > 0 && this.options.processEntities) {
        for (let i = 0; i < this.options.entities.length; i++) {
          const entity = this.options.entities[i];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    };
    function indentate(level) {
      return this.options.indentBy.repeat(level);
    }
    function isAttribute(name) {
      if (name.startsWith(this.options.attributeNamePrefix)) {
        return name.substr(this.attrPrefixLen);
      } else {
        return false;
      }
    }
    module2.exports = Builder;
  }
});

var require_fxp = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/fxp.js"(exports2, module2) {
    "use strict";
    var validator = require_validator2();
    var XMLParser = require_XMLParser();
    var XMLBuilder = require_json2xml();
    module2.exports = {
      XMLParser,
      XMLValidator: validator,
      XMLBuilder
    };
  }
});

var require_Aws_query = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.de_GetSessionTokenCommand = exports2.de_GetFederationTokenCommand = exports2.de_GetCallerIdentityCommand = exports2.de_GetAccessKeyInfoCommand = exports2.de_DecodeAuthorizationMessageCommand = exports2.de_AssumeRoleWithWebIdentityCommand = exports2.de_AssumeRoleWithSAMLCommand = exports2.de_AssumeRoleCommand = exports2.se_GetSessionTokenCommand = exports2.se_GetFederationTokenCommand = exports2.se_GetCallerIdentityCommand = exports2.se_GetAccessKeyInfoCommand = exports2.se_DecodeAuthorizationMessageCommand = exports2.se_AssumeRoleWithWebIdentityCommand = exports2.se_AssumeRoleWithSAMLCommand = exports2.se_AssumeRoleCommand = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_1 = require_dist_cjs35();
    var fast_xml_parser_1 = require_fxp();
    var models_0_1 = require_models_0();
    var STSServiceException_1 = require_STSServiceException();
    var se_AssumeRoleCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleRequest(input, context),
        Action: "AssumeRole",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_AssumeRoleCommand = se_AssumeRoleCommand;
    var se_AssumeRoleWithSAMLCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleWithSAMLRequest(input, context),
        Action: "AssumeRoleWithSAML",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_AssumeRoleWithSAMLCommand = se_AssumeRoleWithSAMLCommand;
    var se_AssumeRoleWithWebIdentityCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleWithWebIdentityRequest(input, context),
        Action: "AssumeRoleWithWebIdentity",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_AssumeRoleWithWebIdentityCommand = se_AssumeRoleWithWebIdentityCommand;
    var se_DecodeAuthorizationMessageCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DecodeAuthorizationMessageRequest(input, context),
        Action: "DecodeAuthorizationMessage",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DecodeAuthorizationMessageCommand = se_DecodeAuthorizationMessageCommand;
    var se_GetAccessKeyInfoCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetAccessKeyInfoRequest(input, context),
        Action: "GetAccessKeyInfo",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_GetAccessKeyInfoCommand = se_GetAccessKeyInfoCommand;
    var se_GetCallerIdentityCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetCallerIdentityRequest(input, context),
        Action: "GetCallerIdentity",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_GetCallerIdentityCommand = se_GetCallerIdentityCommand;
    var se_GetFederationTokenCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetFederationTokenRequest(input, context),
        Action: "GetFederationToken",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_GetFederationTokenCommand = se_GetFederationTokenCommand;
    var se_GetSessionTokenCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetSessionTokenRequest(input, context),
        Action: "GetSessionToken",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_GetSessionTokenCommand = se_GetSessionTokenCommand;
    var de_AssumeRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_AssumeRoleCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_AssumeRoleResponse(data.AssumeRoleResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_AssumeRoleCommand = de_AssumeRoleCommand;
    var de_AssumeRoleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_AssumeRoleWithSAMLCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_AssumeRoleWithSAMLCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_AssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_AssumeRoleWithSAMLCommand = de_AssumeRoleWithSAMLCommand;
    var de_AssumeRoleWithSAMLCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_AssumeRoleWithWebIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_AssumeRoleWithWebIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_AssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_AssumeRoleWithWebIdentityCommand = de_AssumeRoleWithWebIdentityCommand;
    var de_AssumeRoleWithWebIdentityCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "IDPCommunicationError":
        case "com.amazonaws.sts#IDPCommunicationErrorException":
          throw await de_IDPCommunicationErrorExceptionRes(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DecodeAuthorizationMessageCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DecodeAuthorizationMessageCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DecodeAuthorizationMessageCommand = de_DecodeAuthorizationMessageCommand;
    var de_DecodeAuthorizationMessageCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidAuthorizationMessageException":
        case "com.amazonaws.sts#InvalidAuthorizationMessageException":
          throw await de_InvalidAuthorizationMessageExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_GetAccessKeyInfoCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetAccessKeyInfoCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_GetAccessKeyInfoCommand = de_GetAccessKeyInfoCommand;
    var de_GetAccessKeyInfoCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
    };
    var de_GetCallerIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetCallerIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetCallerIdentityResponse(data.GetCallerIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_GetCallerIdentityCommand = de_GetCallerIdentityCommand;
    var de_GetCallerIdentityCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
    };
    var de_GetFederationTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetFederationTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetFederationTokenResponse(data.GetFederationTokenResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_GetFederationTokenCommand = de_GetFederationTokenCommand;
    var de_GetFederationTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_GetSessionTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetSessionTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetSessionTokenResponse(data.GetSessionTokenResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_GetSessionTokenCommand = de_GetSessionTokenCommand;
    var de_GetSessionTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_ExpiredTokenExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ExpiredTokenException(body.Error, context);
      const exception = new models_0_1.ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_IDPCommunicationErrorExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_IDPCommunicationErrorException(body.Error, context);
      const exception = new models_0_1.IDPCommunicationErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_IDPRejectedClaimExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_IDPRejectedClaimException(body.Error, context);
      const exception = new models_0_1.IDPRejectedClaimException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidAuthorizationMessageExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidAuthorizationMessageException(body.Error, context);
      const exception = new models_0_1.InvalidAuthorizationMessageException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidIdentityTokenExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidIdentityTokenException(body.Error, context);
      const exception = new models_0_1.InvalidIdentityTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_MalformedPolicyDocumentExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_MalformedPolicyDocumentException(body.Error, context);
      const exception = new models_0_1.MalformedPolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_PackedPolicyTooLargeExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_PackedPolicyTooLargeException(body.Error, context);
      const exception = new models_0_1.PackedPolicyTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_RegionDisabledExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_RegionDisabledException(body.Error, context);
      const exception = new models_0_1.RegionDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var se_AssumeRoleRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.RoleSessionName != null) {
        entries["RoleSessionName"] = input.RoleSessionName;
      }
      if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.Tags != null) {
        const memberEntries = se_tagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.TransitiveTagKeys != null) {
        const memberEntries = se_tagKeyListType(input.TransitiveTagKeys, context);
        if (input.TransitiveTagKeys?.length === 0) {
          entries.TransitiveTagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TransitiveTagKeys.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ExternalId != null) {
        entries["ExternalId"] = input.ExternalId;
      }
      if (input.SerialNumber != null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.TokenCode != null) {
        entries["TokenCode"] = input.TokenCode;
      }
      if (input.SourceIdentity != null) {
        entries["SourceIdentity"] = input.SourceIdentity;
      }
      if (input.ProvidedContexts != null) {
        const memberEntries = se_ProvidedContextsListType(input.ProvidedContexts, context);
        if (input.ProvidedContexts?.length === 0) {
          entries.ProvidedContexts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ProvidedContexts.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_AssumeRoleWithSAMLRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.PrincipalArn != null) {
        entries["PrincipalArn"] = input.PrincipalArn;
      }
      if (input.SAMLAssertion != null) {
        entries["SAMLAssertion"] = input.SAMLAssertion;
      }
      if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      return entries;
    };
    var se_AssumeRoleWithWebIdentityRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.RoleSessionName != null) {
        entries["RoleSessionName"] = input.RoleSessionName;
      }
      if (input.WebIdentityToken != null) {
        entries["WebIdentityToken"] = input.WebIdentityToken;
      }
      if (input.ProviderId != null) {
        entries["ProviderId"] = input.ProviderId;
      }
      if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      return entries;
    };
    var se_DecodeAuthorizationMessageRequest = (input, context) => {
      const entries = {};
      if (input.EncodedMessage != null) {
        entries["EncodedMessage"] = input.EncodedMessage;
      }
      return entries;
    };
    var se_GetAccessKeyInfoRequest = (input, context) => {
      const entries = {};
      if (input.AccessKeyId != null) {
        entries["AccessKeyId"] = input.AccessKeyId;
      }
      return entries;
    };
    var se_GetCallerIdentityRequest = (input, context) => {
      const entries = {};
      return entries;
    };
    var se_GetFederationTokenRequest = (input, context) => {
      const entries = {};
      if (input.Name != null) {
        entries["Name"] = input.Name;
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.Tags != null) {
        const memberEntries = se_tagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_GetSessionTokenRequest = (input, context) => {
      const entries = {};
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.SerialNumber != null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.TokenCode != null) {
        entries["TokenCode"] = input.TokenCode;
      }
      return entries;
    };
    var se_policyDescriptorListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_PolicyDescriptorType(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var se_PolicyDescriptorType = (input, context) => {
      const entries = {};
      if (input.arn != null) {
        entries["arn"] = input.arn;
      }
      return entries;
    };
    var se_ProvidedContext = (input, context) => {
      const entries = {};
      if (input.ProviderArn != null) {
        entries["ProviderArn"] = input.ProviderArn;
      }
      if (input.ContextAssertion != null) {
        entries["ContextAssertion"] = input.ContextAssertion;
      }
      return entries;
    };
    var se_ProvidedContextsListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_ProvidedContext(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var se_Tag = (input, context) => {
      const entries = {};
      if (input.Key != null) {
        entries["Key"] = input.Key;
      }
      if (input.Value != null) {
        entries["Value"] = input.Value;
      }
      return entries;
    };
    var se_tagKeyListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var se_tagListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_Tag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var de_AssumedRoleUser = (output, context) => {
      const contents = {};
      if (output["AssumedRoleId"] !== void 0) {
        contents.AssumedRoleId = (0, smithy_client_1.expectString)(output["AssumedRoleId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var de_AssumeRoleResponse = (output, context) => {
      const contents = {};
      if (output["Credentials"] !== void 0) {
        contents.Credentials = de_Credentials(output["Credentials"], context);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = de_AssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var de_AssumeRoleWithSAMLResponse = (output, context) => {
      const contents = {};
      if (output["Credentials"] !== void 0) {
        contents.Credentials = de_Credentials(output["Credentials"], context);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = de_AssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["Subject"] !== void 0) {
        contents.Subject = (0, smithy_client_1.expectString)(output["Subject"]);
      }
      if (output["SubjectType"] !== void 0) {
        contents.SubjectType = (0, smithy_client_1.expectString)(output["SubjectType"]);
      }
      if (output["Issuer"] !== void 0) {
        contents.Issuer = (0, smithy_client_1.expectString)(output["Issuer"]);
      }
      if (output["Audience"] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(output["Audience"]);
      }
      if (output["NameQualifier"] !== void 0) {
        contents.NameQualifier = (0, smithy_client_1.expectString)(output["NameQualifier"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var de_AssumeRoleWithWebIdentityResponse = (output, context) => {
      const contents = {};
      if (output["Credentials"] !== void 0) {
        contents.Credentials = de_Credentials(output["Credentials"], context);
      }
      if (output["SubjectFromWebIdentityToken"] !== void 0) {
        contents.SubjectFromWebIdentityToken = (0, smithy_client_1.expectString)(output["SubjectFromWebIdentityToken"]);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = de_AssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["Provider"] !== void 0) {
        contents.Provider = (0, smithy_client_1.expectString)(output["Provider"]);
      }
      if (output["Audience"] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(output["Audience"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var de_Credentials = (output, context) => {
      const contents = {};
      if (output["AccessKeyId"] !== void 0) {
        contents.AccessKeyId = (0, smithy_client_1.expectString)(output["AccessKeyId"]);
      }
      if (output["SecretAccessKey"] !== void 0) {
        contents.SecretAccessKey = (0, smithy_client_1.expectString)(output["SecretAccessKey"]);
      }
      if (output["SessionToken"] !== void 0) {
        contents.SessionToken = (0, smithy_client_1.expectString)(output["SessionToken"]);
      }
      if (output["Expiration"] !== void 0) {
        contents.Expiration = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["Expiration"]));
      }
      return contents;
    };
    var de_DecodeAuthorizationMessageResponse = (output, context) => {
      const contents = {};
      if (output["DecodedMessage"] !== void 0) {
        contents.DecodedMessage = (0, smithy_client_1.expectString)(output["DecodedMessage"]);
      }
      return contents;
    };
    var de_ExpiredTokenException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_FederatedUser = (output, context) => {
      const contents = {};
      if (output["FederatedUserId"] !== void 0) {
        contents.FederatedUserId = (0, smithy_client_1.expectString)(output["FederatedUserId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var de_GetAccessKeyInfoResponse = (output, context) => {
      const contents = {};
      if (output["Account"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
      }
      return contents;
    };
    var de_GetCallerIdentityResponse = (output, context) => {
      const contents = {};
      if (output["UserId"] !== void 0) {
        contents.UserId = (0, smithy_client_1.expectString)(output["UserId"]);
      }
      if (output["Account"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var de_GetFederationTokenResponse = (output, context) => {
      const contents = {};
      if (output["Credentials"] !== void 0) {
        contents.Credentials = de_Credentials(output["Credentials"], context);
      }
      if (output["FederatedUser"] !== void 0) {
        contents.FederatedUser = de_FederatedUser(output["FederatedUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      return contents;
    };
    var de_GetSessionTokenResponse = (output, context) => {
      const contents = {};
      if (output["Credentials"] !== void 0) {
        contents.Credentials = de_Credentials(output["Credentials"], context);
      }
      return contents;
    };
    var de_IDPCommunicationErrorException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_IDPRejectedClaimException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_InvalidAuthorizationMessageException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_InvalidIdentityTokenException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_MalformedPolicyDocumentException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_PackedPolicyTooLargeException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_RegionDisabledException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
    var throwDefaultError = (0, smithy_client_1.withBaseException)(STSServiceException_1.STSServiceException);
    var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    var SHARED_HEADERS = {
      "content-type": "application/x-www-form-urlencoded"
    };
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parser = new fast_xml_parser_1.XMLParser({
          attributeNamePrefix: "",
          htmlEntities: true,
          ignoreAttributes: false,
          ignoreDeclaration: true,
          parseTagValue: false,
          trimValues: false,
          tagValueProcessor: (_, val2) => val2.trim() === "" && val2.includes("\n") ? "" : void 0
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        const parsedObj = parser.parse(encoded);
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
      }
      return value;
    };
    var buildFormUrlencodedString = (formEntries) => Object.entries(formEntries).map(([key, value]) => (0, smithy_client_1.extendedEncodeURIComponent)(key) + "=" + (0, smithy_client_1.extendedEncodeURIComponent)(value)).join("&");
    var loadQueryErrorCode = (output, data) => {
      if (data.Error?.Code !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    };
  }
});

var require_AssumeRoleCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AssumeRoleCommand = exports2.$Command = void 0;
    var middleware_signing_1 = require_dist_cjs16();
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleCommand = class _AssumeRoleCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _AssumeRoleCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.AssumeRoleResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_AssumeRoleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_AssumeRoleCommand)(output, context);
      }
    };
    exports2.AssumeRoleCommand = AssumeRoleCommand;
  }
});

var require_AssumeRoleWithWebIdentityCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AssumeRoleWithWebIdentityCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleWithWebIdentityCommand = class _AssumeRoleWithWebIdentityCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _AssumeRoleWithWebIdentityCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleWithWebIdentityCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_AssumeRoleWithWebIdentityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_AssumeRoleWithWebIdentityCommand)(output, context);
      }
    };
    exports2.AssumeRoleWithWebIdentityCommand = AssumeRoleWithWebIdentityCommand;
  }
});

var require_defaultStsRoleAssumers = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decorateDefaultCredentialProvider = exports2.getDefaultRoleAssumerWithWebIdentity = exports2.getDefaultRoleAssumer = void 0;
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
    var ASSUME_ROLE_DEFAULT_REGION = "us-east-1";
    var decorateDefaultRegion = (region) => {
      if (typeof region !== "function") {
        return region === void 0 ? ASSUME_ROLE_DEFAULT_REGION : region;
      }
      return async () => {
        try {
          return await region();
        } catch (e) {
          return ASSUME_ROLE_DEFAULT_REGION;
        }
      };
    };
    var getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {
      let stsClient;
      let closureSourceCreds;
      return async (sourceCreds, params) => {
        closureSourceCreds = sourceCreds;
        if (!stsClient) {
          const { logger, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor({
            logger,
            credentialDefaultProvider: () => async () => closureSourceCreds,
            region: decorateDefaultRegion(region || stsOptions.region),
            ...requestHandler ? { requestHandler } : {}
          });
        }
        const { Credentials } = await stsClient.send(new AssumeRoleCommand_1.AssumeRoleCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration
        };
      };
    };
    exports2.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {
      let stsClient;
      return async (params) => {
        if (!stsClient) {
          const { logger, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor({
            logger,
            region: decorateDefaultRegion(region || stsOptions.region),
            ...requestHandler ? { requestHandler } : {}
          });
        }
        const { Credentials } = await stsClient.send(new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration
        };
      };
    };
    exports2.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) => provider({
      roleAssumer: (0, exports2.getDefaultRoleAssumer)(input, input.stsClientCtor),
      roleAssumerWithWebIdentity: (0, exports2.getDefaultRoleAssumerWithWebIdentity)(input, input.stsClientCtor),
      ...input
    });
    exports2.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
  }
});

var require_fromEnv = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromEnv = exports2.ENV_EXPIRATION = exports2.ENV_SESSION = exports2.ENV_SECRET = exports2.ENV_KEY = void 0;
    var property_provider_1 = require_dist_cjs6();
    exports2.ENV_KEY = "AWS_ACCESS_KEY_ID";
    exports2.ENV_SECRET = "AWS_SECRET_ACCESS_KEY";
    exports2.ENV_SESSION = "AWS_SESSION_TOKEN";
    exports2.ENV_EXPIRATION = "AWS_CREDENTIAL_EXPIRATION";
    var fromEnv = () => async () => {
      const accessKeyId = process.env[exports2.ENV_KEY];
      const secretAccessKey = process.env[exports2.ENV_SECRET];
      const sessionToken = process.env[exports2.ENV_SESSION];
      const expiry = process.env[exports2.ENV_EXPIRATION];
      if (accessKeyId && secretAccessKey) {
        return {
          accessKeyId,
          secretAccessKey,
          ...sessionToken && { sessionToken },
          ...expiry && { expiration: new Date(expiry) }
        };
      }
      throw new property_provider_1.CredentialsProviderError("Unable to find environment variable credentials.");
    };
    exports2.fromEnv = fromEnv;
  }
});

var require_dist_cjs37 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromEnv(), exports2);
  }
});

var require_getHomeDir = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getHomeDir = void 0;
    var os_1 = require("os");
    var path_1 = require("path");
    var process_1 = require("process");
    var homeDirCache = {};
    var getHomeDirCacheKey = () => {
      if (process_1.geteuid) {
        return `${(0, process_1.geteuid)()}`;
      }
      return "DEFAULT";
    };
    var getHomeDir = () => {
      const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;
      if (HOME)
        return HOME;
      if (USERPROFILE)
        return USERPROFILE;
      if (HOMEPATH)
        return `${HOMEDRIVE}${HOMEPATH}`;
      const homeDirCacheKey = getHomeDirCacheKey();
      if (!homeDirCache[homeDirCacheKey])
        homeDirCache[homeDirCacheKey] = (0, os_1.homedir)();
      return homeDirCache[homeDirCacheKey];
    };
    exports2.getHomeDir = getHomeDir;
  }
});

var require_getProfileName = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/getProfileName.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getProfileName = exports2.DEFAULT_PROFILE = exports2.ENV_PROFILE = void 0;
    exports2.ENV_PROFILE = "AWS_PROFILE";
    exports2.DEFAULT_PROFILE = "default";
    var getProfileName = (init) => init.profile || process.env[exports2.ENV_PROFILE] || exports2.DEFAULT_PROFILE;
    exports2.getProfileName = getProfileName;
  }
});

var require_getSSOTokenFilepath = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSSOTokenFilepath = void 0;
    var crypto_1 = require("crypto");
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    var getSSOTokenFilepath = (id) => {
      const hasher = (0, crypto_1.createHash)("sha1");
      const cacheName = hasher.update(id).digest("hex");
      return (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "sso", "cache", `${cacheName}.json`);
    };
    exports2.getSSOTokenFilepath = getSSOTokenFilepath;
  }
});

var require_getSSOTokenFromFile = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSSOTokenFromFile = void 0;
    var fs_1 = require("fs");
    var getSSOTokenFilepath_1 = require_getSSOTokenFilepath();
    var { readFile } = fs_1.promises;
    var getSSOTokenFromFile = async (id) => {
      const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(id);
      const ssoTokenText = await readFile(ssoTokenFilepath, "utf8");
      return JSON.parse(ssoTokenText);
    };
    exports2.getSSOTokenFromFile = getSSOTokenFromFile;
  }
});

var require_getConfigFilepath = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/getConfigFilepath.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getConfigFilepath = exports2.ENV_CONFIG_PATH = void 0;
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    exports2.ENV_CONFIG_PATH = "AWS_CONFIG_FILE";
    var getConfigFilepath = () => process.env[exports2.ENV_CONFIG_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "config");
    exports2.getConfigFilepath = getConfigFilepath;
  }
});

var require_getCredentialsFilepath = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCredentialsFilepath = exports2.ENV_CREDENTIALS_PATH = void 0;
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    exports2.ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
    var getCredentialsFilepath = () => process.env[exports2.ENV_CREDENTIALS_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "credentials");
    exports2.getCredentialsFilepath = getCredentialsFilepath;
  }
});

var require_getProfileData = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/getProfileData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getProfileData = void 0;
    var profileKeyRegex = /^profile\s(["'])?([^\1]+)\1$/;
    var getProfileData = (data) => Object.entries(data).filter(([key]) => profileKeyRegex.test(key)).reduce((acc, [key, value]) => ({ ...acc, [profileKeyRegex.exec(key)[2]]: value }), {
      ...data.default && { default: data.default }
    });
    exports2.getProfileData = getProfileData;
  }
});

var require_parseIni = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/parseIni.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseIni = void 0;
    var profileNameBlockList = ["__proto__", "profile __proto__"];
    var parseIni = (iniData) => {
      const map = {};
      let currentSection;
      for (let line of iniData.split(/\r?\n/)) {
        line = line.split(/(^|\s)[;#]/)[0].trim();
        const isSection = line[0] === "[" && line[line.length - 1] === "]";
        if (isSection) {
          currentSection = line.substring(1, line.length - 1);
          if (profileNameBlockList.includes(currentSection)) {
            throw new Error(`Found invalid profile name "${currentSection}"`);
          }
        } else if (currentSection) {
          const indexOfEqualsSign = line.indexOf("=");
          const start = 0;
          const end = line.length - 1;
          const isAssignment = indexOfEqualsSign !== -1 && indexOfEqualsSign !== start && indexOfEqualsSign !== end;
          if (isAssignment) {
            const [name, value] = [
              line.substring(0, indexOfEqualsSign).trim(),
              line.substring(indexOfEqualsSign + 1).trim()
            ];
            map[currentSection] = map[currentSection] || {};
            map[currentSection][name] = value;
          }
        }
      }
      return map;
    };
    exports2.parseIni = parseIni;
  }
});

var require_slurpFile = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/slurpFile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.slurpFile = void 0;
    var fs_1 = require("fs");
    var { readFile } = fs_1.promises;
    var filePromisesHash = {};
    var slurpFile = (path, options) => {
      if (!filePromisesHash[path] || (options === null || options === void 0 ? void 0 : options.ignoreCache)) {
        filePromisesHash[path] = readFile(path, "utf8");
      }
      return filePromisesHash[path];
    };
    exports2.slurpFile = slurpFile;
  }
});

var require_loadSharedConfigFiles = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.loadSharedConfigFiles = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath();
    var getCredentialsFilepath_1 = require_getCredentialsFilepath();
    var getProfileData_1 = require_getProfileData();
    var parseIni_1 = require_parseIni();
    var slurpFile_1 = require_slurpFile();
    var swallowError = () => ({});
    var loadSharedConfigFiles = async (init = {}) => {
      const { filepath = (0, getCredentialsFilepath_1.getCredentialsFilepath)(), configFilepath = (0, getConfigFilepath_1.getConfigFilepath)() } = init;
      const parsedFiles = await Promise.all([
        (0, slurpFile_1.slurpFile)(configFilepath, {
          ignoreCache: init.ignoreCache
        }).then(parseIni_1.parseIni).then(getProfileData_1.getProfileData).catch(swallowError),
        (0, slurpFile_1.slurpFile)(filepath, {
          ignoreCache: init.ignoreCache
        }).then(parseIni_1.parseIni).catch(swallowError)
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1]
      };
    };
    exports2.loadSharedConfigFiles = loadSharedConfigFiles;
  }
});

var require_getSsoSessionData = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSsoSessionData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSsoSessionData = void 0;
    var ssoSessionKeyRegex = /^sso-session\s(["'])?([^\1]+)\1$/;
    var getSsoSessionData = (data) => Object.entries(data).filter(([key]) => ssoSessionKeyRegex.test(key)).reduce((acc, [key, value]) => ({ ...acc, [ssoSessionKeyRegex.exec(key)[2]]: value }), {});
    exports2.getSsoSessionData = getSsoSessionData;
  }
});

var require_loadSsoSessionData = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/loadSsoSessionData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.loadSsoSessionData = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath();
    var getSsoSessionData_1 = require_getSsoSessionData();
    var parseIni_1 = require_parseIni();
    var slurpFile_1 = require_slurpFile();
    var swallowError = () => ({});
    var loadSsoSessionData = async (init = {}) => {
      var _a;
      return (0, slurpFile_1.slurpFile)((_a = init.configFilepath) !== null && _a !== void 0 ? _a : (0, getConfigFilepath_1.getConfigFilepath)()).then(parseIni_1.parseIni).then(getSsoSessionData_1.getSsoSessionData).catch(swallowError);
    };
    exports2.loadSsoSessionData = loadSsoSessionData;
  }
});

var require_mergeConfigFiles = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/mergeConfigFiles.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mergeConfigFiles = void 0;
    var mergeConfigFiles = (...files) => {
      const merged = {};
      for (const file of files) {
        for (const [key, values] of Object.entries(file)) {
          if (merged[key] !== void 0) {
            Object.assign(merged[key], values);
          } else {
            merged[key] = values;
          }
        }
      }
      return merged;
    };
    exports2.mergeConfigFiles = mergeConfigFiles;
  }
});

var require_parseKnownFiles = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/parseKnownFiles.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseKnownFiles = void 0;
    var loadSharedConfigFiles_1 = require_loadSharedConfigFiles();
    var mergeConfigFiles_1 = require_mergeConfigFiles();
    var parseKnownFiles = async (init) => {
      const parsedFiles = await (0, loadSharedConfigFiles_1.loadSharedConfigFiles)(init);
      return (0, mergeConfigFiles_1.mergeConfigFiles)(parsedFiles.configFile, parsedFiles.credentialsFile);
    };
    exports2.parseKnownFiles = parseKnownFiles;
  }
});

var require_types5 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_dist_cjs38 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/shared-ini-file-loader/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_getHomeDir(), exports2);
    tslib_1.__exportStar(require_getProfileName(), exports2);
    tslib_1.__exportStar(require_getSSOTokenFilepath(), exports2);
    tslib_1.__exportStar(require_getSSOTokenFromFile(), exports2);
    tslib_1.__exportStar(require_loadSharedConfigFiles(), exports2);
    tslib_1.__exportStar(require_loadSsoSessionData(), exports2);
    tslib_1.__exportStar(require_parseKnownFiles(), exports2);
    tslib_1.__exportStar(require_types5(), exports2);
  }
});

var require_httpRequest2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.httpRequest = void 0;
    var property_provider_1 = require_dist_cjs6();
    var buffer_1 = require("buffer");
    var http_1 = require("http");
    function httpRequest(options) {
      return new Promise((resolve, reject) => {
        var _a;
        const req = (0, http_1.request)({
          method: "GET",
          ...options,
          hostname: (_a = options.hostname) === null || _a === void 0 ? void 0 : _a.replace(/^\[(.+)\]$/, "$1")
        });
        req.on("error", (err) => {
          reject(Object.assign(new property_provider_1.ProviderError("Unable to connect to instance metadata service"), err));
          req.destroy();
        });
        req.on("timeout", () => {
          reject(new property_provider_1.ProviderError("TimeoutError from instance metadata service"));
          req.destroy();
        });
        req.on("response", (res) => {
          const { statusCode = 400 } = res;
          if (statusCode < 200 || 300 <= statusCode) {
            reject(Object.assign(new property_provider_1.ProviderError("Error response received from instance metadata service"), { statusCode }));
            req.destroy();
          }
          const chunks = [];
          res.on("data", (chunk) => {
            chunks.push(chunk);
          });
          res.on("end", () => {
            resolve(buffer_1.Buffer.concat(chunks));
            req.destroy();
          });
        });
        req.end();
      });
    }
    exports2.httpRequest = httpRequest;
  }
});

var require_ImdsCredentials = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromImdsCredentials = exports2.isImdsCredentials = void 0;
    var isImdsCredentials = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.AccessKeyId === "string" && typeof arg.SecretAccessKey === "string" && typeof arg.Token === "string" && typeof arg.Expiration === "string";
    exports2.isImdsCredentials = isImdsCredentials;
    var fromImdsCredentials = (creds) => ({
      accessKeyId: creds.AccessKeyId,
      secretAccessKey: creds.SecretAccessKey,
      sessionToken: creds.Token,
      expiration: new Date(creds.Expiration)
    });
    exports2.fromImdsCredentials = fromImdsCredentials;
  }
});

var require_RemoteProviderInit = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.providerConfigFromInit = exports2.DEFAULT_MAX_RETRIES = exports2.DEFAULT_TIMEOUT = void 0;
    exports2.DEFAULT_TIMEOUT = 1e3;
    exports2.DEFAULT_MAX_RETRIES = 0;
    var providerConfigFromInit = ({ maxRetries = exports2.DEFAULT_MAX_RETRIES, timeout = exports2.DEFAULT_TIMEOUT }) => ({ maxRetries, timeout });
    exports2.providerConfigFromInit = providerConfigFromInit;
  }
});

var require_retry3 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/credential-provider-imds/dist-cjs/remoteProvider/retry.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.retry = void 0;
    var retry = (toRetry, maxRetries) => {
      let promise = toRetry();
      for (let i = 0; i < maxRetries; i++) {
        promise = promise.catch(toRetry);
      }
      return promise;
    };
    exports2.retry = retry;
  }
});

var require_fromContainerMetadata = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/credential-provider-imds/dist-cjs/fromContainerMetadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromContainerMetadata = exports2.ENV_CMDS_AUTH_TOKEN = exports2.ENV_CMDS_RELATIVE_URI = exports2.ENV_CMDS_FULL_URI = void 0;
    var property_provider_1 = require_dist_cjs6();
    var url_1 = require("url");
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry3();
    exports2.ENV_CMDS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
    exports2.ENV_CMDS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
    exports2.ENV_CMDS_AUTH_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
    var fromContainerMetadata = (init = {}) => {
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      return () => (0, retry_1.retry)(async () => {
        const requestOptions = await getCmdsUri();
        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));
        if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
          throw new property_provider_1.CredentialsProviderError("Invalid response received from instance metadata service.");
        }
        return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
      }, maxRetries);
    };
    exports2.fromContainerMetadata = fromContainerMetadata;
    var requestFromEcsImds = async (timeout, options) => {
      if (process.env[exports2.ENV_CMDS_AUTH_TOKEN]) {
        options.headers = {
          ...options.headers,
          Authorization: process.env[exports2.ENV_CMDS_AUTH_TOKEN]
        };
      }
      const buffer = await (0, httpRequest_1.httpRequest)({
        ...options,
        timeout
      });
      return buffer.toString();
    };
    var CMDS_IP = "169.254.170.2";
    var GREENGRASS_HOSTS = {
      localhost: true,
      "127.0.0.1": true
    };
    var GREENGRASS_PROTOCOLS = {
      "http:": true,
      "https:": true
    };
    var getCmdsUri = async () => {
      if (process.env[exports2.ENV_CMDS_RELATIVE_URI]) {
        return {
          hostname: CMDS_IP,
          path: process.env[exports2.ENV_CMDS_RELATIVE_URI]
        };
      }
      if (process.env[exports2.ENV_CMDS_FULL_URI]) {
        const parsed = (0, url_1.parse)(process.env[exports2.ENV_CMDS_FULL_URI]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
          throw new property_provider_1.CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, false);
        }
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
          throw new property_provider_1.CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, false);
        }
        return {
          ...parsed,
          port: parsed.port ? parseInt(parsed.port, 10) : void 0
        };
      }
      throw new property_provider_1.CredentialsProviderError(`The container metadata credential provider cannot be used unless the ${exports2.ENV_CMDS_RELATIVE_URI} or ${exports2.ENV_CMDS_FULL_URI} environment variable is set`, false);
    };
  }
});

var require_fromEnv2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-config-provider/dist-cjs/fromEnv.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromEnv = void 0;
    var property_provider_1 = require_dist_cjs6();
    var fromEnv = (envVarSelector) => async () => {
      try {
        const config = envVarSelector(process.env);
        if (config === void 0) {
          throw new Error();
        }
        return config;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config from environment variables with getter: ${envVarSelector}`);
      }
    };
    exports2.fromEnv = fromEnv;
  }
});

var require_fromSharedConfigFiles = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-config-provider/dist-cjs/fromSharedConfigFiles.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromSharedConfigFiles = void 0;
    var property_provider_1 = require_dist_cjs6();
    var shared_ini_file_loader_1 = require_dist_cjs38();
    var fromSharedConfigFiles = (configSelector, { preferredFile = "config", ...init } = {}) => async () => {
      const profile = (0, shared_ini_file_loader_1.getProfileName)(init);
      const { configFile, credentialsFile } = await (0, shared_ini_file_loader_1.loadSharedConfigFiles)(init);
      const profileFromCredentials = credentialsFile[profile] || {};
      const profileFromConfig = configFile[profile] || {};
      const mergedProfile = preferredFile === "config" ? { ...profileFromCredentials, ...profileFromConfig } : { ...profileFromConfig, ...profileFromCredentials };
      try {
        const configValue = configSelector(mergedProfile);
        if (configValue === void 0) {
          throw new Error();
        }
        return configValue;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config for profile ${profile} in SDK configuration files with getter: ${configSelector}`);
      }
    };
    exports2.fromSharedConfigFiles = fromSharedConfigFiles;
  }
});

var require_fromStatic2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-config-provider/dist-cjs/fromStatic.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs6();
    var isFunction = (func) => typeof func === "function";
    var fromStatic = (defaultValue) => isFunction(defaultValue) ? async () => await defaultValue() : (0, property_provider_1.fromStatic)(defaultValue);
    exports2.fromStatic = fromStatic;
  }
});

var require_configLoader = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-config-provider/dist-cjs/configLoader.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.loadConfig = void 0;
    var property_provider_1 = require_dist_cjs6();
    var fromEnv_1 = require_fromEnv2();
    var fromSharedConfigFiles_1 = require_fromSharedConfigFiles();
    var fromStatic_1 = require_fromStatic2();
    var loadConfig = ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)((0, fromEnv_1.fromEnv)(environmentVariableSelector), (0, fromSharedConfigFiles_1.fromSharedConfigFiles)(configFileSelector, configuration), (0, fromStatic_1.fromStatic)(defaultValue)));
    exports2.loadConfig = loadConfig;
  }
});

var require_dist_cjs39 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/node-config-provider/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configLoader(), exports2);
  }
});

var require_Endpoint = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/credential-provider-imds/dist-cjs/config/Endpoint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Endpoint = void 0;
    var Endpoint;
    (function(Endpoint2) {
      Endpoint2["IPv4"] = "http://169.254.169.254";
      Endpoint2["IPv6"] = "http://[fd00:ec2::254]";
    })(Endpoint = exports2.Endpoint || (exports2.Endpoint = {}));
  }
});

var require_EndpointConfigOptions = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ENDPOINT_CONFIG_OPTIONS = exports2.CONFIG_ENDPOINT_NAME = exports2.ENV_ENDPOINT_NAME = void 0;
    exports2.ENV_ENDPOINT_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT";
    exports2.CONFIG_ENDPOINT_NAME = "ec2_metadata_service_endpoint";
    exports2.ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports2.ENV_ENDPOINT_NAME],
      configFileSelector: (profile) => profile[exports2.CONFIG_ENDPOINT_NAME],
      default: void 0
    };
  }
});

var require_EndpointMode = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/credential-provider-imds/dist-cjs/config/EndpointMode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EndpointMode = void 0;
    var EndpointMode;
    (function(EndpointMode2) {
      EndpointMode2["IPv4"] = "IPv4";
      EndpointMode2["IPv6"] = "IPv6";
    })(EndpointMode = exports2.EndpointMode || (exports2.EndpointMode = {}));
  }
});

var require_EndpointModeConfigOptions = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ENDPOINT_MODE_CONFIG_OPTIONS = exports2.CONFIG_ENDPOINT_MODE_NAME = exports2.ENV_ENDPOINT_MODE_NAME = void 0;
    var EndpointMode_1 = require_EndpointMode();
    exports2.ENV_ENDPOINT_MODE_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE";
    exports2.CONFIG_ENDPOINT_MODE_NAME = "ec2_metadata_service_endpoint_mode";
    exports2.ENDPOINT_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports2.ENV_ENDPOINT_MODE_NAME],
      configFileSelector: (profile) => profile[exports2.CONFIG_ENDPOINT_MODE_NAME],
      default: EndpointMode_1.EndpointMode.IPv4
    };
  }
});

var require_getInstanceMetadataEndpoint = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getInstanceMetadataEndpoint = void 0;
    var node_config_provider_1 = require_dist_cjs39();
    var url_parser_1 = require_dist_cjs24();
    var Endpoint_1 = require_Endpoint();
    var EndpointConfigOptions_1 = require_EndpointConfigOptions();
    var EndpointMode_1 = require_EndpointMode();
    var EndpointModeConfigOptions_1 = require_EndpointModeConfigOptions();
    var getInstanceMetadataEndpoint = async () => (0, url_parser_1.parseUrl)(await getFromEndpointConfig() || await getFromEndpointModeConfig());
    exports2.getInstanceMetadataEndpoint = getInstanceMetadataEndpoint;
    var getFromEndpointConfig = async () => (0, node_config_provider_1.loadConfig)(EndpointConfigOptions_1.ENDPOINT_CONFIG_OPTIONS)();
    var getFromEndpointModeConfig = async () => {
      const endpointMode = await (0, node_config_provider_1.loadConfig)(EndpointModeConfigOptions_1.ENDPOINT_MODE_CONFIG_OPTIONS)();
      switch (endpointMode) {
        case EndpointMode_1.EndpointMode.IPv4:
          return Endpoint_1.Endpoint.IPv4;
        case EndpointMode_1.EndpointMode.IPv6:
          return Endpoint_1.Endpoint.IPv6;
        default:
          throw new Error(`Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(EndpointMode_1.EndpointMode)}`);
      }
    };
  }
});

var require_getExtendedInstanceMetadataCredentials = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getExtendedInstanceMetadataCredentials = void 0;
    var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;
    var STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
    var STATIC_STABILITY_DOC_URL = "https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html";
    var getExtendedInstanceMetadataCredentials = (credentials, logger) => {
      var _a;
      const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS + Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);
      const newExpiration = new Date(Date.now() + refreshInterval * 1e3);
      logger.warn("Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.\nFor more information, please visit: " + STATIC_STABILITY_DOC_URL);
      const originalExpiration = (_a = credentials.originalExpiration) !== null && _a !== void 0 ? _a : credentials.expiration;
      return {
        ...credentials,
        ...originalExpiration ? { originalExpiration } : {},
        expiration: newExpiration
      };
    };
    exports2.getExtendedInstanceMetadataCredentials = getExtendedInstanceMetadataCredentials;
  }
});

var require_staticStabilityProvider = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.staticStabilityProvider = void 0;
    var getExtendedInstanceMetadataCredentials_1 = require_getExtendedInstanceMetadataCredentials();
    var staticStabilityProvider = (provider, options = {}) => {
      const logger = (options === null || options === void 0 ? void 0 : options.logger) || console;
      let pastCredentials;
      return async () => {
        let credentials;
        try {
          credentials = await provider();
          if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(credentials, logger);
          }
        } catch (e) {
          if (pastCredentials) {
            logger.warn("Credential renew failed: ", e);
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(pastCredentials, logger);
          } else {
            throw e;
          }
        }
        pastCredentials = credentials;
        return credentials;
      };
    };
    exports2.staticStabilityProvider = staticStabilityProvider;
  }
});

var require_fromInstanceMetadata = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/credential-provider-imds/dist-cjs/fromInstanceMetadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromInstanceMetadata = void 0;
    var property_provider_1 = require_dist_cjs6();
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry3();
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    var staticStabilityProvider_1 = require_staticStabilityProvider();
    var IMDS_PATH = "/latest/meta-data/iam/security-credentials/";
    var IMDS_TOKEN_PATH = "/latest/api/token";
    var fromInstanceMetadata = (init = {}) => (0, staticStabilityProvider_1.staticStabilityProvider)(getInstanceImdsProvider(init), { logger: init.logger });
    exports2.fromInstanceMetadata = fromInstanceMetadata;
    var getInstanceImdsProvider = (init) => {
      let disableFetchToken = false;
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      const getCredentials = async (maxRetries2, options) => {
        const profile = (await (0, retry_1.retry)(async () => {
          let profile2;
          try {
            profile2 = await getProfile(options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return profile2;
        }, maxRetries2)).trim();
        return (0, retry_1.retry)(async () => {
          let creds;
          try {
            creds = await getCredentialsFromProfile(profile, options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return creds;
        }, maxRetries2);
      };
      return async () => {
        const endpoint = await (0, getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint)();
        if (disableFetchToken) {
          return getCredentials(maxRetries, { ...endpoint, timeout });
        } else {
          let token;
          try {
            token = (await getMetadataToken({ ...endpoint, timeout })).toString();
          } catch (error) {
            if ((error === null || error === void 0 ? void 0 : error.statusCode) === 400) {
              throw Object.assign(error, {
                message: "EC2 Metadata token request returned error"
              });
            } else if (error.message === "TimeoutError" || [403, 404, 405].includes(error.statusCode)) {
              disableFetchToken = true;
            }
            return getCredentials(maxRetries, { ...endpoint, timeout });
          }
          return getCredentials(maxRetries, {
            ...endpoint,
            headers: {
              "x-aws-ec2-metadata-token": token
            },
            timeout
          });
        }
      };
    };
    var getMetadataToken = async (options) => (0, httpRequest_1.httpRequest)({
      ...options,
      path: IMDS_TOKEN_PATH,
      method: "PUT",
      headers: {
        "x-aws-ec2-metadata-token-ttl-seconds": "21600"
      }
    });
    var getProfile = async (options) => (await (0, httpRequest_1.httpRequest)({ ...options, path: IMDS_PATH })).toString();
    var getCredentialsFromProfile = async (profile, options) => {
      const credsResponse = JSON.parse((await (0, httpRequest_1.httpRequest)({
        ...options,
        path: IMDS_PATH + profile
      })).toString());
      if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
        throw new property_provider_1.CredentialsProviderError("Invalid response received from instance metadata service.");
      }
      return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
    };
  }
});

var require_types6 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/credential-provider-imds/dist-cjs/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_dist_cjs40 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/credential-provider-imds/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getInstanceMetadataEndpoint = exports2.httpRequest = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromContainerMetadata(), exports2);
    tslib_1.__exportStar(require_fromInstanceMetadata(), exports2);
    tslib_1.__exportStar(require_RemoteProviderInit(), exports2);
    tslib_1.__exportStar(require_types6(), exports2);
    var httpRequest_1 = require_httpRequest2();
    Object.defineProperty(exports2, "httpRequest", { enumerable: true, get: function() {
      return httpRequest_1.httpRequest;
    } });
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    Object.defineProperty(exports2, "getInstanceMetadataEndpoint", { enumerable: true, get: function() {
      return getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint;
    } });
  }
});

var require_resolveCredentialSource = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveCredentialSource = void 0;
    var credential_provider_env_1 = require_dist_cjs37();
    var credential_provider_imds_1 = require_dist_cjs40();
    var property_provider_1 = require_dist_cjs6();
    var resolveCredentialSource = (credentialSource, profileName) => {
      const sourceProvidersMap = {
        EcsContainer: credential_provider_imds_1.fromContainerMetadata,
        Ec2InstanceMetadata: credential_provider_imds_1.fromInstanceMetadata,
        Environment: credential_provider_env_1.fromEnv
      };
      if (credentialSource in sourceProvidersMap) {
        return sourceProvidersMap[credentialSource]();
      } else {
        throw new property_provider_1.CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`);
      }
    };
    exports2.resolveCredentialSource = resolveCredentialSource;
  }
});

var require_resolveAssumeRoleCredentials = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveAssumeRoleCredentials = exports2.isAssumeRoleProfile = void 0;
    var property_provider_1 = require_dist_cjs6();
    var shared_ini_file_loader_1 = require_dist_cjs38();
    var resolveCredentialSource_1 = require_resolveCredentialSource();
    var resolveProfileData_1 = require_resolveProfileData();
    var isAssumeRoleProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1 && ["undefined", "string"].indexOf(typeof arg.external_id) > -1 && ["undefined", "string"].indexOf(typeof arg.mfa_serial) > -1 && (isAssumeRoleWithSourceProfile(arg) || isAssumeRoleWithProviderProfile(arg));
    exports2.isAssumeRoleProfile = isAssumeRoleProfile;
    var isAssumeRoleWithSourceProfile = (arg) => typeof arg.source_profile === "string" && typeof arg.credential_source === "undefined";
    var isAssumeRoleWithProviderProfile = (arg) => typeof arg.credential_source === "string" && typeof arg.source_profile === "undefined";
    var resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (!options.roleAssumer) {
        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires a role to be assumed, but no role assumption callback was provided.`, false);
      }
      const { source_profile } = data;
      if (source_profile && source_profile in visitedProfiles) {
        throw new property_provider_1.CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile ${(0, shared_ini_file_loader_1.getProfileName)(options)}. Profiles visited: ` + Object.keys(visitedProfiles).join(", "), false);
      }
      const sourceCredsProvider = source_profile ? (0, resolveProfileData_1.resolveProfileData)(source_profile, profiles, options, {
        ...visitedProfiles,
        [source_profile]: true
      }) : (0, resolveCredentialSource_1.resolveCredentialSource)(data.credential_source, profileName)();
      const params = {
        RoleArn: data.role_arn,
        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,
        ExternalId: data.external_id
      };
      const { mfa_serial } = data;
      if (mfa_serial) {
        if (!options.mfaCodeProvider) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, false);
        }
        params.SerialNumber = mfa_serial;
        params.TokenCode = await options.mfaCodeProvider(mfa_serial);
      }
      const sourceCreds = await sourceCredsProvider;
      return options.roleAssumer(sourceCreds, params);
    };
    exports2.resolveAssumeRoleCredentials = resolveAssumeRoleCredentials;
  }
});

var require_getValidatedProcessCredentials = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getValidatedProcessCredentials = void 0;
    var getValidatedProcessCredentials = (profileName, data) => {
      if (data.Version !== 1) {
        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);
      }
      if (data.AccessKeyId === void 0 || data.SecretAccessKey === void 0) {
        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);
      }
      if (data.Expiration) {
        const currentTime = /* @__PURE__ */ new Date();
        const expireTime = new Date(data.Expiration);
        if (expireTime < currentTime) {
          throw Error(`Profile ${profileName} credential_process returned expired credentials.`);
        }
      }
      return {
        accessKeyId: data.AccessKeyId,
        secretAccessKey: data.SecretAccessKey,
        ...data.SessionToken && { sessionToken: data.SessionToken },
        ...data.Expiration && { expiration: new Date(data.Expiration) }
      };
    };
    exports2.getValidatedProcessCredentials = getValidatedProcessCredentials;
  }
});

var require_resolveProcessCredentials = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveProcessCredentials = void 0;
    var property_provider_1 = require_dist_cjs6();
    var child_process_1 = require("child_process");
    var util_1 = require("util");
    var getValidatedProcessCredentials_1 = require_getValidatedProcessCredentials();
    var resolveProcessCredentials = async (profileName, profiles) => {
      const profile = profiles[profileName];
      if (profiles[profileName]) {
        const credentialProcess = profile["credential_process"];
        if (credentialProcess !== void 0) {
          const execPromise = (0, util_1.promisify)(child_process_1.exec);
          try {
            const { stdout } = await execPromise(credentialProcess);
            let data;
            try {
              data = JSON.parse(stdout.trim());
            } catch (_a) {
              throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
            }
            return (0, getValidatedProcessCredentials_1.getValidatedProcessCredentials)(profileName, data);
          } catch (error) {
            throw new property_provider_1.CredentialsProviderError(error.message);
          }
        } else {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`);
        }
      } else {
        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`);
      }
    };
    exports2.resolveProcessCredentials = resolveProcessCredentials;
  }
});

var require_fromProcess = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromProcess = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs38();
    var resolveProcessCredentials_1 = require_resolveProcessCredentials();
    var fromProcess = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      return (0, resolveProcessCredentials_1.resolveProcessCredentials)((0, shared_ini_file_loader_1.getProfileName)(init), profiles);
    };
    exports2.fromProcess = fromProcess;
  }
});

var require_dist_cjs41 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromProcess(), exports2);
  }
});

var require_resolveProcessCredentials2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProcessCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveProcessCredentials = exports2.isProcessProfile = void 0;
    var credential_provider_process_1 = require_dist_cjs41();
    var isProcessProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.credential_process === "string";
    exports2.isProcessProfile = isProcessProfile;
    var resolveProcessCredentials = async (options, profile) => (0, credential_provider_process_1.fromProcess)({
      ...options,
      profile
    })();
    exports2.resolveProcessCredentials = resolveProcessCredentials;
  }
});

var require_isSsoProfile = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isSsoProfile = void 0;
    var isSsoProfile = (arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_session === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string");
    exports2.isSsoProfile = isSsoProfile;
  }
});

var require_EndpointParameters3 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/EndpointParameters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "awsssoportal"
      };
    };
    exports2.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

var require_package4 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/package.json"(exports2, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sso",
      description: "AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native",
      version: "3.405.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sso"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/middleware-host-header": "3.398.0",
        "@aws-sdk/middleware-logger": "3.398.0",
        "@aws-sdk/middleware-recursion-detection": "3.398.0",
        "@aws-sdk/middleware-user-agent": "3.398.0",
        "@aws-sdk/types": "3.398.0",
        "@aws-sdk/util-endpoints": "3.398.0",
        "@aws-sdk/util-user-agent-browser": "3.398.0",
        "@aws-sdk/util-user-agent-node": "3.405.0",
        "@smithy/config-resolver": "^2.0.5",
        "@smithy/fetch-http-handler": "^2.0.5",
        "@smithy/hash-node": "^2.0.5",
        "@smithy/invalid-dependency": "^2.0.5",
        "@smithy/middleware-content-length": "^2.0.5",
        "@smithy/middleware-endpoint": "^2.0.5",
        "@smithy/middleware-retry": "^2.0.5",
        "@smithy/middleware-serde": "^2.0.5",
        "@smithy/middleware-stack": "^2.0.0",
        "@smithy/node-config-provider": "^2.0.6",
        "@smithy/node-http-handler": "^2.0.5",
        "@smithy/protocol-http": "^2.0.5",
        "@smithy/smithy-client": "^2.0.5",
        "@smithy/types": "^2.2.2",
        "@smithy/url-parser": "^2.0.5",
        "@smithy/util-base64": "^2.0.0",
        "@smithy/util-body-length-browser": "^2.0.0",
        "@smithy/util-body-length-node": "^2.1.0",
        "@smithy/util-defaults-mode-browser": "^2.0.6",
        "@smithy/util-defaults-mode-node": "^2.0.6",
        "@smithy/util-retry": "^2.0.0",
        "@smithy/util-utf8": "^2.0.0",
        tslib: "^2.5.0"
      },
      devDependencies: {
        "@smithy/service-client-documentation-generator": "^2.0.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.23.23",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso"
      }
    };
  }
});

var require_is_crt_available = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isCrtAvailable = void 0;
    var isCrtAvailable = () => {
      try {
        if (typeof require === "function" && typeof module2 !== "undefined" && require("aws-crt")) {
          return ["md/crt-avail"];
        }
        return null;
      } catch (e) {
        return null;
      }
    };
    exports2.isCrtAvailable = isCrtAvailable;
  }
});

var require_dist_cjs42 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultUserAgent = exports2.UA_APP_ID_INI_NAME = exports2.UA_APP_ID_ENV_NAME = void 0;
    var node_config_provider_1 = require_dist_cjs39();
    var os_1 = require("os");
    var process_1 = require("process");
    var is_crt_available_1 = require_is_crt_available();
    exports2.UA_APP_ID_ENV_NAME = "AWS_SDK_UA_APP_ID";
    exports2.UA_APP_ID_INI_NAME = "sdk-ua-app-id";
    var defaultUserAgent = ({ serviceId, clientVersion }) => {
      const sections = [
        ["aws-sdk-js", clientVersion],
        ["ua", "2.0"],
        [`os/${(0, os_1.platform)()}`, (0, os_1.release)()],
        ["lang/js"],
        ["md/nodejs", `${process_1.versions.node}`]
      ];
      const crtAvailable = (0, is_crt_available_1.isCrtAvailable)();
      if (crtAvailable) {
        sections.push(crtAvailable);
      }
      if (serviceId) {
        sections.push([`api/${serviceId}`, clientVersion]);
      }
      if (process_1.env.AWS_EXECUTION_ENV) {
        sections.push([`exec-env/${process_1.env.AWS_EXECUTION_ENV}`]);
      }
      const appIdPromise = (0, node_config_provider_1.loadConfig)({
        environmentVariableSelector: (env) => env[exports2.UA_APP_ID_ENV_NAME],
        configFileSelector: (profile) => profile[exports2.UA_APP_ID_INI_NAME],
        default: void 0
      })();
      let resolvedUserAgent = void 0;
      return async () => {
        if (!resolvedUserAgent) {
          const appId = await appIdPromise;
          resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];
        }
        return resolvedUserAgent;
      };
    };
    exports2.defaultUserAgent = defaultUserAgent;
  }
});

var require_dist_cjs43 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/hash-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Hash = void 0;
    var util_buffer_from_1 = require_dist_cjs12();
    var util_utf8_1 = require_dist_cjs13();
    var buffer_1 = require("buffer");
    var crypto_1 = require("crypto");
    var Hash = class {
      constructor(algorithmIdentifier, secret) {
        this.algorithmIdentifier = algorithmIdentifier;
        this.secret = secret;
        this.reset();
      }
      update(toHash, encoding) {
        this.hash.update((0, util_utf8_1.toUint8Array)(castSourceData(toHash, encoding)));
      }
      digest() {
        return Promise.resolve(this.hash.digest());
      }
      reset() {
        this.hash = this.secret ? (0, crypto_1.createHmac)(this.algorithmIdentifier, castSourceData(this.secret)) : (0, crypto_1.createHash)(this.algorithmIdentifier);
      }
    };
    exports2.Hash = Hash;
    function castSourceData(toCast, encoding) {
      if (buffer_1.Buffer.isBuffer(toCast)) {
        return toCast;
      }
      if (typeof toCast === "string") {
        return (0, util_buffer_from_1.fromString)(toCast, encoding);
      }
      if (ArrayBuffer.isView(toCast)) {
        return (0, util_buffer_from_1.fromArrayBuffer)(toCast.buffer, toCast.byteOffset, toCast.byteLength);
      }
      return (0, util_buffer_from_1.fromArrayBuffer)(toCast);
    }
  }
});

var require_calculateBodyLength = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-body-length-node/dist-cjs/calculateBodyLength.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.calculateBodyLength = void 0;
    var fs_1 = require("fs");
    var calculateBodyLength = (body) => {
      if (!body) {
        return 0;
      }
      if (typeof body === "string") {
        return Buffer.from(body).length;
      } else if (typeof body.byteLength === "number") {
        return body.byteLength;
      } else if (typeof body.size === "number") {
        return body.size;
      } else if (typeof body.start === "number" && typeof body.end === "number") {
        return body.end + 1 - body.start;
      } else if (typeof body.path === "string" || Buffer.isBuffer(body.path)) {
        return (0, fs_1.lstatSync)(body.path).size;
      } else if (typeof body.fd === "number") {
        return (0, fs_1.fstatSync)(body.fd).size;
      }
      throw new Error(`Body Length computation failed for ${body}`);
    };
    exports2.calculateBodyLength = calculateBodyLength;
  }
});

var require_dist_cjs44 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-body-length-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_calculateBodyLength(), exports2);
  }
});

var require_ruleset = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ruleSet = void 0;
    var p = "required";
    var q = "fn";
    var r = "argv";
    var s = "ref";
    var a = "PartitionResult";
    var b = "tree";
    var c = "error";
    var d = "endpoint";
    var e = { [p]: false, "type": "String" };
    var f = { [p]: true, "default": false, "type": "Boolean" };
    var g = { [s]: "Endpoint" };
    var h = { [q]: "booleanEquals", [r]: [{ [s]: "UseFIPS" }, true] };
    var i = { [q]: "booleanEquals", [r]: [{ [s]: "UseDualStack" }, true] };
    var j = {};
    var k = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsFIPS"] }] };
    var l = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsDualStack"] }] };
    var m = [g];
    var n = [h];
    var o = [i];
    var _data = { version: "1.0", parameters: { Region: e, UseDualStack: f, UseFIPS: f, Endpoint: e }, rules: [{ conditions: [{ [q]: "aws.partition", [r]: [{ [s]: "Region" }], assign: a }], type: b, rules: [{ conditions: [{ [q]: "isSet", [r]: m }, { [q]: "parseURL", [r]: m, assign: "url" }], type: b, rules: [{ conditions: n, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { type: b, rules: [{ conditions: o, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: g, properties: j, headers: j }, type: d }] }] }, { conditions: [h, i], type: b, rules: [{ conditions: [k, l], type: b, rules: [{ endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: n, type: b, rules: [{ conditions: [k], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: o, type: b, rules: [{ conditions: [l], type: b, rules: [{ endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] };
    exports2.ruleSet = _data;
  }
});

var require_endpointResolver = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs18();
    var ruleset_1 = require_ruleset();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports2.defaultEndpointResolver = defaultEndpointResolver;
  }
});

var require_runtimeConfig_shared = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var url_parser_1 = require_dist_cjs24();
    var util_base64_1 = require_dist_cjs31();
    var util_utf8_1 = require_dist_cjs13();
    var endpointResolver_1 = require_endpointResolver();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2019-06-10",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      extensions: config?.extensions ?? [],
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "SSO",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

var require_constants8 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-defaults-mode-node/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IMDS_REGION_PATH = exports2.DEFAULTS_MODE_OPTIONS = exports2.ENV_IMDS_DISABLED = exports2.AWS_DEFAULT_REGION_ENV = exports2.AWS_REGION_ENV = exports2.AWS_EXECUTION_ENV = void 0;
    exports2.AWS_EXECUTION_ENV = "AWS_EXECUTION_ENV";
    exports2.AWS_REGION_ENV = "AWS_REGION";
    exports2.AWS_DEFAULT_REGION_ENV = "AWS_DEFAULT_REGION";
    exports2.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    exports2.DEFAULTS_MODE_OPTIONS = ["in-region", "cross-region", "mobile", "standard", "legacy"];
    exports2.IMDS_REGION_PATH = "/latest/meta-data/placement/region";
  }
});

var require_defaultsModeConfig = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = void 0;
    var AWS_DEFAULTS_MODE_ENV = "AWS_DEFAULTS_MODE";
    var AWS_DEFAULTS_MODE_CONFIG = "defaults_mode";
    exports2.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        return env[AWS_DEFAULTS_MODE_ENV];
      },
      configFileSelector: (profile) => {
        return profile[AWS_DEFAULTS_MODE_CONFIG];
      },
      default: "legacy"
    };
  }
});

var require_resolveDefaultsModeConfig = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveDefaultsModeConfig = void 0;
    var config_resolver_1 = require_dist_cjs21();
    var credential_provider_imds_1 = require_dist_cjs40();
    var node_config_provider_1 = require_dist_cjs39();
    var property_provider_1 = require_dist_cjs6();
    var constants_1 = require_constants8();
    var defaultsModeConfig_1 = require_defaultsModeConfig();
    var resolveDefaultsModeConfig = ({ region = (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS), defaultsMode = (0, node_config_provider_1.loadConfig)(defaultsModeConfig_1.NODE_DEFAULTS_MODE_CONFIG_OPTIONS) } = {}) => (0, property_provider_1.memoize)(async () => {
      const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
      switch (mode === null || mode === void 0 ? void 0 : mode.toLowerCase()) {
        case "auto":
          return resolveNodeDefaultsModeAuto(region);
        case "in-region":
        case "cross-region":
        case "mobile":
        case "standard":
        case "legacy":
          return Promise.resolve(mode === null || mode === void 0 ? void 0 : mode.toLocaleLowerCase());
        case void 0:
          return Promise.resolve("legacy");
        default:
          throw new Error(`Invalid parameter for "defaultsMode", expect ${constants_1.DEFAULTS_MODE_OPTIONS.join(", ")}, got ${mode}`);
      }
    });
    exports2.resolveDefaultsModeConfig = resolveDefaultsModeConfig;
    var resolveNodeDefaultsModeAuto = async (clientRegion) => {
      if (clientRegion) {
        const resolvedRegion = typeof clientRegion === "function" ? await clientRegion() : clientRegion;
        const inferredRegion = await inferPhysicalRegion();
        if (!inferredRegion) {
          return "standard";
        }
        if (resolvedRegion === inferredRegion) {
          return "in-region";
        } else {
          return "cross-region";
        }
      }
      return "standard";
    };
    var inferPhysicalRegion = async () => {
      var _a;
      if (process.env[constants_1.AWS_EXECUTION_ENV] && (process.env[constants_1.AWS_REGION_ENV] || process.env[constants_1.AWS_DEFAULT_REGION_ENV])) {
        return (_a = process.env[constants_1.AWS_REGION_ENV]) !== null && _a !== void 0 ? _a : process.env[constants_1.AWS_DEFAULT_REGION_ENV];
      }
      if (!process.env[constants_1.ENV_IMDS_DISABLED]) {
        try {
          const endpoint = await (0, credential_provider_imds_1.getInstanceMetadataEndpoint)();
          return (await (0, credential_provider_imds_1.httpRequest)({ ...endpoint, path: constants_1.IMDS_REGION_PATH })).toString();
        } catch (e) {
        }
      }
    };
  }
});

var require_dist_cjs45 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-defaults-mode-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_resolveDefaultsModeConfig(), exports2);
  }
});

var require_runtimeConfig = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package4());
    var util_user_agent_node_1 = require_dist_cjs42();
    var config_resolver_1 = require_dist_cjs21();
    var hash_node_1 = require_dist_cjs43();
    var middleware_retry_1 = require_dist_cjs29();
    var node_config_provider_1 = require_dist_cjs39();
    var node_http_handler_1 = require_dist_cjs33();
    var util_body_length_node_1 = require_dist_cjs44();
    var util_retry_1 = require_dist_cjs28();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared();
    var smithy_client_1 = require_dist_cjs35();
    var util_defaults_mode_node_1 = require_dist_cjs45();
    var smithy_client_2 = require_dist_cjs35();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

var require_runtimeExtensions = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/runtimeExtensions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveRuntimeExtensions = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var asPartial = (t) => t;
    var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial((0, smithy_client_1.getDefaultExtensionConfiguration)(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...(0, smithy_client_1.resolveDefaultRuntimeConfig)(extensionConfiguration)
      };
    };
    exports2.resolveRuntimeExtensions = resolveRuntimeExtensions;
  }
});

var require_SSOClient = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SSOClient = exports2.__Client = void 0;
    var middleware_host_header_1 = require_dist_cjs3();
    var middleware_logger_1 = require_dist_cjs4();
    var middleware_recursion_detection_1 = require_dist_cjs5();
    var middleware_user_agent_1 = require_dist_cjs19();
    var config_resolver_1 = require_dist_cjs21();
    var middleware_content_length_1 = require_dist_cjs22();
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_retry_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "__Client", { enumerable: true, get: function() {
      return smithy_client_1.Client;
    } });
    var EndpointParameters_1 = require_EndpointParameters3();
    var runtimeConfig_1 = require_runtimeConfig();
    var runtimeExtensions_1 = require_runtimeExtensions();
    var SSOClient = class extends smithy_client_1.Client {
      constructor(...[configuration]) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        const _config_7 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_6, configuration?.extensions || []);
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports2.SSOClient = SSOClient;
  }
});

var require_SSOServiceException = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SSOServiceException = exports2.__ServiceException = void 0;
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "__ServiceException", { enumerable: true, get: function() {
      return smithy_client_1.ServiceException;
    } });
    var SSOServiceException = class _SSOServiceException extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _SSOServiceException.prototype);
      }
    };
    exports2.SSOServiceException = SSOServiceException;
  }
});

var require_models_02 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LogoutRequestFilterSensitiveLog = exports2.ListAccountsRequestFilterSensitiveLog = exports2.ListAccountRolesRequestFilterSensitiveLog = exports2.GetRoleCredentialsResponseFilterSensitiveLog = exports2.RoleCredentialsFilterSensitiveLog = exports2.GetRoleCredentialsRequestFilterSensitiveLog = exports2.UnauthorizedException = exports2.TooManyRequestsException = exports2.ResourceNotFoundException = exports2.InvalidRequestException = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var SSOServiceException_1 = require_SSOServiceException();
    var InvalidRequestException = class _InvalidRequestException extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequestException.prototype);
      }
    };
    exports2.InvalidRequestException = InvalidRequestException;
    var ResourceNotFoundException = class _ResourceNotFoundException extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "ResourceNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
      }
    };
    exports2.ResourceNotFoundException = ResourceNotFoundException;
    var TooManyRequestsException = class _TooManyRequestsException extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "TooManyRequestsException",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TooManyRequestsException.prototype);
      }
    };
    exports2.TooManyRequestsException = TooManyRequestsException;
    var UnauthorizedException = class _UnauthorizedException extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "UnauthorizedException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnauthorizedException.prototype);
      }
    };
    exports2.UnauthorizedException = UnauthorizedException;
    var GetRoleCredentialsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.GetRoleCredentialsRequestFilterSensitiveLog = GetRoleCredentialsRequestFilterSensitiveLog;
    var RoleCredentialsFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.secretAccessKey && { secretAccessKey: smithy_client_1.SENSITIVE_STRING },
      ...obj.sessionToken && { sessionToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.RoleCredentialsFilterSensitiveLog = RoleCredentialsFilterSensitiveLog;
    var GetRoleCredentialsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.roleCredentials && { roleCredentials: (0, exports2.RoleCredentialsFilterSensitiveLog)(obj.roleCredentials) }
    });
    exports2.GetRoleCredentialsResponseFilterSensitiveLog = GetRoleCredentialsResponseFilterSensitiveLog;
    var ListAccountRolesRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.ListAccountRolesRequestFilterSensitiveLog = ListAccountRolesRequestFilterSensitiveLog;
    var ListAccountsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.ListAccountsRequestFilterSensitiveLog = ListAccountsRequestFilterSensitiveLog;
    var LogoutRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.LogoutRequestFilterSensitiveLog = LogoutRequestFilterSensitiveLog;
  }
});

var require_Aws_restJson1 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.de_LogoutCommand = exports2.de_ListAccountsCommand = exports2.de_ListAccountRolesCommand = exports2.de_GetRoleCredentialsCommand = exports2.se_LogoutCommand = exports2.se_ListAccountsCommand = exports2.se_ListAccountRolesCommand = exports2.se_GetRoleCredentialsCommand = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_1 = require_dist_cjs35();
    var models_0_1 = require_models_02();
    var SSOServiceException_1 = require_SSOServiceException();
    var se_GetRoleCredentialsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/federation/credentials`;
      const query = (0, smithy_client_1.map)({
        role_name: [, (0, smithy_client_1.expectNonNull)(input.roleName, `roleName`)],
        account_id: [, (0, smithy_client_1.expectNonNull)(input.accountId, `accountId`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_GetRoleCredentialsCommand = se_GetRoleCredentialsCommand;
    var se_ListAccountRolesCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/assignment/roles`;
      const query = (0, smithy_client_1.map)({
        next_token: [, input.nextToken],
        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()],
        account_id: [, (0, smithy_client_1.expectNonNull)(input.accountId, `accountId`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_ListAccountRolesCommand = se_ListAccountRolesCommand;
    var se_ListAccountsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/assignment/accounts`;
      const query = (0, smithy_client_1.map)({
        next_token: [, input.nextToken],
        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.se_ListAccountsCommand = se_ListAccountsCommand;
    var se_LogoutCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/logout`;
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.se_LogoutCommand = se_LogoutCommand;
    var de_GetRoleCredentialsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetRoleCredentialsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        roleCredentials: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports2.de_GetRoleCredentialsCommand = de_GetRoleCredentialsCommand;
    var de_GetRoleCredentialsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListAccountRolesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListAccountRolesCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        nextToken: smithy_client_1.expectString,
        roleList: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports2.de_ListAccountRolesCommand = de_ListAccountRolesCommand;
    var de_ListAccountRolesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListAccountsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListAccountsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        accountList: smithy_client_1._json,
        nextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports2.de_ListAccountsCommand = de_ListAccountsCommand;
    var de_ListAccountsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_LogoutCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_LogoutCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports2.de_LogoutCommand = de_LogoutCommand;
    var de_LogoutCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var throwDefaultError = (0, smithy_client_1.withBaseException)(SSOServiceException_1.SSOServiceException);
    var de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_UnauthorizedExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
    var isSerializableHeaderValue = (value) => value !== void 0 && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

var require_GetRoleCredentialsCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetRoleCredentialsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_02();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetRoleCredentialsCommand = class _GetRoleCredentialsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetRoleCredentialsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "GetRoleCredentialsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetRoleCredentialsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetRoleCredentialsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetRoleCredentialsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetRoleCredentialsCommand)(output, context);
      }
    };
    exports2.GetRoleCredentialsCommand = GetRoleCredentialsCommand;
  }
});

var require_ListAccountRolesCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListAccountRolesCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_02();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountRolesCommand = class _ListAccountRolesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListAccountRolesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountRolesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountRolesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListAccountRolesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListAccountRolesCommand)(output, context);
      }
    };
    exports2.ListAccountRolesCommand = ListAccountRolesCommand;
  }
});

var require_ListAccountsCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListAccountsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_02();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountsCommand = class _ListAccountsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListAccountsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListAccountsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListAccountsCommand)(output, context);
      }
    };
    exports2.ListAccountsCommand = ListAccountsCommand;
  }
});

var require_LogoutCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LogoutCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_02();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var LogoutCommand = class _LogoutCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _LogoutCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "LogoutCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.LogoutRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_LogoutCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_LogoutCommand)(output, context);
      }
    };
    exports2.LogoutCommand = LogoutCommand;
  }
});

var require_SSO = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SSO = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var GetRoleCredentialsCommand_1 = require_GetRoleCredentialsCommand();
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var LogoutCommand_1 = require_LogoutCommand();
    var SSOClient_1 = require_SSOClient();
    var commands = {
      GetRoleCredentialsCommand: GetRoleCredentialsCommand_1.GetRoleCredentialsCommand,
      ListAccountRolesCommand: ListAccountRolesCommand_1.ListAccountRolesCommand,
      ListAccountsCommand: ListAccountsCommand_1.ListAccountsCommand,
      LogoutCommand: LogoutCommand_1.LogoutCommand
    };
    var SSO = class extends SSOClient_1.SSOClient {
    };
    exports2.SSO = SSO;
    (0, smithy_client_1.createAggregatedClient)(commands, SSO);
  }
});

var require_commands = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_GetRoleCredentialsCommand(), exports2);
    tslib_1.__exportStar(require_ListAccountRolesCommand(), exports2);
    tslib_1.__exportStar(require_ListAccountsCommand(), exports2);
    tslib_1.__exportStar(require_LogoutCommand(), exports2);
  }
});

var require_Interfaces = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_ListAccountRolesPaginator = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListAccountRoles = void 0;
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountRolesCommand_1.ListAccountRolesCommand(input), ...args);
    };
    async function* paginateListAccountRoles(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input["maxResults"] = config.pageSize;
        if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSO | SSOClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListAccountRoles = paginateListAccountRoles;
  }
});

var require_ListAccountsPaginator = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListAccounts = void 0;
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountsCommand_1.ListAccountsCommand(input), ...args);
    };
    async function* paginateListAccounts(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input["maxResults"] = config.pageSize;
        if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSO | SSOClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListAccounts = paginateListAccounts;
  }
});

var require_pagination3 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Interfaces(), exports2);
    tslib_1.__exportStar(require_ListAccountRolesPaginator(), exports2);
    tslib_1.__exportStar(require_ListAccountsPaginator(), exports2);
  }
});

var require_models = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_02(), exports2);
  }
});

var require_dist_cjs46 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SSOServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SSOClient(), exports2);
    tslib_1.__exportStar(require_SSO(), exports2);
    tslib_1.__exportStar(require_commands(), exports2);
    tslib_1.__exportStar(require_pagination3(), exports2);
    tslib_1.__exportStar(require_models(), exports2);
    var SSOServiceException_1 = require_SSOServiceException();
    Object.defineProperty(exports2, "SSOServiceException", { enumerable: true, get: function() {
      return SSOServiceException_1.SSOServiceException;
    } });
  }
});

var require_client_sso_oidc_node = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/bundle/client-sso-oidc-node.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UnsupportedGrantTypeException = exports2.UnauthorizedClientException = exports2.SlowDownException = exports2.SSOOIDCClient = exports2.InvalidScopeException = exports2.InvalidRequestException = exports2.InvalidClientException = exports2.InternalServerException = exports2.ExpiredTokenException = exports2.CreateTokenCommand = exports2.AuthorizationPendingException = exports2.AccessDeniedException = void 0;
    var middleware_host_header_1 = require_dist_cjs3();
    var middleware_logger_1 = require_dist_cjs4();
    var middleware_recursion_detection_1 = require_dist_cjs5();
    var middleware_user_agent_1 = require_dist_cjs19();
    var config_resolver_1 = require_dist_cjs21();
    var middleware_content_length_1 = require_dist_cjs22();
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_retry_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs35();
    var resolveClientEndpointParameters = (options) => {
      var _a, _b;
      return {
        ...options,
        useDualstackEndpoint: (_a = options.useDualstackEndpoint) !== null && _a !== void 0 ? _a : false,
        useFipsEndpoint: (_b = options.useFipsEndpoint) !== null && _b !== void 0 ? _b : false,
        defaultSigningName: "awsssooidc"
      };
    };
    var package_default = { version: "3.387.0" };
    var util_user_agent_node_1 = require_dist_cjs42();
    var config_resolver_2 = require_dist_cjs21();
    var hash_node_1 = require_dist_cjs43();
    var middleware_retry_2 = require_dist_cjs29();
    var node_config_provider_1 = require_dist_cjs39();
    var node_http_handler_1 = require_dist_cjs33();
    var util_body_length_node_1 = require_dist_cjs44();
    var util_retry_1 = require_dist_cjs28();
    var smithy_client_2 = require_dist_cjs35();
    var url_parser_1 = require_dist_cjs24();
    var util_base64_1 = require_dist_cjs31();
    var util_utf8_1 = require_dist_cjs13();
    var util_endpoints_1 = require_dist_cjs18();
    var p = "required";
    var q = "fn";
    var r = "argv";
    var s = "ref";
    var a = "PartitionResult";
    var b = "tree";
    var c = "error";
    var d = "endpoint";
    var e = { [p]: false, "type": "String" };
    var f = { [p]: true, "default": false, "type": "Boolean" };
    var g = { [s]: "Endpoint" };
    var h = { [q]: "booleanEquals", [r]: [{ [s]: "UseFIPS" }, true] };
    var i = { [q]: "booleanEquals", [r]: [{ [s]: "UseDualStack" }, true] };
    var j = {};
    var k = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsFIPS"] }] };
    var l = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsDualStack"] }] };
    var m = [g];
    var n = [h];
    var o = [i];
    var _data = { version: "1.0", parameters: { Region: e, UseDualStack: f, UseFIPS: f, Endpoint: e }, rules: [{ conditions: [{ [q]: "aws.partition", [r]: [{ [s]: "Region" }], assign: a }], type: b, rules: [{ conditions: [{ [q]: "isSet", [r]: m }, { [q]: "parseURL", [r]: m, assign: "url" }], type: b, rules: [{ conditions: n, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { type: b, rules: [{ conditions: o, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: g, properties: j, headers: j }, type: d }] }] }, { conditions: [h, i], type: b, rules: [{ conditions: [k, l], type: b, rules: [{ endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: n, type: b, rules: [{ conditions: [k], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: o, type: b, rules: [{ conditions: [l], type: b, rules: [{ endpoint: { url: "https://oidc.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { endpoint: { url: "https://oidc.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] };
    var ruleSet = _data;
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j;
      return {
        apiVersion: "2019-06-10",
        base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : util_base64_1.fromBase64,
        base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : util_base64_1.toBase64,
        disableHostPrefix: (_c = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _c !== void 0 ? _c : false,
        endpointProvider: (_d = config === null || config === void 0 ? void 0 : config.endpointProvider) !== null && _d !== void 0 ? _d : defaultEndpointResolver,
        logger: (_e = config === null || config === void 0 ? void 0 : config.logger) !== null && _e !== void 0 ? _e : new smithy_client_2.NoOpLogger(),
        serviceId: (_f = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _f !== void 0 ? _f : "SSO OIDC",
        urlParser: (_g = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _g !== void 0 ? _g : url_parser_1.parseUrl,
        utf8Decoder: (_h = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _h !== void 0 ? _h : util_utf8_1.fromUtf8,
        utf8Encoder: (_j = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _j !== void 0 ? _j : util_utf8_1.toUtf8
      };
    };
    var smithy_client_3 = require_dist_cjs35();
    var util_defaults_mode_node_1 = require_dist_cjs45();
    var smithy_client_4 = require_dist_cjs35();
    var getRuntimeConfig2 = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
      (0, smithy_client_4.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_3.loadConfigsForDefaultMode);
      const clientSharedValues = getRuntimeConfig(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: (_a = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _a !== void 0 ? _a : util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: (_b = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _b !== void 0 ? _b : (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_default.version }),
        maxAttempts: (_c = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _c !== void 0 ? _c : (0, node_config_provider_1.loadConfig)(middleware_retry_2.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: (_d = config === null || config === void 0 ? void 0 : config.region) !== null && _d !== void 0 ? _d : (0, node_config_provider_1.loadConfig)(config_resolver_2.NODE_REGION_CONFIG_OPTIONS, config_resolver_2.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (_e = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _e !== void 0 ? _e : new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: (_f = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _f !== void 0 ? _f : (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_2.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: (_g = config === null || config === void 0 ? void 0 : config.sha256) !== null && _g !== void 0 ? _g : hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: (_h = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _h !== void 0 ? _h : node_http_handler_1.streamCollector,
        useDualstackEndpoint: (_j = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _j !== void 0 ? _j : (0, node_config_provider_1.loadConfig)(config_resolver_2.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (_k = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _k !== void 0 ? _k : (0, node_config_provider_1.loadConfig)(config_resolver_2.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    var SSOOIDCClient = class extends smithy_client_1.Client {
      constructor(...[configuration]) {
        const _config_0 = getRuntimeConfig2(configuration || {});
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports2.SSOOIDCClient = SSOOIDCClient;
    var smithy_client_5 = require_dist_cjs35();
    var middleware_endpoint_2 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_6 = require_dist_cjs35();
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_7 = require_dist_cjs35();
    var smithy_client_8 = require_dist_cjs35();
    var SSOOIDCServiceException = class _SSOOIDCServiceException extends smithy_client_8.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _SSOOIDCServiceException.prototype);
      }
    };
    var AccessDeniedException = class _AccessDeniedException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "AccessDeniedException",
          $fault: "client",
          ...opts
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AccessDeniedException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.AccessDeniedException = AccessDeniedException;
    var AuthorizationPendingException = class _AuthorizationPendingException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "AuthorizationPendingException",
          $fault: "client",
          ...opts
        });
        this.name = "AuthorizationPendingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AuthorizationPendingException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.AuthorizationPendingException = AuthorizationPendingException;
    var ExpiredTokenException = class _ExpiredTokenException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ExpiredTokenException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.ExpiredTokenException = ExpiredTokenException;
    var InternalServerException = class _InternalServerException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InternalServerException",
          $fault: "server",
          ...opts
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _InternalServerException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.InternalServerException = InternalServerException;
    var InvalidClientException = class _InvalidClientException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidClientException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.InvalidClientException = InvalidClientException;
    var InvalidGrantException = class _InvalidGrantException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidGrantException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidGrantException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidGrantException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    var InvalidRequestException = class _InvalidRequestException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequestException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.InvalidRequestException = InvalidRequestException;
    var InvalidScopeException = class _InvalidScopeException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidScopeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidScopeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidScopeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.InvalidScopeException = InvalidScopeException;
    var SlowDownException = class _SlowDownException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "SlowDownException",
          $fault: "client",
          ...opts
        });
        this.name = "SlowDownException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _SlowDownException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.SlowDownException = SlowDownException;
    var UnauthorizedClientException = class _UnauthorizedClientException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "UnauthorizedClientException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnauthorizedClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.UnauthorizedClientException = UnauthorizedClientException;
    var UnsupportedGrantTypeException = class _UnsupportedGrantTypeException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedGrantTypeException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedGrantTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnsupportedGrantTypeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.UnsupportedGrantTypeException = UnsupportedGrantTypeException;
    var InvalidClientMetadataException = class _InvalidClientMetadataException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidClientMetadataException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidClientMetadataException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidClientMetadataException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    var se_CreateTokenCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/token`;
      let body;
      body = JSON.stringify((0, smithy_client_7.take)(input, {
        clientId: [],
        clientSecret: [],
        code: [],
        deviceCode: [],
        grantType: [],
        redirectUri: [],
        refreshToken: [],
        scope: (_) => (0, smithy_client_7._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    var se_RegisterClientCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/client/register`;
      let body;
      body = JSON.stringify((0, smithy_client_7.take)(input, {
        clientName: [],
        clientType: [],
        scopes: (_) => (0, smithy_client_7._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    var se_StartDeviceAuthorizationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/device_authorization`;
      let body;
      body = JSON.stringify((0, smithy_client_7.take)(input, {
        clientId: [],
        clientSecret: [],
        startUrl: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    var de_CreateTokenCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CreateTokenCommandError(output, context);
      }
      const contents = (0, smithy_client_7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_7.expectNonNull)((0, smithy_client_7.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_7.take)(data, {
        accessToken: smithy_client_7.expectString,
        expiresIn: smithy_client_7.expectInt32,
        idToken: smithy_client_7.expectString,
        refreshToken: smithy_client_7.expectString,
        tokenType: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    var de_CreateTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ssooidc#AccessDeniedException":
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AuthorizationPendingException":
        case "com.amazonaws.ssooidc#AuthorizationPendingException":
          throw await de_AuthorizationPendingExceptionRes(parsedOutput, context);
        case "ExpiredTokenException":
        case "com.amazonaws.ssooidc#ExpiredTokenException":
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
          throw await de_InvalidClientExceptionRes(parsedOutput, context);
        case "InvalidGrantException":
        case "com.amazonaws.ssooidc#InvalidGrantException":
          throw await de_InvalidGrantExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
          throw await de_InvalidScopeExceptionRes(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
          throw await de_SlowDownExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        case "UnsupportedGrantTypeException":
        case "com.amazonaws.ssooidc#UnsupportedGrantTypeException":
          throw await de_UnsupportedGrantTypeExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_RegisterClientCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_RegisterClientCommandError(output, context);
      }
      const contents = (0, smithy_client_7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_7.expectNonNull)((0, smithy_client_7.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_7.take)(data, {
        authorizationEndpoint: smithy_client_7.expectString,
        clientId: smithy_client_7.expectString,
        clientIdIssuedAt: smithy_client_7.expectLong,
        clientSecret: smithy_client_7.expectString,
        clientSecretExpiresAt: smithy_client_7.expectLong,
        tokenEndpoint: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    var de_RegisterClientCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidClientMetadataException":
        case "com.amazonaws.ssooidc#InvalidClientMetadataException":
          throw await de_InvalidClientMetadataExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
          throw await de_InvalidScopeExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_StartDeviceAuthorizationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_StartDeviceAuthorizationCommandError(output, context);
      }
      const contents = (0, smithy_client_7.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_7.expectNonNull)((0, smithy_client_7.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_7.take)(data, {
        deviceCode: smithy_client_7.expectString,
        expiresIn: smithy_client_7.expectInt32,
        interval: smithy_client_7.expectInt32,
        userCode: smithy_client_7.expectString,
        verificationUri: smithy_client_7.expectString,
        verificationUriComplete: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    var de_StartDeviceAuthorizationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
          throw await de_InvalidClientExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
          throw await de_SlowDownExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var throwDefaultError = (0, smithy_client_7.withBaseException)(SSOOIDCServiceException);
    var de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_AuthorizationPendingExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new AuthorizationPendingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_ExpiredTokenExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_InternalServerExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_InvalidClientExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_InvalidClientMetadataExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidClientMetadataException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_InvalidGrantExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidGrantException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_InvalidScopeExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidScopeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_SlowDownExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new SlowDownException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_UnauthorizedClientExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new UnauthorizedClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_UnsupportedGrantTypeExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_7.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_7.take)(data, {
        error: smithy_client_7.expectString,
        error_description: smithy_client_7.expectString
      });
      Object.assign(contents, doc);
      const exception = new UnsupportedGrantTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_7.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeMetadata = (output) => {
      var _a, _b;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_b = (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"]) !== null && _b !== void 0 ? _b : output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
      };
    };
    var collectBodyString = (streamBody, context) => (0, smithy_client_7.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      var _a;
      const value = await parseBody(errorBody, context);
      value.message = (_a = value.message) !== null && _a !== void 0 ? _a : value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k2) => k2.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
    var CreateTokenCommand = class _CreateTokenCommand extends smithy_client_6.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_2.getEndpointPlugin)(configuration, _CreateTokenCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "CreateTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_CreateTokenCommand(input, context);
      }
      deserialize(output, context) {
        return de_CreateTokenCommand(output, context);
      }
    };
    exports2.CreateTokenCommand = CreateTokenCommand;
    var middleware_endpoint_3 = require_dist_cjs26();
    var middleware_serde_2 = require_dist_cjs25();
    var smithy_client_9 = require_dist_cjs35();
    var RegisterClientCommand = class _RegisterClientCommand extends smithy_client_9.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_2.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_3.getEndpointPlugin)(configuration, _RegisterClientCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "RegisterClientCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_RegisterClientCommand(input, context);
      }
      deserialize(output, context) {
        return de_RegisterClientCommand(output, context);
      }
    };
    var middleware_endpoint_4 = require_dist_cjs26();
    var middleware_serde_3 = require_dist_cjs25();
    var smithy_client_10 = require_dist_cjs35();
    var StartDeviceAuthorizationCommand = class _StartDeviceAuthorizationCommand extends smithy_client_10.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_3.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_4.getEndpointPlugin)(configuration, _StartDeviceAuthorizationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "StartDeviceAuthorizationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return se_StartDeviceAuthorizationCommand(input, context);
      }
      deserialize(output, context) {
        return de_StartDeviceAuthorizationCommand(output, context);
      }
    };
    var commands = {
      CreateTokenCommand,
      RegisterClientCommand,
      StartDeviceAuthorizationCommand
    };
    var SSOOIDC = class extends SSOOIDCClient {
    };
    (0, smithy_client_5.createAggregatedClient)(commands, SSOOIDC);
  }
});

var require_constants9 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.REFRESH_MESSAGE = exports2.EXPIRE_WINDOW_MS = void 0;
    exports2.EXPIRE_WINDOW_MS = 5 * 60 * 1e3;
    exports2.REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;
  }
});

var require_getSsoOidcClient = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/getSsoOidcClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSsoOidcClient = void 0;
    var client_sso_oidc_node_1 = require_client_sso_oidc_node();
    var ssoOidcClientsHash = {};
    var getSsoOidcClient = (ssoRegion) => {
      if (ssoOidcClientsHash[ssoRegion]) {
        return ssoOidcClientsHash[ssoRegion];
      }
      const ssoOidcClient = new client_sso_oidc_node_1.SSOOIDCClient({ region: ssoRegion });
      ssoOidcClientsHash[ssoRegion] = ssoOidcClient;
      return ssoOidcClient;
    };
    exports2.getSsoOidcClient = getSsoOidcClient;
  }
});

var require_getNewSsoOidcToken = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/getNewSsoOidcToken.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getNewSsoOidcToken = void 0;
    var client_sso_oidc_node_1 = require_client_sso_oidc_node();
    var getSsoOidcClient_1 = require_getSsoOidcClient();
    var getNewSsoOidcToken = (ssoToken, ssoRegion) => {
      const ssoOidcClient = (0, getSsoOidcClient_1.getSsoOidcClient)(ssoRegion);
      return ssoOidcClient.send(new client_sso_oidc_node_1.CreateTokenCommand({
        clientId: ssoToken.clientId,
        clientSecret: ssoToken.clientSecret,
        refreshToken: ssoToken.refreshToken,
        grantType: "refresh_token"
      }));
    };
    exports2.getNewSsoOidcToken = getNewSsoOidcToken;
  }
});

var require_validateTokenExpiry = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenExpiry.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateTokenExpiry = void 0;
    var property_provider_1 = require_dist_cjs6();
    var constants_1 = require_constants9();
    var validateTokenExpiry = (token) => {
      if (token.expiration && token.expiration.getTime() < Date.now()) {
        throw new property_provider_1.TokenProviderError(`Token is expired. ${constants_1.REFRESH_MESSAGE}`, false);
      }
    };
    exports2.validateTokenExpiry = validateTokenExpiry;
  }
});

var require_validateTokenKey = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateTokenKey = void 0;
    var property_provider_1 = require_dist_cjs6();
    var constants_1 = require_constants9();
    var validateTokenKey = (key, value, forRefresh = false) => {
      if (typeof value === "undefined") {
        throw new property_provider_1.TokenProviderError(`Value not present for '${key}' in SSO Token${forRefresh ? ". Cannot refresh" : ""}. ${constants_1.REFRESH_MESSAGE}`, false);
      }
    };
    exports2.validateTokenKey = validateTokenKey;
  }
});

var require_writeSSOTokenToFile = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/writeSSOTokenToFile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.writeSSOTokenToFile = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs38();
    var fs_1 = require("fs");
    var { writeFile } = fs_1.promises;
    var writeSSOTokenToFile = (id, ssoToken) => {
      const tokenFilepath = (0, shared_ini_file_loader_1.getSSOTokenFilepath)(id);
      const tokenString = JSON.stringify(ssoToken, null, 2);
      return writeFile(tokenFilepath, tokenString);
    };
    exports2.writeSSOTokenToFile = writeSSOTokenToFile;
  }
});

var require_fromSso = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/fromSso.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromSso = void 0;
    var property_provider_1 = require_dist_cjs6();
    var shared_ini_file_loader_1 = require_dist_cjs38();
    var constants_1 = require_constants9();
    var getNewSsoOidcToken_1 = require_getNewSsoOidcToken();
    var validateTokenExpiry_1 = require_validateTokenExpiry();
    var validateTokenKey_1 = require_validateTokenKey();
    var writeSSOTokenToFile_1 = require_writeSSOTokenToFile();
    var lastRefreshAttemptTime = /* @__PURE__ */ new Date(0);
    var fromSso = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);
      const profile = profiles[profileName];
      if (!profile) {
        throw new property_provider_1.TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);
      } else if (!profile["sso_session"]) {
        throw new property_provider_1.TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);
      }
      const ssoSessionName = profile["sso_session"];
      const ssoSessions = await (0, shared_ini_file_loader_1.loadSsoSessionData)(init);
      const ssoSession = ssoSessions[ssoSessionName];
      if (!ssoSession) {
        throw new property_provider_1.TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);
      }
      for (const ssoSessionRequiredKey of ["sso_start_url", "sso_region"]) {
        if (!ssoSession[ssoSessionRequiredKey]) {
          throw new property_provider_1.TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);
        }
      }
      const ssoStartUrl = ssoSession["sso_start_url"];
      const ssoRegion = ssoSession["sso_region"];
      let ssoToken;
      try {
        ssoToken = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(ssoSessionName);
      } catch (e) {
        throw new property_provider_1.TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${constants_1.REFRESH_MESSAGE}`, false);
      }
      (0, validateTokenKey_1.validateTokenKey)("accessToken", ssoToken.accessToken);
      (0, validateTokenKey_1.validateTokenKey)("expiresAt", ssoToken.expiresAt);
      const { accessToken, expiresAt } = ssoToken;
      const existingToken = { token: accessToken, expiration: new Date(expiresAt) };
      if (existingToken.expiration.getTime() - Date.now() > constants_1.EXPIRE_WINDOW_MS) {
        return existingToken;
      }
      if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1e3) {
        (0, validateTokenExpiry_1.validateTokenExpiry)(existingToken);
        return existingToken;
      }
      (0, validateTokenKey_1.validateTokenKey)("clientId", ssoToken.clientId, true);
      (0, validateTokenKey_1.validateTokenKey)("clientSecret", ssoToken.clientSecret, true);
      (0, validateTokenKey_1.validateTokenKey)("refreshToken", ssoToken.refreshToken, true);
      try {
        lastRefreshAttemptTime.setTime(Date.now());
        const newSsoOidcToken = await (0, getNewSsoOidcToken_1.getNewSsoOidcToken)(ssoToken, ssoRegion);
        (0, validateTokenKey_1.validateTokenKey)("accessToken", newSsoOidcToken.accessToken);
        (0, validateTokenKey_1.validateTokenKey)("expiresIn", newSsoOidcToken.expiresIn);
        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1e3);
        try {
          await (0, writeSSOTokenToFile_1.writeSSOTokenToFile)(ssoSessionName, {
            ...ssoToken,
            accessToken: newSsoOidcToken.accessToken,
            expiresAt: newTokenExpiration.toISOString(),
            refreshToken: newSsoOidcToken.refreshToken
          });
        } catch (error) {
        }
        return {
          token: newSsoOidcToken.accessToken,
          expiration: newTokenExpiration
        };
      } catch (error) {
        (0, validateTokenExpiry_1.validateTokenExpiry)(existingToken);
        return existingToken;
      }
    };
    exports2.fromSso = fromSso;
  }
});

var require_fromStatic3 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/fromStatic.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs6();
    var fromStatic = ({ token }) => async () => {
      if (!token || !token.token) {
        throw new property_provider_1.TokenProviderError(`Please pass a valid token to fromStatic`, false);
      }
      return token;
    };
    exports2.fromStatic = fromStatic;
  }
});

var require_nodeProvider = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/nodeProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.nodeProvider = void 0;
    var property_provider_1 = require_dist_cjs6();
    var fromSso_1 = require_fromSso();
    var nodeProvider = (init = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)((0, fromSso_1.fromSso)(init), async () => {
      throw new property_provider_1.TokenProviderError("Could not load token from any providers", false);
    }), (token) => token.expiration !== void 0 && token.expiration.getTime() - Date.now() < 3e5, (token) => token.expiration !== void 0);
    exports2.nodeProvider = nodeProvider;
  }
});

var require_dist_cjs47 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_client_sso_oidc_node(), exports2);
    tslib_1.__exportStar(require_fromSso(), exports2);
    tslib_1.__exportStar(require_fromStatic3(), exports2);
    tslib_1.__exportStar(require_nodeProvider(), exports2);
  }
});

var require_resolveSSOCredentials = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveSSOCredentials = void 0;
    var client_sso_1 = require_dist_cjs46();
    var token_providers_1 = require_dist_cjs47();
    var property_provider_1 = require_dist_cjs6();
    var shared_ini_file_loader_1 = require_dist_cjs38();
    var SHOULD_FAIL_CREDENTIAL_CHAIN = false;
    var resolveSSOCredentials = async ({ ssoStartUrl, ssoSession, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, profile }) => {
      let token;
      const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;
      if (ssoSession) {
        try {
          const _token = await (0, token_providers_1.fromSso)({ profile })();
          token = {
            accessToken: _token.token,
            expiresAt: new Date(_token.expiration).toISOString()
          };
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(e.message, SHOULD_FAIL_CREDENTIAL_CHAIN);
        }
      } else {
        try {
          token = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(ssoStartUrl);
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
        }
      }
      if (new Date(token.expiresAt).getTime() - Date.now() <= 0) {
        throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { accessToken } = token;
      const sso = ssoClient || new client_sso_1.SSOClient({ region: ssoRegion });
      let ssoResp;
      try {
        ssoResp = await sso.send(new client_sso_1.GetRoleCredentialsCommand({
          accountId: ssoAccountId,
          roleName: ssoRoleName,
          accessToken
        }));
      } catch (e) {
        throw property_provider_1.CredentialsProviderError.from(e, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration } = {} } = ssoResp;
      if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
        throw new property_provider_1.CredentialsProviderError("SSO returns an invalid temporary credential.", SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      return { accessKeyId, secretAccessKey, sessionToken, expiration: new Date(expiration) };
    };
    exports2.resolveSSOCredentials = resolveSSOCredentials;
  }
});

var require_validateSsoProfile = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateSsoProfile = void 0;
    var property_provider_1 = require_dist_cjs6();
    var validateSsoProfile = (profile) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;
      if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {
        throw new property_provider_1.CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(profile).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, false);
      }
      return profile;
    };
    exports2.validateSsoProfile = validateSsoProfile;
  }
});

var require_fromSSO = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromSSO = void 0;
    var property_provider_1 = require_dist_cjs6();
    var shared_ini_file_loader_1 = require_dist_cjs38();
    var isSsoProfile_1 = require_isSsoProfile();
    var resolveSSOCredentials_1 = require_resolveSSOCredentials();
    var validateSsoProfile_1 = require_validateSsoProfile();
    var fromSSO = (init = {}) => async () => {
      const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, ssoSession } = init;
      const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);
      if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
        const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
        const profile = profiles[profileName];
        if (!profile) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} was not found.`);
        }
        if (!(0, isSsoProfile_1.isSsoProfile)(profile)) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`);
        }
        if (profile === null || profile === void 0 ? void 0 : profile.sso_session) {
          const ssoSessions = await (0, shared_ini_file_loader_1.loadSsoSessionData)(init);
          const session = ssoSessions[profile.sso_session];
          const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;
          if (ssoRegion && ssoRegion !== session.sso_region) {
            throw new property_provider_1.CredentialsProviderError(`Conflicting SSO region` + conflictMsg, false);
          }
          if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {
            throw new property_provider_1.CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, false);
          }
          profile.sso_region = session.sso_region;
          profile.sso_start_url = session.sso_start_url;
        }
        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = (0, validateSsoProfile_1.validateSsoProfile)(profile);
        return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
          ssoStartUrl: sso_start_url,
          ssoSession: sso_session,
          ssoAccountId: sso_account_id,
          ssoRegion: sso_region,
          ssoRoleName: sso_role_name,
          ssoClient,
          profile: profileName
        });
      } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {
        throw new property_provider_1.CredentialsProviderError('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"');
      } else {
        return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
          ssoStartUrl,
          ssoSession,
          ssoAccountId,
          ssoRegion,
          ssoRoleName,
          ssoClient,
          profile: profileName
        });
      }
    };
    exports2.fromSSO = fromSSO;
  }
});

var require_types7 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_dist_cjs48 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromSSO(), exports2);
    tslib_1.__exportStar(require_isSsoProfile(), exports2);
    tslib_1.__exportStar(require_types7(), exports2);
    tslib_1.__exportStar(require_validateSsoProfile(), exports2);
  }
});

var require_resolveSsoCredentials = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveSsoCredentials = exports2.isSsoProfile = void 0;
    var credential_provider_sso_1 = require_dist_cjs48();
    var credential_provider_sso_2 = require_dist_cjs48();
    Object.defineProperty(exports2, "isSsoProfile", { enumerable: true, get: function() {
      return credential_provider_sso_2.isSsoProfile;
    } });
    var resolveSsoCredentials = (data) => {
      const { sso_start_url, sso_account_id, sso_session, sso_region, sso_role_name } = (0, credential_provider_sso_1.validateSsoProfile)(data);
      return (0, credential_provider_sso_1.fromSSO)({
        ssoStartUrl: sso_start_url,
        ssoAccountId: sso_account_id,
        ssoSession: sso_session,
        ssoRegion: sso_region,
        ssoRoleName: sso_role_name
      })();
    };
    exports2.resolveSsoCredentials = resolveSsoCredentials;
  }
});

var require_resolveStaticCredentials = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveStaticCredentials = exports2.isStaticCredsProfile = void 0;
    var isStaticCredsProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.aws_access_key_id === "string" && typeof arg.aws_secret_access_key === "string" && ["undefined", "string"].indexOf(typeof arg.aws_session_token) > -1;
    exports2.isStaticCredsProfile = isStaticCredsProfile;
    var resolveStaticCredentials = (profile) => Promise.resolve({
      accessKeyId: profile.aws_access_key_id,
      secretAccessKey: profile.aws_secret_access_key,
      sessionToken: profile.aws_session_token
    });
    exports2.resolveStaticCredentials = resolveStaticCredentials;
  }
});

var require_fromWebToken = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromWebToken = void 0;
    var property_provider_1 = require_dist_cjs6();
    var fromWebToken = (init) => () => {
      const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds, roleAssumerWithWebIdentity } = init;
      if (!roleAssumerWithWebIdentity) {
        throw new property_provider_1.CredentialsProviderError(`Role Arn '${roleArn}' needs to be assumed with web identity, but no role assumption callback was provided.`, false);
      }
      return roleAssumerWithWebIdentity({
        RoleArn: roleArn,
        RoleSessionName: roleSessionName !== null && roleSessionName !== void 0 ? roleSessionName : `aws-sdk-js-session-${Date.now()}`,
        WebIdentityToken: webIdentityToken,
        ProviderId: providerId,
        PolicyArns: policyArns,
        Policy: policy,
        DurationSeconds: durationSeconds
      });
    };
    exports2.fromWebToken = fromWebToken;
  }
});

var require_fromTokenFile = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromTokenFile = void 0;
    var property_provider_1 = require_dist_cjs6();
    var fs_1 = require("fs");
    var fromWebToken_1 = require_fromWebToken();
    var ENV_TOKEN_FILE = "AWS_WEB_IDENTITY_TOKEN_FILE";
    var ENV_ROLE_ARN = "AWS_ROLE_ARN";
    var ENV_ROLE_SESSION_NAME = "AWS_ROLE_SESSION_NAME";
    var fromTokenFile = (init = {}) => async () => {
      var _a, _b, _c;
      const webIdentityTokenFile = (_a = init === null || init === void 0 ? void 0 : init.webIdentityTokenFile) !== null && _a !== void 0 ? _a : process.env[ENV_TOKEN_FILE];
      const roleArn = (_b = init === null || init === void 0 ? void 0 : init.roleArn) !== null && _b !== void 0 ? _b : process.env[ENV_ROLE_ARN];
      const roleSessionName = (_c = init === null || init === void 0 ? void 0 : init.roleSessionName) !== null && _c !== void 0 ? _c : process.env[ENV_ROLE_SESSION_NAME];
      if (!webIdentityTokenFile || !roleArn) {
        throw new property_provider_1.CredentialsProviderError("Web identity configuration not specified");
      }
      return (0, fromWebToken_1.fromWebToken)({
        ...init,
        webIdentityToken: (0, fs_1.readFileSync)(webIdentityTokenFile, { encoding: "ascii" }),
        roleArn,
        roleSessionName
      })();
    };
    exports2.fromTokenFile = fromTokenFile;
  }
});

var require_dist_cjs49 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromTokenFile(), exports2);
    tslib_1.__exportStar(require_fromWebToken(), exports2);
  }
});

var require_resolveWebIdentityCredentials = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveWebIdentityCredentials = exports2.isWebIdentityProfile = void 0;
    var credential_provider_web_identity_1 = require_dist_cjs49();
    var isWebIdentityProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.web_identity_token_file === "string" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1;
    exports2.isWebIdentityProfile = isWebIdentityProfile;
    var resolveWebIdentityCredentials = async (profile, options) => (0, credential_provider_web_identity_1.fromTokenFile)({
      webIdentityTokenFile: profile.web_identity_token_file,
      roleArn: profile.role_arn,
      roleSessionName: profile.role_session_name,
      roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity
    })();
    exports2.resolveWebIdentityCredentials = resolveWebIdentityCredentials;
  }
});

var require_resolveProfileData = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveProfileData = void 0;
    var property_provider_1 = require_dist_cjs6();
    var resolveAssumeRoleCredentials_1 = require_resolveAssumeRoleCredentials();
    var resolveProcessCredentials_1 = require_resolveProcessCredentials2();
    var resolveSsoCredentials_1 = require_resolveSsoCredentials();
    var resolveStaticCredentials_1 = require_resolveStaticCredentials();
    var resolveWebIdentityCredentials_1 = require_resolveWebIdentityCredentials();
    var resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (Object.keys(visitedProfiles).length > 0 && (0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveAssumeRoleCredentials_1.isAssumeRoleProfile)(data)) {
        return (0, resolveAssumeRoleCredentials_1.resolveAssumeRoleCredentials)(profileName, profiles, options, visitedProfiles);
      }
      if ((0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveWebIdentityCredentials_1.isWebIdentityProfile)(data)) {
        return (0, resolveWebIdentityCredentials_1.resolveWebIdentityCredentials)(data, options);
      }
      if ((0, resolveProcessCredentials_1.isProcessProfile)(data)) {
        return (0, resolveProcessCredentials_1.resolveProcessCredentials)(options, profileName);
      }
      if ((0, resolveSsoCredentials_1.isSsoProfile)(data)) {
        return (0, resolveSsoCredentials_1.resolveSsoCredentials)(data);
      }
      throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} could not be found or parsed in shared credentials file.`);
    };
    exports2.resolveProfileData = resolveProfileData;
  }
});

var require_fromIni = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromIni = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs38();
    var resolveProfileData_1 = require_resolveProfileData();
    var fromIni = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      return (0, resolveProfileData_1.resolveProfileData)((0, shared_ini_file_loader_1.getProfileName)(init), profiles, init);
    };
    exports2.fromIni = fromIni;
  }
});

var require_dist_cjs50 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromIni(), exports2);
  }
});

var require_remoteProvider = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.remoteProvider = exports2.ENV_IMDS_DISABLED = void 0;
    var credential_provider_imds_1 = require_dist_cjs40();
    var property_provider_1 = require_dist_cjs6();
    exports2.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    var remoteProvider = (init) => {
      if (process.env[credential_provider_imds_1.ENV_CMDS_RELATIVE_URI] || process.env[credential_provider_imds_1.ENV_CMDS_FULL_URI]) {
        return (0, credential_provider_imds_1.fromContainerMetadata)(init);
      }
      if (process.env[exports2.ENV_IMDS_DISABLED]) {
        return async () => {
          throw new property_provider_1.CredentialsProviderError("EC2 Instance Metadata Service access disabled");
        };
      }
      return (0, credential_provider_imds_1.fromInstanceMetadata)(init);
    };
    exports2.remoteProvider = remoteProvider;
  }
});

var require_defaultProvider = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultProvider = void 0;
    var credential_provider_env_1 = require_dist_cjs37();
    var credential_provider_ini_1 = require_dist_cjs50();
    var credential_provider_process_1 = require_dist_cjs41();
    var credential_provider_sso_1 = require_dist_cjs48();
    var credential_provider_web_identity_1 = require_dist_cjs49();
    var property_provider_1 = require_dist_cjs6();
    var shared_ini_file_loader_1 = require_dist_cjs38();
    var remoteProvider_1 = require_remoteProvider();
    var defaultProvider = (init = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)(...init.profile || process.env[shared_ini_file_loader_1.ENV_PROFILE] ? [] : [(0, credential_provider_env_1.fromEnv)()], (0, credential_provider_sso_1.fromSSO)(init), (0, credential_provider_ini_1.fromIni)(init), (0, credential_provider_process_1.fromProcess)(init), (0, credential_provider_web_identity_1.fromTokenFile)(init), (0, remoteProvider_1.remoteProvider)(init), async () => {
      throw new property_provider_1.CredentialsProviderError("Could not load credentials from any providers", false);
    }), (credentials) => credentials.expiration !== void 0 && credentials.expiration.getTime() - Date.now() < 3e5, (credentials) => credentials.expiration !== void 0);
    exports2.defaultProvider = defaultProvider;
  }
});

var require_dist_cjs51 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_defaultProvider(), exports2);
  }
});

var require_ruleset2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/ruleset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ruleSet = void 0;
    var F = "required";
    var G = "type";
    var H = "fn";
    var I = "argv";
    var J = "ref";
    var a = false;
    var b = true;
    var c = "booleanEquals";
    var d = "tree";
    var e = "stringEquals";
    var f = "sigv4";
    var g = "sts";
    var h = "us-east-1";
    var i = "endpoint";
    var j = "https://sts.{Region}.{PartitionResult#dnsSuffix}";
    var k = "error";
    var l = "getAttr";
    var m = { [F]: false, [G]: "String" };
    var n = { [F]: true, "default": false, [G]: "Boolean" };
    var o = { [J]: "Endpoint" };
    var p = { [H]: "isSet", [I]: [{ [J]: "Region" }] };
    var q = { [J]: "Region" };
    var r = { [H]: "aws.partition", [I]: [q], "assign": "PartitionResult" };
    var s = { [J]: "UseFIPS" };
    var t = { [J]: "UseDualStack" };
    var u = { "url": "https://sts.amazonaws.com", "properties": { "authSchemes": [{ "name": f, "signingName": g, "signingRegion": h }] }, "headers": {} };
    var v = {};
    var w = { "conditions": [{ [H]: e, [I]: [q, "aws-global"] }], [i]: u, [G]: i };
    var x = { [H]: c, [I]: [s, true] };
    var y = { [H]: c, [I]: [t, true] };
    var z = { [H]: c, [I]: [true, { [H]: l, [I]: [{ [J]: "PartitionResult" }, "supportsFIPS"] }] };
    var A = { [J]: "PartitionResult" };
    var B = { [H]: c, [I]: [true, { [H]: l, [I]: [A, "supportsDualStack"] }] };
    var C = [{ [H]: "isSet", [I]: [o] }];
    var D = [x];
    var E = [y];
    var _data = { version: "1.0", parameters: { Region: m, UseDualStack: n, UseFIPS: n, Endpoint: m, UseGlobalEndpoint: n }, rules: [{ conditions: [{ [H]: c, [I]: [{ [J]: "UseGlobalEndpoint" }, b] }, { [H]: "not", [I]: C }, p, r, { [H]: c, [I]: [s, a] }, { [H]: c, [I]: [t, a] }], [G]: d, rules: [{ conditions: [{ [H]: e, [I]: [q, "ap-northeast-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "ap-south-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "ap-southeast-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "ap-southeast-2"] }], endpoint: u, [G]: i }, w, { conditions: [{ [H]: e, [I]: [q, "ca-central-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "eu-central-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "eu-north-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "eu-west-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "eu-west-2"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "eu-west-3"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "sa-east-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, h] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "us-east-2"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "us-west-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "us-west-2"] }], endpoint: u, [G]: i }, { endpoint: { url: j, properties: { authSchemes: [{ name: f, signingName: g, signingRegion: "{Region}" }] }, headers: v }, [G]: i }] }, { conditions: C, [G]: d, rules: [{ conditions: D, error: "Invalid Configuration: FIPS and custom endpoint are not supported", [G]: k }, { [G]: d, rules: [{ conditions: E, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", [G]: k }, { endpoint: { url: o, properties: v, headers: v }, [G]: i }] }] }, { [G]: d, rules: [{ conditions: [p], [G]: d, rules: [{ conditions: [r], [G]: d, rules: [{ conditions: [x, y], [G]: d, rules: [{ conditions: [z, B], [G]: d, rules: [{ [G]: d, rules: [{ endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v, headers: v }, [G]: i }] }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", [G]: k }] }, { conditions: D, [G]: d, rules: [{ conditions: [z], [G]: d, rules: [{ [G]: d, rules: [{ conditions: [{ [H]: e, [I]: ["aws-us-gov", { [H]: l, [I]: [A, "name"] }] }], endpoint: { url: "https://sts.{Region}.amazonaws.com", properties: v, headers: v }, [G]: i }, { endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dnsSuffix}", properties: v, headers: v }, [G]: i }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", [G]: k }] }, { conditions: E, [G]: d, rules: [{ conditions: [B], [G]: d, rules: [{ [G]: d, rules: [{ endpoint: { url: "https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v, headers: v }, [G]: i }] }] }, { error: "DualStack is enabled but this partition does not support DualStack", [G]: k }] }, { [G]: d, rules: [w, { endpoint: { url: j, properties: v, headers: v }, [G]: i }] }] }] }, { error: "Invalid Configuration: Missing Region", [G]: k }] }] };
    exports2.ruleSet = _data;
  }
});

var require_endpointResolver2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/endpointResolver.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs18();
    var ruleset_1 = require_ruleset2();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports2.defaultEndpointResolver = defaultEndpointResolver;
  }
});

var require_runtimeConfig_shared2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var url_parser_1 = require_dist_cjs24();
    var util_base64_1 = require_dist_cjs31();
    var util_utf8_1 = require_dist_cjs13();
    var endpointResolver_1 = require_endpointResolver2();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2011-06-15",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      extensions: config?.extensions ?? [],
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "STS",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

var require_runtimeConfig2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package3());
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var credential_provider_node_1 = require_dist_cjs51();
    var util_user_agent_node_1 = require_dist_cjs42();
    var config_resolver_1 = require_dist_cjs21();
    var hash_node_1 = require_dist_cjs43();
    var middleware_retry_1 = require_dist_cjs29();
    var node_config_provider_1 = require_dist_cjs39();
    var node_http_handler_1 = require_dist_cjs33();
    var util_body_length_node_1 = require_dist_cjs44();
    var util_retry_1 = require_dist_cjs28();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared2();
    var smithy_client_1 = require_dist_cjs35();
    var util_defaults_mode_node_1 = require_dist_cjs45();
    var smithy_client_2 = require_dist_cjs35();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? (0, defaultStsRoleAssumers_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

var require_runtimeExtensions2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeExtensions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveRuntimeExtensions = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var asPartial = (t) => t;
    var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial((0, smithy_client_1.getDefaultExtensionConfiguration)(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...(0, smithy_client_1.resolveDefaultRuntimeConfig)(extensionConfiguration)
      };
    };
    exports2.resolveRuntimeExtensions = resolveRuntimeExtensions;
  }
});

var require_STSClient = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.STSClient = exports2.__Client = void 0;
    var middleware_host_header_1 = require_dist_cjs3();
    var middleware_logger_1 = require_dist_cjs4();
    var middleware_recursion_detection_1 = require_dist_cjs5();
    var middleware_sdk_sts_1 = require_dist_cjs36();
    var middleware_user_agent_1 = require_dist_cjs19();
    var config_resolver_1 = require_dist_cjs21();
    var middleware_content_length_1 = require_dist_cjs22();
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_retry_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "__Client", { enumerable: true, get: function() {
      return smithy_client_1.Client;
    } });
    var EndpointParameters_1 = require_EndpointParameters2();
    var runtimeConfig_1 = require_runtimeConfig2();
    var runtimeExtensions_1 = require_runtimeExtensions2();
    var STSClient = class _STSClient extends smithy_client_1.Client {
      constructor(...[configuration]) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_sdk_sts_1.resolveStsAuthConfig)(_config_5, { stsClientCtor: _STSClient });
        const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);
        const _config_8 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_7, configuration?.extensions || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports2.STSClient = STSClient;
  }
});

var require_AssumeRoleWithSAMLCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AssumeRoleWithSAMLCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleWithSAMLCommand = class _AssumeRoleWithSAMLCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _AssumeRoleWithSAMLCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleWithSAMLCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_AssumeRoleWithSAMLCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_AssumeRoleWithSAMLCommand)(output, context);
      }
    };
    exports2.AssumeRoleWithSAMLCommand = AssumeRoleWithSAMLCommand;
  }
});

var require_DecodeAuthorizationMessageCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DecodeAuthorizationMessageCommand = exports2.$Command = void 0;
    var middleware_signing_1 = require_dist_cjs16();
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query();
    var DecodeAuthorizationMessageCommand = class _DecodeAuthorizationMessageCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DecodeAuthorizationMessageCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "DecodeAuthorizationMessageCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DecodeAuthorizationMessageCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DecodeAuthorizationMessageCommand)(output, context);
      }
    };
    exports2.DecodeAuthorizationMessageCommand = DecodeAuthorizationMessageCommand;
  }
});

var require_GetAccessKeyInfoCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetAccessKeyInfoCommand = exports2.$Command = void 0;
    var middleware_signing_1 = require_dist_cjs16();
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query();
    var GetAccessKeyInfoCommand = class _GetAccessKeyInfoCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetAccessKeyInfoCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetAccessKeyInfoCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_GetAccessKeyInfoCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_GetAccessKeyInfoCommand)(output, context);
      }
    };
    exports2.GetAccessKeyInfoCommand = GetAccessKeyInfoCommand;
  }
});

var require_GetCallerIdentityCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetCallerIdentityCommand = exports2.$Command = void 0;
    var middleware_signing_1 = require_dist_cjs16();
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query();
    var GetCallerIdentityCommand = class _GetCallerIdentityCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetCallerIdentityCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetCallerIdentityCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_GetCallerIdentityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_GetCallerIdentityCommand)(output, context);
      }
    };
    exports2.GetCallerIdentityCommand = GetCallerIdentityCommand;
  }
});

var require_GetFederationTokenCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetFederationTokenCommand = exports2.$Command = void 0;
    var middleware_signing_1 = require_dist_cjs16();
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetFederationTokenCommand = class _GetFederationTokenCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetFederationTokenCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetFederationTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.GetFederationTokenResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_GetFederationTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_GetFederationTokenCommand)(output, context);
      }
    };
    exports2.GetFederationTokenCommand = GetFederationTokenCommand;
  }
});

var require_GetSessionTokenCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetSessionTokenCommand = exports2.$Command = void 0;
    var middleware_signing_1 = require_dist_cjs16();
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetSessionTokenCommand = class _GetSessionTokenCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetSessionTokenCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetSessionTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.GetSessionTokenResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_GetSessionTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_GetSessionTokenCommand)(output, context);
      }
    };
    exports2.GetSessionTokenCommand = GetSessionTokenCommand;
  }
});

var require_STS = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/STS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.STS = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithSAMLCommand_1 = require_AssumeRoleWithSAMLCommand();
    var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
    var DecodeAuthorizationMessageCommand_1 = require_DecodeAuthorizationMessageCommand();
    var GetAccessKeyInfoCommand_1 = require_GetAccessKeyInfoCommand();
    var GetCallerIdentityCommand_1 = require_GetCallerIdentityCommand();
    var GetFederationTokenCommand_1 = require_GetFederationTokenCommand();
    var GetSessionTokenCommand_1 = require_GetSessionTokenCommand();
    var STSClient_1 = require_STSClient();
    var commands = {
      AssumeRoleCommand: AssumeRoleCommand_1.AssumeRoleCommand,
      AssumeRoleWithSAMLCommand: AssumeRoleWithSAMLCommand_1.AssumeRoleWithSAMLCommand,
      AssumeRoleWithWebIdentityCommand: AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand,
      DecodeAuthorizationMessageCommand: DecodeAuthorizationMessageCommand_1.DecodeAuthorizationMessageCommand,
      GetAccessKeyInfoCommand: GetAccessKeyInfoCommand_1.GetAccessKeyInfoCommand,
      GetCallerIdentityCommand: GetCallerIdentityCommand_1.GetCallerIdentityCommand,
      GetFederationTokenCommand: GetFederationTokenCommand_1.GetFederationTokenCommand,
      GetSessionTokenCommand: GetSessionTokenCommand_1.GetSessionTokenCommand
    };
    var STS = class extends STSClient_1.STSClient {
    };
    exports2.STS = STS;
    (0, smithy_client_1.createAggregatedClient)(commands, STS);
  }
});

var require_commands2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AssumeRoleCommand(), exports2);
    tslib_1.__exportStar(require_AssumeRoleWithSAMLCommand(), exports2);
    tslib_1.__exportStar(require_AssumeRoleWithWebIdentityCommand(), exports2);
    tslib_1.__exportStar(require_DecodeAuthorizationMessageCommand(), exports2);
    tslib_1.__exportStar(require_GetAccessKeyInfoCommand(), exports2);
    tslib_1.__exportStar(require_GetCallerIdentityCommand(), exports2);
    tslib_1.__exportStar(require_GetFederationTokenCommand(), exports2);
    tslib_1.__exportStar(require_GetSessionTokenCommand(), exports2);
  }
});

var require_models2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_0(), exports2);
  }
});

var require_defaultRoleAssumers = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decorateDefaultCredentialProvider = exports2.getDefaultRoleAssumerWithWebIdentity = exports2.getDefaultRoleAssumer = void 0;
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var STSClient_1 = require_STSClient();
    var getCustomizableStsClientCtor = (baseCtor, customizations) => {
      if (!customizations)
        return baseCtor;
      else
        return class CustomizableSTSClient extends baseCtor {
          constructor(config) {
            super(config);
            for (const customization of customizations) {
              this.middlewareStack.use(customization);
            }
          }
        };
    };
    var getDefaultRoleAssumer = (stsOptions = {}, stsPlugins) => (0, defaultStsRoleAssumers_1.getDefaultRoleAssumer)(stsOptions, getCustomizableStsClientCtor(STSClient_1.STSClient, stsPlugins));
    exports2.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions = {}, stsPlugins) => (0, defaultStsRoleAssumers_1.getDefaultRoleAssumerWithWebIdentity)(stsOptions, getCustomizableStsClientCtor(STSClient_1.STSClient, stsPlugins));
    exports2.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) => provider({
      roleAssumer: (0, exports2.getDefaultRoleAssumer)(input),
      roleAssumerWithWebIdentity: (0, exports2.getDefaultRoleAssumerWithWebIdentity)(input),
      ...input
    });
    exports2.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
  }
});

var require_dist_cjs52 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.STSServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_STSClient(), exports2);
    tslib_1.__exportStar(require_STS(), exports2);
    tslib_1.__exportStar(require_commands2(), exports2);
    tslib_1.__exportStar(require_models2(), exports2);
    tslib_1.__exportStar(require_defaultRoleAssumers(), exports2);
    var STSServiceException_1 = require_STSServiceException();
    Object.defineProperty(exports2, "STSServiceException", { enumerable: true, get: function() {
      return STSServiceException_1.STSServiceException;
    } });
  }
});

var require_ruleset3 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/endpoint/ruleset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ruleSet = void 0;
    var s = "required";
    var t = "fn";
    var u = "argv";
    var v = "ref";
    var a = "isSet";
    var b = "tree";
    var c = "error";
    var d = "endpoint";
    var e = "PartitionResult";
    var f = "getAttr";
    var g = { [s]: false, "type": "String" };
    var h = { [s]: true, "default": false, "type": "Boolean" };
    var i = { [v]: "Endpoint" };
    var j = { [t]: "booleanEquals", [u]: [{ [v]: "UseFIPS" }, true] };
    var k = { [t]: "booleanEquals", [u]: [{ [v]: "UseDualStack" }, true] };
    var l = {};
    var m = { [t]: "booleanEquals", [u]: [true, { [t]: f, [u]: [{ [v]: e }, "supportsFIPS"] }] };
    var n = { [v]: e };
    var o = { [t]: "booleanEquals", [u]: [true, { [t]: f, [u]: [n, "supportsDualStack"] }] };
    var p = [j];
    var q = [k];
    var r = [{ [v]: "Region" }];
    var _data = { version: "1.0", parameters: { Region: g, UseDualStack: h, UseFIPS: h, Endpoint: g }, rules: [{ conditions: [{ [t]: a, [u]: [i] }], type: b, rules: [{ conditions: p, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { type: b, rules: [{ conditions: q, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: i, properties: l, headers: l }, type: d }] }] }, { type: b, rules: [{ conditions: [{ [t]: a, [u]: r }], type: b, rules: [{ conditions: [{ [t]: "aws.partition", [u]: r, assign: e }], type: b, rules: [{ conditions: [j, k], type: b, rules: [{ conditions: [m, o], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://elasticache-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: l, headers: l }, type: d }] }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: p, type: b, rules: [{ conditions: [m], type: b, rules: [{ type: b, rules: [{ conditions: [{ [t]: "stringEquals", [u]: ["aws-us-gov", { [t]: f, [u]: [n, "name"] }] }], endpoint: { url: "https://elasticache.{Region}.amazonaws.com", properties: l, headers: l }, type: d }, { endpoint: { url: "https://elasticache-fips.{Region}.{PartitionResult#dnsSuffix}", properties: l, headers: l }, type: d }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: q, type: b, rules: [{ conditions: [o], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://elasticache.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: l, headers: l }, type: d }] }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { type: b, rules: [{ endpoint: { url: "https://elasticache.{Region}.{PartitionResult#dnsSuffix}", properties: l, headers: l }, type: d }] }] }] }, { error: "Invalid Configuration: Missing Region", type: c }] }] };
    exports2.ruleSet = _data;
  }
});

var require_endpointResolver3 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/endpoint/endpointResolver.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs18();
    var ruleset_1 = require_ruleset3();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports2.defaultEndpointResolver = defaultEndpointResolver;
  }
});

var require_runtimeConfig_shared3 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/runtimeConfig.shared.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var url_parser_1 = require_dist_cjs24();
    var util_base64_1 = require_dist_cjs31();
    var util_utf8_1 = require_dist_cjs13();
    var endpointResolver_1 = require_endpointResolver3();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2015-02-02",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      extensions: config?.extensions ?? [],
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "ElastiCache",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

var require_runtimeConfig3 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/runtimeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package2());
    var client_sts_1 = require_dist_cjs52();
    var credential_provider_node_1 = require_dist_cjs51();
    var util_user_agent_node_1 = require_dist_cjs42();
    var config_resolver_1 = require_dist_cjs21();
    var hash_node_1 = require_dist_cjs43();
    var middleware_retry_1 = require_dist_cjs29();
    var node_config_provider_1 = require_dist_cjs39();
    var node_http_handler_1 = require_dist_cjs33();
    var util_body_length_node_1 = require_dist_cjs44();
    var util_retry_1 = require_dist_cjs28();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared3();
    var smithy_client_1 = require_dist_cjs35();
    var util_defaults_mode_node_1 = require_dist_cjs45();
    var smithy_client_2 = require_dist_cjs35();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? (0, client_sts_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

var require_runtimeExtensions3 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/runtimeExtensions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveRuntimeExtensions = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var asPartial = (t) => t;
    var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial((0, smithy_client_1.getDefaultExtensionConfiguration)(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...(0, smithy_client_1.resolveDefaultRuntimeConfig)(extensionConfiguration)
      };
    };
    exports2.resolveRuntimeExtensions = resolveRuntimeExtensions;
  }
});

var require_ElastiCacheClient = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/ElastiCacheClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ElastiCacheClient = exports2.__Client = void 0;
    var middleware_host_header_1 = require_dist_cjs3();
    var middleware_logger_1 = require_dist_cjs4();
    var middleware_recursion_detection_1 = require_dist_cjs5();
    var middleware_signing_1 = require_dist_cjs16();
    var middleware_user_agent_1 = require_dist_cjs19();
    var config_resolver_1 = require_dist_cjs21();
    var middleware_content_length_1 = require_dist_cjs22();
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_retry_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "__Client", { enumerable: true, get: function() {
      return smithy_client_1.Client;
    } });
    var EndpointParameters_1 = require_EndpointParameters();
    var runtimeConfig_1 = require_runtimeConfig3();
    var runtimeExtensions_1 = require_runtimeExtensions3();
    var ElastiCacheClient = class extends smithy_client_1.Client {
      constructor(...[configuration]) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);
        const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);
        const _config_8 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_7, configuration?.extensions || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports2.ElastiCacheClient = ElastiCacheClient;
  }
});

var require_ElastiCacheServiceException = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/models/ElastiCacheServiceException.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ElastiCacheServiceException = exports2.__ServiceException = void 0;
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "__ServiceException", { enumerable: true, get: function() {
      return smithy_client_1.ServiceException;
    } });
    var ElastiCacheServiceException = class _ElastiCacheServiceException extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _ElastiCacheServiceException.prototype);
      }
    };
    exports2.ElastiCacheServiceException = ElastiCacheServiceException;
  }
});

var require_models_03 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/models/models_0.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CacheSubnetGroupQuotaExceededFault = exports2.CacheSubnetGroupAlreadyExistsFault = exports2.CacheSecurityGroupQuotaExceededFault = exports2.CacheSecurityGroupAlreadyExistsFault = exports2.InvalidCacheParameterGroupStateFault = exports2.CacheParameterGroupQuotaExceededFault = exports2.CacheParameterGroupAlreadyExistsFault = exports2.NodeQuotaForCustomerExceededFault = exports2.NodeQuotaForClusterExceededFault = exports2.InvalidVPCNetworkStateFault = exports2.InsufficientCacheClusterCapacityFault = exports2.OutpostMode = exports2.AZMode = exports2.ClusterQuotaForCustomerExceededFault = exports2.CacheClusterAlreadyExistsFault = exports2.SnapshotQuotaExceededFault = exports2.SnapshotAlreadyExistsFault = exports2.InvalidSnapshotStateFault = exports2.ReplicationGroupNotUnderMigrationFault = exports2.TransitEncryptionMode = exports2.PendingAutomaticFailoverStatus = exports2.AuthTokenUpdateStatus = exports2.NetworkType = exports2.MultiAZStatus = exports2.LogDeliveryConfigurationStatus = exports2.LogType = exports2.LogFormat = exports2.DestinationType = exports2.IpDiscovery = exports2.DataTieringStatus = exports2.ClusterMode = exports2.AutomaticFailoverStatus = exports2.UpdateActionStatus = exports2.ServiceUpdateNotFoundFault = exports2.InvalidParameterValueException = exports2.InvalidParameterCombinationException = exports2.InvalidCacheSecurityGroupStateFault = exports2.AuthorizationAlreadyExistsFault = exports2.UserNotFoundFault = exports2.UserGroupNotFoundFault = exports2.TagQuotaPerResourceExceeded = exports2.SnapshotNotFoundFault = exports2.ReservedCacheNodeNotFoundFault = exports2.ReplicationGroupNotFoundFault = exports2.InvalidReplicationGroupStateFault = exports2.InvalidARNFault = exports2.CacheSubnetGroupNotFoundFault = exports2.CacheSecurityGroupNotFoundFault = exports2.CacheParameterGroupNotFoundFault = exports2.CacheClusterNotFoundFault = void 0;
    exports2.TestFailoverNotAvailableFault = exports2.NodeGroupNotFoundFault = exports2.APICallRateForCustomerExceededFault = exports2.ReplicationGroupAlreadyUnderMigrationFault = exports2.AuthorizationNotFoundFault = exports2.TagNotFoundFault = exports2.ReservedCacheNodeQuotaExceededFault = exports2.ReservedCacheNodeAlreadyExistsFault = exports2.SubnetInUse = exports2.AuthTokenUpdateStrategyType = exports2.InvalidKMSKeyFault = exports2.SlaMet = exports2.NodeUpdateStatus = exports2.NodeUpdateInitiatedBy = exports2.ServiceUpdateType = exports2.ServiceUpdateSeverity = exports2.ServiceUpdateStatus = exports2.ReservedCacheNodesOfferingNotFoundFault = exports2.SourceType = exports2.ChangeType = exports2.InvalidUserStateFault = exports2.DefaultUserAssociatedToUserGroupFault = exports2.CacheSubnetGroupInUse = exports2.NoOperationFault = exports2.UserGroupQuotaExceededFault = exports2.UserGroupAlreadyExistsFault = exports2.DefaultUserRequired = exports2.UserQuotaExceededFault = exports2.UserAlreadyExistsFault = exports2.AuthenticationType = exports2.DuplicateUserNameFault = exports2.InputAuthenticationType = exports2.SnapshotFeatureNotSupportedFault = exports2.ReplicationGroupAlreadyExistsFault = exports2.NodeGroupsPerReplicationGroupQuotaExceededFault = exports2.InvalidUserGroupStateFault = exports2.InvalidGlobalReplicationGroupStateFault = exports2.InvalidCacheClusterStateFault = exports2.GlobalReplicationGroupNotFoundFault = exports2.ServiceLinkedRoleNotFoundFault = exports2.GlobalReplicationGroupAlreadyExistsFault = exports2.SubnetNotAllowedFault = exports2.InvalidSubnet = exports2.CacheSubnetQuotaExceededFault = void 0;
    var ElastiCacheServiceException_1 = require_ElastiCacheServiceException();
    var CacheClusterNotFoundFault = class _CacheClusterNotFoundFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "CacheClusterNotFoundFault",
          $fault: "client",
          ...opts
        });
        this.name = "CacheClusterNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _CacheClusterNotFoundFault.prototype);
      }
    };
    exports2.CacheClusterNotFoundFault = CacheClusterNotFoundFault;
    var CacheParameterGroupNotFoundFault = class _CacheParameterGroupNotFoundFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "CacheParameterGroupNotFoundFault",
          $fault: "client",
          ...opts
        });
        this.name = "CacheParameterGroupNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _CacheParameterGroupNotFoundFault.prototype);
      }
    };
    exports2.CacheParameterGroupNotFoundFault = CacheParameterGroupNotFoundFault;
    var CacheSecurityGroupNotFoundFault = class _CacheSecurityGroupNotFoundFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "CacheSecurityGroupNotFoundFault",
          $fault: "client",
          ...opts
        });
        this.name = "CacheSecurityGroupNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _CacheSecurityGroupNotFoundFault.prototype);
      }
    };
    exports2.CacheSecurityGroupNotFoundFault = CacheSecurityGroupNotFoundFault;
    var CacheSubnetGroupNotFoundFault = class _CacheSubnetGroupNotFoundFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "CacheSubnetGroupNotFoundFault",
          $fault: "client",
          ...opts
        });
        this.name = "CacheSubnetGroupNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _CacheSubnetGroupNotFoundFault.prototype);
      }
    };
    exports2.CacheSubnetGroupNotFoundFault = CacheSubnetGroupNotFoundFault;
    var InvalidARNFault = class _InvalidARNFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "InvalidARNFault",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidARNFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidARNFault.prototype);
      }
    };
    exports2.InvalidARNFault = InvalidARNFault;
    var InvalidReplicationGroupStateFault = class _InvalidReplicationGroupStateFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "InvalidReplicationGroupStateFault",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidReplicationGroupStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidReplicationGroupStateFault.prototype);
      }
    };
    exports2.InvalidReplicationGroupStateFault = InvalidReplicationGroupStateFault;
    var ReplicationGroupNotFoundFault = class _ReplicationGroupNotFoundFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "ReplicationGroupNotFoundFault",
          $fault: "client",
          ...opts
        });
        this.name = "ReplicationGroupNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ReplicationGroupNotFoundFault.prototype);
      }
    };
    exports2.ReplicationGroupNotFoundFault = ReplicationGroupNotFoundFault;
    var ReservedCacheNodeNotFoundFault = class _ReservedCacheNodeNotFoundFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "ReservedCacheNodeNotFoundFault",
          $fault: "client",
          ...opts
        });
        this.name = "ReservedCacheNodeNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ReservedCacheNodeNotFoundFault.prototype);
      }
    };
    exports2.ReservedCacheNodeNotFoundFault = ReservedCacheNodeNotFoundFault;
    var SnapshotNotFoundFault = class _SnapshotNotFoundFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "SnapshotNotFoundFault",
          $fault: "client",
          ...opts
        });
        this.name = "SnapshotNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _SnapshotNotFoundFault.prototype);
      }
    };
    exports2.SnapshotNotFoundFault = SnapshotNotFoundFault;
    var TagQuotaPerResourceExceeded = class _TagQuotaPerResourceExceeded extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "TagQuotaPerResourceExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "TagQuotaPerResourceExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TagQuotaPerResourceExceeded.prototype);
      }
    };
    exports2.TagQuotaPerResourceExceeded = TagQuotaPerResourceExceeded;
    var UserGroupNotFoundFault = class _UserGroupNotFoundFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "UserGroupNotFoundFault",
          $fault: "client",
          ...opts
        });
        this.name = "UserGroupNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UserGroupNotFoundFault.prototype);
      }
    };
    exports2.UserGroupNotFoundFault = UserGroupNotFoundFault;
    var UserNotFoundFault = class _UserNotFoundFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "UserNotFoundFault",
          $fault: "client",
          ...opts
        });
        this.name = "UserNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UserNotFoundFault.prototype);
      }
    };
    exports2.UserNotFoundFault = UserNotFoundFault;
    var AuthorizationAlreadyExistsFault = class _AuthorizationAlreadyExistsFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "AuthorizationAlreadyExistsFault",
          $fault: "client",
          ...opts
        });
        this.name = "AuthorizationAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AuthorizationAlreadyExistsFault.prototype);
      }
    };
    exports2.AuthorizationAlreadyExistsFault = AuthorizationAlreadyExistsFault;
    var InvalidCacheSecurityGroupStateFault = class _InvalidCacheSecurityGroupStateFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "InvalidCacheSecurityGroupStateFault",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidCacheSecurityGroupStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidCacheSecurityGroupStateFault.prototype);
      }
    };
    exports2.InvalidCacheSecurityGroupStateFault = InvalidCacheSecurityGroupStateFault;
    var InvalidParameterCombinationException = class _InvalidParameterCombinationException extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "InvalidParameterCombinationException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidParameterCombinationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidParameterCombinationException.prototype);
      }
    };
    exports2.InvalidParameterCombinationException = InvalidParameterCombinationException;
    var InvalidParameterValueException = class _InvalidParameterValueException extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "InvalidParameterValueException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidParameterValueException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidParameterValueException.prototype);
      }
    };
    exports2.InvalidParameterValueException = InvalidParameterValueException;
    var ServiceUpdateNotFoundFault = class _ServiceUpdateNotFoundFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "ServiceUpdateNotFoundFault",
          $fault: "client",
          ...opts
        });
        this.name = "ServiceUpdateNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ServiceUpdateNotFoundFault.prototype);
      }
    };
    exports2.ServiceUpdateNotFoundFault = ServiceUpdateNotFoundFault;
    exports2.UpdateActionStatus = {
      COMPLETE: "complete",
      IN_PROGRESS: "in-progress",
      NOT_APPLICABLE: "not-applicable",
      NOT_APPLIED: "not-applied",
      SCHEDULED: "scheduled",
      SCHEDULING: "scheduling",
      STOPPED: "stopped",
      STOPPING: "stopping",
      WAITING_TO_START: "waiting-to-start"
    };
    exports2.AutomaticFailoverStatus = {
      DISABLED: "disabled",
      DISABLING: "disabling",
      ENABLED: "enabled",
      ENABLING: "enabling"
    };
    exports2.ClusterMode = {
      COMPATIBLE: "compatible",
      DISABLED: "disabled",
      ENABLED: "enabled"
    };
    exports2.DataTieringStatus = {
      DISABLED: "disabled",
      ENABLED: "enabled"
    };
    exports2.IpDiscovery = {
      IPV4: "ipv4",
      IPV6: "ipv6"
    };
    exports2.DestinationType = {
      CloudWatchLogs: "cloudwatch-logs",
      KinesisFirehose: "kinesis-firehose"
    };
    exports2.LogFormat = {
      JSON: "json",
      TEXT: "text"
    };
    exports2.LogType = {
      ENGINE_LOG: "engine-log",
      SLOW_LOG: "slow-log"
    };
    exports2.LogDeliveryConfigurationStatus = {
      ACTIVE: "active",
      DISABLING: "disabling",
      ENABLING: "enabling",
      ERROR: "error",
      MODIFYING: "modifying"
    };
    exports2.MultiAZStatus = {
      DISABLED: "disabled",
      ENABLED: "enabled"
    };
    exports2.NetworkType = {
      DUAL_STACK: "dual_stack",
      IPV4: "ipv4",
      IPV6: "ipv6"
    };
    exports2.AuthTokenUpdateStatus = {
      ROTATING: "ROTATING",
      SETTING: "SETTING"
    };
    exports2.PendingAutomaticFailoverStatus = {
      DISABLED: "disabled",
      ENABLED: "enabled"
    };
    exports2.TransitEncryptionMode = {
      PREFERRED: "preferred",
      REQUIRED: "required"
    };
    var ReplicationGroupNotUnderMigrationFault = class _ReplicationGroupNotUnderMigrationFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "ReplicationGroupNotUnderMigrationFault",
          $fault: "client",
          ...opts
        });
        this.name = "ReplicationGroupNotUnderMigrationFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ReplicationGroupNotUnderMigrationFault.prototype);
      }
    };
    exports2.ReplicationGroupNotUnderMigrationFault = ReplicationGroupNotUnderMigrationFault;
    var InvalidSnapshotStateFault = class _InvalidSnapshotStateFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "InvalidSnapshotStateFault",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidSnapshotStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidSnapshotStateFault.prototype);
      }
    };
    exports2.InvalidSnapshotStateFault = InvalidSnapshotStateFault;
    var SnapshotAlreadyExistsFault = class _SnapshotAlreadyExistsFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "SnapshotAlreadyExistsFault",
          $fault: "client",
          ...opts
        });
        this.name = "SnapshotAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _SnapshotAlreadyExistsFault.prototype);
      }
    };
    exports2.SnapshotAlreadyExistsFault = SnapshotAlreadyExistsFault;
    var SnapshotQuotaExceededFault = class _SnapshotQuotaExceededFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "SnapshotQuotaExceededFault",
          $fault: "client",
          ...opts
        });
        this.name = "SnapshotQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _SnapshotQuotaExceededFault.prototype);
      }
    };
    exports2.SnapshotQuotaExceededFault = SnapshotQuotaExceededFault;
    var CacheClusterAlreadyExistsFault = class _CacheClusterAlreadyExistsFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "CacheClusterAlreadyExistsFault",
          $fault: "client",
          ...opts
        });
        this.name = "CacheClusterAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _CacheClusterAlreadyExistsFault.prototype);
      }
    };
    exports2.CacheClusterAlreadyExistsFault = CacheClusterAlreadyExistsFault;
    var ClusterQuotaForCustomerExceededFault = class _ClusterQuotaForCustomerExceededFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "ClusterQuotaForCustomerExceededFault",
          $fault: "client",
          ...opts
        });
        this.name = "ClusterQuotaForCustomerExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ClusterQuotaForCustomerExceededFault.prototype);
      }
    };
    exports2.ClusterQuotaForCustomerExceededFault = ClusterQuotaForCustomerExceededFault;
    exports2.AZMode = {
      CROSS_AZ: "cross-az",
      SINGLE_AZ: "single-az"
    };
    exports2.OutpostMode = {
      CROSS_OUTPOST: "cross-outpost",
      SINGLE_OUTPOST: "single-outpost"
    };
    var InsufficientCacheClusterCapacityFault = class _InsufficientCacheClusterCapacityFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "InsufficientCacheClusterCapacityFault",
          $fault: "client",
          ...opts
        });
        this.name = "InsufficientCacheClusterCapacityFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InsufficientCacheClusterCapacityFault.prototype);
      }
    };
    exports2.InsufficientCacheClusterCapacityFault = InsufficientCacheClusterCapacityFault;
    var InvalidVPCNetworkStateFault = class _InvalidVPCNetworkStateFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "InvalidVPCNetworkStateFault",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidVPCNetworkStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidVPCNetworkStateFault.prototype);
      }
    };
    exports2.InvalidVPCNetworkStateFault = InvalidVPCNetworkStateFault;
    var NodeQuotaForClusterExceededFault = class _NodeQuotaForClusterExceededFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "NodeQuotaForClusterExceededFault",
          $fault: "client",
          ...opts
        });
        this.name = "NodeQuotaForClusterExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _NodeQuotaForClusterExceededFault.prototype);
      }
    };
    exports2.NodeQuotaForClusterExceededFault = NodeQuotaForClusterExceededFault;
    var NodeQuotaForCustomerExceededFault = class _NodeQuotaForCustomerExceededFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "NodeQuotaForCustomerExceededFault",
          $fault: "client",
          ...opts
        });
        this.name = "NodeQuotaForCustomerExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _NodeQuotaForCustomerExceededFault.prototype);
      }
    };
    exports2.NodeQuotaForCustomerExceededFault = NodeQuotaForCustomerExceededFault;
    var CacheParameterGroupAlreadyExistsFault = class _CacheParameterGroupAlreadyExistsFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "CacheParameterGroupAlreadyExistsFault",
          $fault: "client",
          ...opts
        });
        this.name = "CacheParameterGroupAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _CacheParameterGroupAlreadyExistsFault.prototype);
      }
    };
    exports2.CacheParameterGroupAlreadyExistsFault = CacheParameterGroupAlreadyExistsFault;
    var CacheParameterGroupQuotaExceededFault = class _CacheParameterGroupQuotaExceededFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "CacheParameterGroupQuotaExceededFault",
          $fault: "client",
          ...opts
        });
        this.name = "CacheParameterGroupQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _CacheParameterGroupQuotaExceededFault.prototype);
      }
    };
    exports2.CacheParameterGroupQuotaExceededFault = CacheParameterGroupQuotaExceededFault;
    var InvalidCacheParameterGroupStateFault = class _InvalidCacheParameterGroupStateFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "InvalidCacheParameterGroupStateFault",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidCacheParameterGroupStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidCacheParameterGroupStateFault.prototype);
      }
    };
    exports2.InvalidCacheParameterGroupStateFault = InvalidCacheParameterGroupStateFault;
    var CacheSecurityGroupAlreadyExistsFault = class _CacheSecurityGroupAlreadyExistsFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "CacheSecurityGroupAlreadyExistsFault",
          $fault: "client",
          ...opts
        });
        this.name = "CacheSecurityGroupAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _CacheSecurityGroupAlreadyExistsFault.prototype);
      }
    };
    exports2.CacheSecurityGroupAlreadyExistsFault = CacheSecurityGroupAlreadyExistsFault;
    var CacheSecurityGroupQuotaExceededFault = class _CacheSecurityGroupQuotaExceededFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "CacheSecurityGroupQuotaExceededFault",
          $fault: "client",
          ...opts
        });
        this.name = "CacheSecurityGroupQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _CacheSecurityGroupQuotaExceededFault.prototype);
      }
    };
    exports2.CacheSecurityGroupQuotaExceededFault = CacheSecurityGroupQuotaExceededFault;
    var CacheSubnetGroupAlreadyExistsFault = class _CacheSubnetGroupAlreadyExistsFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "CacheSubnetGroupAlreadyExistsFault",
          $fault: "client",
          ...opts
        });
        this.name = "CacheSubnetGroupAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _CacheSubnetGroupAlreadyExistsFault.prototype);
      }
    };
    exports2.CacheSubnetGroupAlreadyExistsFault = CacheSubnetGroupAlreadyExistsFault;
    var CacheSubnetGroupQuotaExceededFault = class _CacheSubnetGroupQuotaExceededFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "CacheSubnetGroupQuotaExceededFault",
          $fault: "client",
          ...opts
        });
        this.name = "CacheSubnetGroupQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _CacheSubnetGroupQuotaExceededFault.prototype);
      }
    };
    exports2.CacheSubnetGroupQuotaExceededFault = CacheSubnetGroupQuotaExceededFault;
    var CacheSubnetQuotaExceededFault = class _CacheSubnetQuotaExceededFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "CacheSubnetQuotaExceededFault",
          $fault: "client",
          ...opts
        });
        this.name = "CacheSubnetQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _CacheSubnetQuotaExceededFault.prototype);
      }
    };
    exports2.CacheSubnetQuotaExceededFault = CacheSubnetQuotaExceededFault;
    var InvalidSubnet = class _InvalidSubnet extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "InvalidSubnet",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidSubnet";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidSubnet.prototype);
      }
    };
    exports2.InvalidSubnet = InvalidSubnet;
    var SubnetNotAllowedFault = class _SubnetNotAllowedFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "SubnetNotAllowedFault",
          $fault: "client",
          ...opts
        });
        this.name = "SubnetNotAllowedFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _SubnetNotAllowedFault.prototype);
      }
    };
    exports2.SubnetNotAllowedFault = SubnetNotAllowedFault;
    var GlobalReplicationGroupAlreadyExistsFault = class _GlobalReplicationGroupAlreadyExistsFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "GlobalReplicationGroupAlreadyExistsFault",
          $fault: "client",
          ...opts
        });
        this.name = "GlobalReplicationGroupAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _GlobalReplicationGroupAlreadyExistsFault.prototype);
      }
    };
    exports2.GlobalReplicationGroupAlreadyExistsFault = GlobalReplicationGroupAlreadyExistsFault;
    var ServiceLinkedRoleNotFoundFault = class _ServiceLinkedRoleNotFoundFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "ServiceLinkedRoleNotFoundFault",
          $fault: "client",
          ...opts
        });
        this.name = "ServiceLinkedRoleNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ServiceLinkedRoleNotFoundFault.prototype);
      }
    };
    exports2.ServiceLinkedRoleNotFoundFault = ServiceLinkedRoleNotFoundFault;
    var GlobalReplicationGroupNotFoundFault = class _GlobalReplicationGroupNotFoundFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "GlobalReplicationGroupNotFoundFault",
          $fault: "client",
          ...opts
        });
        this.name = "GlobalReplicationGroupNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _GlobalReplicationGroupNotFoundFault.prototype);
      }
    };
    exports2.GlobalReplicationGroupNotFoundFault = GlobalReplicationGroupNotFoundFault;
    var InvalidCacheClusterStateFault = class _InvalidCacheClusterStateFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "InvalidCacheClusterStateFault",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidCacheClusterStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidCacheClusterStateFault.prototype);
      }
    };
    exports2.InvalidCacheClusterStateFault = InvalidCacheClusterStateFault;
    var InvalidGlobalReplicationGroupStateFault = class _InvalidGlobalReplicationGroupStateFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "InvalidGlobalReplicationGroupStateFault",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidGlobalReplicationGroupStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidGlobalReplicationGroupStateFault.prototype);
      }
    };
    exports2.InvalidGlobalReplicationGroupStateFault = InvalidGlobalReplicationGroupStateFault;
    var InvalidUserGroupStateFault = class _InvalidUserGroupStateFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "InvalidUserGroupStateFault",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidUserGroupStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidUserGroupStateFault.prototype);
      }
    };
    exports2.InvalidUserGroupStateFault = InvalidUserGroupStateFault;
    var NodeGroupsPerReplicationGroupQuotaExceededFault = class _NodeGroupsPerReplicationGroupQuotaExceededFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "NodeGroupsPerReplicationGroupQuotaExceededFault",
          $fault: "client",
          ...opts
        });
        this.name = "NodeGroupsPerReplicationGroupQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _NodeGroupsPerReplicationGroupQuotaExceededFault.prototype);
      }
    };
    exports2.NodeGroupsPerReplicationGroupQuotaExceededFault = NodeGroupsPerReplicationGroupQuotaExceededFault;
    var ReplicationGroupAlreadyExistsFault = class _ReplicationGroupAlreadyExistsFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "ReplicationGroupAlreadyExistsFault",
          $fault: "client",
          ...opts
        });
        this.name = "ReplicationGroupAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ReplicationGroupAlreadyExistsFault.prototype);
      }
    };
    exports2.ReplicationGroupAlreadyExistsFault = ReplicationGroupAlreadyExistsFault;
    var SnapshotFeatureNotSupportedFault = class _SnapshotFeatureNotSupportedFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "SnapshotFeatureNotSupportedFault",
          $fault: "client",
          ...opts
        });
        this.name = "SnapshotFeatureNotSupportedFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _SnapshotFeatureNotSupportedFault.prototype);
      }
    };
    exports2.SnapshotFeatureNotSupportedFault = SnapshotFeatureNotSupportedFault;
    exports2.InputAuthenticationType = {
      IAM: "iam",
      NO_PASSWORD: "no-password-required",
      PASSWORD: "password"
    };
    var DuplicateUserNameFault = class _DuplicateUserNameFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "DuplicateUserNameFault",
          $fault: "client",
          ...opts
        });
        this.name = "DuplicateUserNameFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _DuplicateUserNameFault.prototype);
      }
    };
    exports2.DuplicateUserNameFault = DuplicateUserNameFault;
    exports2.AuthenticationType = {
      IAM: "iam",
      NO_PASSWORD: "no-password",
      PASSWORD: "password"
    };
    var UserAlreadyExistsFault = class _UserAlreadyExistsFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "UserAlreadyExistsFault",
          $fault: "client",
          ...opts
        });
        this.name = "UserAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UserAlreadyExistsFault.prototype);
      }
    };
    exports2.UserAlreadyExistsFault = UserAlreadyExistsFault;
    var UserQuotaExceededFault = class _UserQuotaExceededFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "UserQuotaExceededFault",
          $fault: "client",
          ...opts
        });
        this.name = "UserQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UserQuotaExceededFault.prototype);
      }
    };
    exports2.UserQuotaExceededFault = UserQuotaExceededFault;
    var DefaultUserRequired = class _DefaultUserRequired extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "DefaultUserRequired",
          $fault: "client",
          ...opts
        });
        this.name = "DefaultUserRequired";
        this.$fault = "client";
        Object.setPrototypeOf(this, _DefaultUserRequired.prototype);
      }
    };
    exports2.DefaultUserRequired = DefaultUserRequired;
    var UserGroupAlreadyExistsFault = class _UserGroupAlreadyExistsFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "UserGroupAlreadyExistsFault",
          $fault: "client",
          ...opts
        });
        this.name = "UserGroupAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UserGroupAlreadyExistsFault.prototype);
      }
    };
    exports2.UserGroupAlreadyExistsFault = UserGroupAlreadyExistsFault;
    var UserGroupQuotaExceededFault = class _UserGroupQuotaExceededFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "UserGroupQuotaExceededFault",
          $fault: "client",
          ...opts
        });
        this.name = "UserGroupQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UserGroupQuotaExceededFault.prototype);
      }
    };
    exports2.UserGroupQuotaExceededFault = UserGroupQuotaExceededFault;
    var NoOperationFault = class _NoOperationFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "NoOperationFault",
          $fault: "client",
          ...opts
        });
        this.name = "NoOperationFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _NoOperationFault.prototype);
      }
    };
    exports2.NoOperationFault = NoOperationFault;
    var CacheSubnetGroupInUse = class _CacheSubnetGroupInUse extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "CacheSubnetGroupInUse",
          $fault: "client",
          ...opts
        });
        this.name = "CacheSubnetGroupInUse";
        this.$fault = "client";
        Object.setPrototypeOf(this, _CacheSubnetGroupInUse.prototype);
      }
    };
    exports2.CacheSubnetGroupInUse = CacheSubnetGroupInUse;
    var DefaultUserAssociatedToUserGroupFault = class _DefaultUserAssociatedToUserGroupFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "DefaultUserAssociatedToUserGroupFault",
          $fault: "client",
          ...opts
        });
        this.name = "DefaultUserAssociatedToUserGroupFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _DefaultUserAssociatedToUserGroupFault.prototype);
      }
    };
    exports2.DefaultUserAssociatedToUserGroupFault = DefaultUserAssociatedToUserGroupFault;
    var InvalidUserStateFault = class _InvalidUserStateFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "InvalidUserStateFault",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidUserStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidUserStateFault.prototype);
      }
    };
    exports2.InvalidUserStateFault = InvalidUserStateFault;
    exports2.ChangeType = {
      immediate: "immediate",
      requires_reboot: "requires-reboot"
    };
    exports2.SourceType = {
      cache_cluster: "cache-cluster",
      cache_parameter_group: "cache-parameter-group",
      cache_security_group: "cache-security-group",
      cache_subnet_group: "cache-subnet-group",
      replication_group: "replication-group",
      user: "user",
      user_group: "user-group"
    };
    var ReservedCacheNodesOfferingNotFoundFault = class _ReservedCacheNodesOfferingNotFoundFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "ReservedCacheNodesOfferingNotFoundFault",
          $fault: "client",
          ...opts
        });
        this.name = "ReservedCacheNodesOfferingNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ReservedCacheNodesOfferingNotFoundFault.prototype);
      }
    };
    exports2.ReservedCacheNodesOfferingNotFoundFault = ReservedCacheNodesOfferingNotFoundFault;
    exports2.ServiceUpdateStatus = {
      AVAILABLE: "available",
      CANCELLED: "cancelled",
      EXPIRED: "expired"
    };
    exports2.ServiceUpdateSeverity = {
      CRITICAL: "critical",
      IMPORTANT: "important",
      LOW: "low",
      MEDIUM: "medium"
    };
    exports2.ServiceUpdateType = {
      SECURITY_UPDATE: "security-update"
    };
    exports2.NodeUpdateInitiatedBy = {
      CUSTOMER: "customer",
      SYSTEM: "system"
    };
    exports2.NodeUpdateStatus = {
      COMPLETE: "complete",
      IN_PROGRESS: "in-progress",
      NOT_APPLIED: "not-applied",
      STOPPED: "stopped",
      STOPPING: "stopping",
      WAITING_TO_START: "waiting-to-start"
    };
    exports2.SlaMet = {
      NA: "n/a",
      NO: "no",
      YES: "yes"
    };
    var InvalidKMSKeyFault = class _InvalidKMSKeyFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "InvalidKMSKeyFault",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidKMSKeyFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidKMSKeyFault.prototype);
      }
    };
    exports2.InvalidKMSKeyFault = InvalidKMSKeyFault;
    exports2.AuthTokenUpdateStrategyType = {
      DELETE: "DELETE",
      ROTATE: "ROTATE",
      SET: "SET"
    };
    var SubnetInUse = class _SubnetInUse extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "SubnetInUse",
          $fault: "client",
          ...opts
        });
        this.name = "SubnetInUse";
        this.$fault = "client";
        Object.setPrototypeOf(this, _SubnetInUse.prototype);
      }
    };
    exports2.SubnetInUse = SubnetInUse;
    var ReservedCacheNodeAlreadyExistsFault = class _ReservedCacheNodeAlreadyExistsFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "ReservedCacheNodeAlreadyExistsFault",
          $fault: "client",
          ...opts
        });
        this.name = "ReservedCacheNodeAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ReservedCacheNodeAlreadyExistsFault.prototype);
      }
    };
    exports2.ReservedCacheNodeAlreadyExistsFault = ReservedCacheNodeAlreadyExistsFault;
    var ReservedCacheNodeQuotaExceededFault = class _ReservedCacheNodeQuotaExceededFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "ReservedCacheNodeQuotaExceededFault",
          $fault: "client",
          ...opts
        });
        this.name = "ReservedCacheNodeQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ReservedCacheNodeQuotaExceededFault.prototype);
      }
    };
    exports2.ReservedCacheNodeQuotaExceededFault = ReservedCacheNodeQuotaExceededFault;
    var TagNotFoundFault = class _TagNotFoundFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "TagNotFoundFault",
          $fault: "client",
          ...opts
        });
        this.name = "TagNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TagNotFoundFault.prototype);
      }
    };
    exports2.TagNotFoundFault = TagNotFoundFault;
    var AuthorizationNotFoundFault = class _AuthorizationNotFoundFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "AuthorizationNotFoundFault",
          $fault: "client",
          ...opts
        });
        this.name = "AuthorizationNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AuthorizationNotFoundFault.prototype);
      }
    };
    exports2.AuthorizationNotFoundFault = AuthorizationNotFoundFault;
    var ReplicationGroupAlreadyUnderMigrationFault = class _ReplicationGroupAlreadyUnderMigrationFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "ReplicationGroupAlreadyUnderMigrationFault",
          $fault: "client",
          ...opts
        });
        this.name = "ReplicationGroupAlreadyUnderMigrationFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ReplicationGroupAlreadyUnderMigrationFault.prototype);
      }
    };
    exports2.ReplicationGroupAlreadyUnderMigrationFault = ReplicationGroupAlreadyUnderMigrationFault;
    var APICallRateForCustomerExceededFault = class _APICallRateForCustomerExceededFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "APICallRateForCustomerExceededFault",
          $fault: "client",
          ...opts
        });
        this.name = "APICallRateForCustomerExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _APICallRateForCustomerExceededFault.prototype);
      }
    };
    exports2.APICallRateForCustomerExceededFault = APICallRateForCustomerExceededFault;
    var NodeGroupNotFoundFault = class _NodeGroupNotFoundFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "NodeGroupNotFoundFault",
          $fault: "client",
          ...opts
        });
        this.name = "NodeGroupNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _NodeGroupNotFoundFault.prototype);
      }
    };
    exports2.NodeGroupNotFoundFault = NodeGroupNotFoundFault;
    var TestFailoverNotAvailableFault = class _TestFailoverNotAvailableFault extends ElastiCacheServiceException_1.ElastiCacheServiceException {
      constructor(opts) {
        super({
          name: "TestFailoverNotAvailableFault",
          $fault: "client",
          ...opts
        });
        this.name = "TestFailoverNotAvailableFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TestFailoverNotAvailableFault.prototype);
      }
    };
    exports2.TestFailoverNotAvailableFault = TestFailoverNotAvailableFault;
  }
});

var require_Aws_query2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/protocols/Aws_query.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.se_ModifyCacheClusterCommand = exports2.se_ListTagsForResourceCommand = exports2.se_ListAllowedNodeTypeModificationsCommand = exports2.se_IncreaseReplicaCountCommand = exports2.se_IncreaseNodeGroupsInGlobalReplicationGroupCommand = exports2.se_FailoverGlobalReplicationGroupCommand = exports2.se_DisassociateGlobalReplicationGroupCommand = exports2.se_DescribeUsersCommand = exports2.se_DescribeUserGroupsCommand = exports2.se_DescribeUpdateActionsCommand = exports2.se_DescribeSnapshotsCommand = exports2.se_DescribeServiceUpdatesCommand = exports2.se_DescribeReservedCacheNodesOfferingsCommand = exports2.se_DescribeReservedCacheNodesCommand = exports2.se_DescribeReplicationGroupsCommand = exports2.se_DescribeGlobalReplicationGroupsCommand = exports2.se_DescribeEventsCommand = exports2.se_DescribeEngineDefaultParametersCommand = exports2.se_DescribeCacheSubnetGroupsCommand = exports2.se_DescribeCacheSecurityGroupsCommand = exports2.se_DescribeCacheParametersCommand = exports2.se_DescribeCacheParameterGroupsCommand = exports2.se_DescribeCacheEngineVersionsCommand = exports2.se_DescribeCacheClustersCommand = exports2.se_DeleteUserGroupCommand = exports2.se_DeleteUserCommand = exports2.se_DeleteSnapshotCommand = exports2.se_DeleteReplicationGroupCommand = exports2.se_DeleteGlobalReplicationGroupCommand = exports2.se_DeleteCacheSubnetGroupCommand = exports2.se_DeleteCacheSecurityGroupCommand = exports2.se_DeleteCacheParameterGroupCommand = exports2.se_DeleteCacheClusterCommand = exports2.se_DecreaseReplicaCountCommand = exports2.se_DecreaseNodeGroupsInGlobalReplicationGroupCommand = exports2.se_CreateUserGroupCommand = exports2.se_CreateUserCommand = exports2.se_CreateSnapshotCommand = exports2.se_CreateReplicationGroupCommand = exports2.se_CreateGlobalReplicationGroupCommand = exports2.se_CreateCacheSubnetGroupCommand = exports2.se_CreateCacheSecurityGroupCommand = exports2.se_CreateCacheParameterGroupCommand = exports2.se_CreateCacheClusterCommand = exports2.se_CopySnapshotCommand = exports2.se_CompleteMigrationCommand = exports2.se_BatchStopUpdateActionCommand = exports2.se_BatchApplyUpdateActionCommand = exports2.se_AuthorizeCacheSecurityGroupIngressCommand = exports2.se_AddTagsToResourceCommand = void 0;
    exports2.de_DescribeEventsCommand = exports2.de_DescribeEngineDefaultParametersCommand = exports2.de_DescribeCacheSubnetGroupsCommand = exports2.de_DescribeCacheSecurityGroupsCommand = exports2.de_DescribeCacheParametersCommand = exports2.de_DescribeCacheParameterGroupsCommand = exports2.de_DescribeCacheEngineVersionsCommand = exports2.de_DescribeCacheClustersCommand = exports2.de_DeleteUserGroupCommand = exports2.de_DeleteUserCommand = exports2.de_DeleteSnapshotCommand = exports2.de_DeleteReplicationGroupCommand = exports2.de_DeleteGlobalReplicationGroupCommand = exports2.de_DeleteCacheSubnetGroupCommand = exports2.de_DeleteCacheSecurityGroupCommand = exports2.de_DeleteCacheParameterGroupCommand = exports2.de_DeleteCacheClusterCommand = exports2.de_DecreaseReplicaCountCommand = exports2.de_DecreaseNodeGroupsInGlobalReplicationGroupCommand = exports2.de_CreateUserGroupCommand = exports2.de_CreateUserCommand = exports2.de_CreateSnapshotCommand = exports2.de_CreateReplicationGroupCommand = exports2.de_CreateGlobalReplicationGroupCommand = exports2.de_CreateCacheSubnetGroupCommand = exports2.de_CreateCacheSecurityGroupCommand = exports2.de_CreateCacheParameterGroupCommand = exports2.de_CreateCacheClusterCommand = exports2.de_CopySnapshotCommand = exports2.de_CompleteMigrationCommand = exports2.de_BatchStopUpdateActionCommand = exports2.de_BatchApplyUpdateActionCommand = exports2.de_AuthorizeCacheSecurityGroupIngressCommand = exports2.de_AddTagsToResourceCommand = exports2.se_TestMigrationCommand = exports2.se_TestFailoverCommand = exports2.se_StartMigrationCommand = exports2.se_RevokeCacheSecurityGroupIngressCommand = exports2.se_ResetCacheParameterGroupCommand = exports2.se_RemoveTagsFromResourceCommand = exports2.se_RebootCacheClusterCommand = exports2.se_RebalanceSlotsInGlobalReplicationGroupCommand = exports2.se_PurchaseReservedCacheNodesOfferingCommand = exports2.se_ModifyUserGroupCommand = exports2.se_ModifyUserCommand = exports2.se_ModifyReplicationGroupShardConfigurationCommand = exports2.se_ModifyReplicationGroupCommand = exports2.se_ModifyGlobalReplicationGroupCommand = exports2.se_ModifyCacheSubnetGroupCommand = exports2.se_ModifyCacheParameterGroupCommand = void 0;
    exports2.de_TestMigrationCommand = exports2.de_TestFailoverCommand = exports2.de_StartMigrationCommand = exports2.de_RevokeCacheSecurityGroupIngressCommand = exports2.de_ResetCacheParameterGroupCommand = exports2.de_RemoveTagsFromResourceCommand = exports2.de_RebootCacheClusterCommand = exports2.de_RebalanceSlotsInGlobalReplicationGroupCommand = exports2.de_PurchaseReservedCacheNodesOfferingCommand = exports2.de_ModifyUserGroupCommand = exports2.de_ModifyUserCommand = exports2.de_ModifyReplicationGroupShardConfigurationCommand = exports2.de_ModifyReplicationGroupCommand = exports2.de_ModifyGlobalReplicationGroupCommand = exports2.de_ModifyCacheSubnetGroupCommand = exports2.de_ModifyCacheParameterGroupCommand = exports2.de_ModifyCacheClusterCommand = exports2.de_ListTagsForResourceCommand = exports2.de_ListAllowedNodeTypeModificationsCommand = exports2.de_IncreaseReplicaCountCommand = exports2.de_IncreaseNodeGroupsInGlobalReplicationGroupCommand = exports2.de_FailoverGlobalReplicationGroupCommand = exports2.de_DisassociateGlobalReplicationGroupCommand = exports2.de_DescribeUsersCommand = exports2.de_DescribeUserGroupsCommand = exports2.de_DescribeUpdateActionsCommand = exports2.de_DescribeSnapshotsCommand = exports2.de_DescribeServiceUpdatesCommand = exports2.de_DescribeReservedCacheNodesOfferingsCommand = exports2.de_DescribeReservedCacheNodesCommand = exports2.de_DescribeReplicationGroupsCommand = exports2.de_DescribeGlobalReplicationGroupsCommand = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_1 = require_dist_cjs35();
    var fast_xml_parser_1 = require_fxp();
    var ElastiCacheServiceException_1 = require_ElastiCacheServiceException();
    var models_0_1 = require_models_03();
    var se_AddTagsToResourceCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AddTagsToResourceMessage(input, context),
        Action: "AddTagsToResource",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_AddTagsToResourceCommand = se_AddTagsToResourceCommand;
    var se_AuthorizeCacheSecurityGroupIngressCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AuthorizeCacheSecurityGroupIngressMessage(input, context),
        Action: "AuthorizeCacheSecurityGroupIngress",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_AuthorizeCacheSecurityGroupIngressCommand = se_AuthorizeCacheSecurityGroupIngressCommand;
    var se_BatchApplyUpdateActionCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_BatchApplyUpdateActionMessage(input, context),
        Action: "BatchApplyUpdateAction",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_BatchApplyUpdateActionCommand = se_BatchApplyUpdateActionCommand;
    var se_BatchStopUpdateActionCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_BatchStopUpdateActionMessage(input, context),
        Action: "BatchStopUpdateAction",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_BatchStopUpdateActionCommand = se_BatchStopUpdateActionCommand;
    var se_CompleteMigrationCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_CompleteMigrationMessage(input, context),
        Action: "CompleteMigration",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_CompleteMigrationCommand = se_CompleteMigrationCommand;
    var se_CopySnapshotCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_CopySnapshotMessage(input, context),
        Action: "CopySnapshot",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_CopySnapshotCommand = se_CopySnapshotCommand;
    var se_CreateCacheClusterCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_CreateCacheClusterMessage(input, context),
        Action: "CreateCacheCluster",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_CreateCacheClusterCommand = se_CreateCacheClusterCommand;
    var se_CreateCacheParameterGroupCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_CreateCacheParameterGroupMessage(input, context),
        Action: "CreateCacheParameterGroup",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_CreateCacheParameterGroupCommand = se_CreateCacheParameterGroupCommand;
    var se_CreateCacheSecurityGroupCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_CreateCacheSecurityGroupMessage(input, context),
        Action: "CreateCacheSecurityGroup",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_CreateCacheSecurityGroupCommand = se_CreateCacheSecurityGroupCommand;
    var se_CreateCacheSubnetGroupCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_CreateCacheSubnetGroupMessage(input, context),
        Action: "CreateCacheSubnetGroup",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_CreateCacheSubnetGroupCommand = se_CreateCacheSubnetGroupCommand;
    var se_CreateGlobalReplicationGroupCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_CreateGlobalReplicationGroupMessage(input, context),
        Action: "CreateGlobalReplicationGroup",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_CreateGlobalReplicationGroupCommand = se_CreateGlobalReplicationGroupCommand;
    var se_CreateReplicationGroupCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_CreateReplicationGroupMessage(input, context),
        Action: "CreateReplicationGroup",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_CreateReplicationGroupCommand = se_CreateReplicationGroupCommand;
    var se_CreateSnapshotCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_CreateSnapshotMessage(input, context),
        Action: "CreateSnapshot",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_CreateSnapshotCommand = se_CreateSnapshotCommand;
    var se_CreateUserCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_CreateUserMessage(input, context),
        Action: "CreateUser",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_CreateUserCommand = se_CreateUserCommand;
    var se_CreateUserGroupCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_CreateUserGroupMessage(input, context),
        Action: "CreateUserGroup",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_CreateUserGroupCommand = se_CreateUserGroupCommand;
    var se_DecreaseNodeGroupsInGlobalReplicationGroupCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DecreaseNodeGroupsInGlobalReplicationGroupMessage(input, context),
        Action: "DecreaseNodeGroupsInGlobalReplicationGroup",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DecreaseNodeGroupsInGlobalReplicationGroupCommand = se_DecreaseNodeGroupsInGlobalReplicationGroupCommand;
    var se_DecreaseReplicaCountCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DecreaseReplicaCountMessage(input, context),
        Action: "DecreaseReplicaCount",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DecreaseReplicaCountCommand = se_DecreaseReplicaCountCommand;
    var se_DeleteCacheClusterCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DeleteCacheClusterMessage(input, context),
        Action: "DeleteCacheCluster",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DeleteCacheClusterCommand = se_DeleteCacheClusterCommand;
    var se_DeleteCacheParameterGroupCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DeleteCacheParameterGroupMessage(input, context),
        Action: "DeleteCacheParameterGroup",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DeleteCacheParameterGroupCommand = se_DeleteCacheParameterGroupCommand;
    var se_DeleteCacheSecurityGroupCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DeleteCacheSecurityGroupMessage(input, context),
        Action: "DeleteCacheSecurityGroup",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DeleteCacheSecurityGroupCommand = se_DeleteCacheSecurityGroupCommand;
    var se_DeleteCacheSubnetGroupCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DeleteCacheSubnetGroupMessage(input, context),
        Action: "DeleteCacheSubnetGroup",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DeleteCacheSubnetGroupCommand = se_DeleteCacheSubnetGroupCommand;
    var se_DeleteGlobalReplicationGroupCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DeleteGlobalReplicationGroupMessage(input, context),
        Action: "DeleteGlobalReplicationGroup",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DeleteGlobalReplicationGroupCommand = se_DeleteGlobalReplicationGroupCommand;
    var se_DeleteReplicationGroupCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DeleteReplicationGroupMessage(input, context),
        Action: "DeleteReplicationGroup",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DeleteReplicationGroupCommand = se_DeleteReplicationGroupCommand;
    var se_DeleteSnapshotCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DeleteSnapshotMessage(input, context),
        Action: "DeleteSnapshot",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DeleteSnapshotCommand = se_DeleteSnapshotCommand;
    var se_DeleteUserCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DeleteUserMessage(input, context),
        Action: "DeleteUser",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DeleteUserCommand = se_DeleteUserCommand;
    var se_DeleteUserGroupCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DeleteUserGroupMessage(input, context),
        Action: "DeleteUserGroup",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DeleteUserGroupCommand = se_DeleteUserGroupCommand;
    var se_DescribeCacheClustersCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeCacheClustersMessage(input, context),
        Action: "DescribeCacheClusters",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DescribeCacheClustersCommand = se_DescribeCacheClustersCommand;
    var se_DescribeCacheEngineVersionsCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeCacheEngineVersionsMessage(input, context),
        Action: "DescribeCacheEngineVersions",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DescribeCacheEngineVersionsCommand = se_DescribeCacheEngineVersionsCommand;
    var se_DescribeCacheParameterGroupsCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeCacheParameterGroupsMessage(input, context),
        Action: "DescribeCacheParameterGroups",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DescribeCacheParameterGroupsCommand = se_DescribeCacheParameterGroupsCommand;
    var se_DescribeCacheParametersCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeCacheParametersMessage(input, context),
        Action: "DescribeCacheParameters",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DescribeCacheParametersCommand = se_DescribeCacheParametersCommand;
    var se_DescribeCacheSecurityGroupsCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeCacheSecurityGroupsMessage(input, context),
        Action: "DescribeCacheSecurityGroups",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DescribeCacheSecurityGroupsCommand = se_DescribeCacheSecurityGroupsCommand;
    var se_DescribeCacheSubnetGroupsCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeCacheSubnetGroupsMessage(input, context),
        Action: "DescribeCacheSubnetGroups",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DescribeCacheSubnetGroupsCommand = se_DescribeCacheSubnetGroupsCommand;
    var se_DescribeEngineDefaultParametersCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeEngineDefaultParametersMessage(input, context),
        Action: "DescribeEngineDefaultParameters",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DescribeEngineDefaultParametersCommand = se_DescribeEngineDefaultParametersCommand;
    var se_DescribeEventsCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeEventsMessage(input, context),
        Action: "DescribeEvents",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DescribeEventsCommand = se_DescribeEventsCommand;
    var se_DescribeGlobalReplicationGroupsCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeGlobalReplicationGroupsMessage(input, context),
        Action: "DescribeGlobalReplicationGroups",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DescribeGlobalReplicationGroupsCommand = se_DescribeGlobalReplicationGroupsCommand;
    var se_DescribeReplicationGroupsCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeReplicationGroupsMessage(input, context),
        Action: "DescribeReplicationGroups",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DescribeReplicationGroupsCommand = se_DescribeReplicationGroupsCommand;
    var se_DescribeReservedCacheNodesCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeReservedCacheNodesMessage(input, context),
        Action: "DescribeReservedCacheNodes",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DescribeReservedCacheNodesCommand = se_DescribeReservedCacheNodesCommand;
    var se_DescribeReservedCacheNodesOfferingsCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeReservedCacheNodesOfferingsMessage(input, context),
        Action: "DescribeReservedCacheNodesOfferings",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DescribeReservedCacheNodesOfferingsCommand = se_DescribeReservedCacheNodesOfferingsCommand;
    var se_DescribeServiceUpdatesCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeServiceUpdatesMessage(input, context),
        Action: "DescribeServiceUpdates",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DescribeServiceUpdatesCommand = se_DescribeServiceUpdatesCommand;
    var se_DescribeSnapshotsCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeSnapshotsMessage(input, context),
        Action: "DescribeSnapshots",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DescribeSnapshotsCommand = se_DescribeSnapshotsCommand;
    var se_DescribeUpdateActionsCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeUpdateActionsMessage(input, context),
        Action: "DescribeUpdateActions",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DescribeUpdateActionsCommand = se_DescribeUpdateActionsCommand;
    var se_DescribeUserGroupsCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeUserGroupsMessage(input, context),
        Action: "DescribeUserGroups",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DescribeUserGroupsCommand = se_DescribeUserGroupsCommand;
    var se_DescribeUsersCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeUsersMessage(input, context),
        Action: "DescribeUsers",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DescribeUsersCommand = se_DescribeUsersCommand;
    var se_DisassociateGlobalReplicationGroupCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DisassociateGlobalReplicationGroupMessage(input, context),
        Action: "DisassociateGlobalReplicationGroup",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_DisassociateGlobalReplicationGroupCommand = se_DisassociateGlobalReplicationGroupCommand;
    var se_FailoverGlobalReplicationGroupCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_FailoverGlobalReplicationGroupMessage(input, context),
        Action: "FailoverGlobalReplicationGroup",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_FailoverGlobalReplicationGroupCommand = se_FailoverGlobalReplicationGroupCommand;
    var se_IncreaseNodeGroupsInGlobalReplicationGroupCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_IncreaseNodeGroupsInGlobalReplicationGroupMessage(input, context),
        Action: "IncreaseNodeGroupsInGlobalReplicationGroup",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_IncreaseNodeGroupsInGlobalReplicationGroupCommand = se_IncreaseNodeGroupsInGlobalReplicationGroupCommand;
    var se_IncreaseReplicaCountCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_IncreaseReplicaCountMessage(input, context),
        Action: "IncreaseReplicaCount",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_IncreaseReplicaCountCommand = se_IncreaseReplicaCountCommand;
    var se_ListAllowedNodeTypeModificationsCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ListAllowedNodeTypeModificationsMessage(input, context),
        Action: "ListAllowedNodeTypeModifications",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_ListAllowedNodeTypeModificationsCommand = se_ListAllowedNodeTypeModificationsCommand;
    var se_ListTagsForResourceCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ListTagsForResourceMessage(input, context),
        Action: "ListTagsForResource",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_ListTagsForResourceCommand = se_ListTagsForResourceCommand;
    var se_ModifyCacheClusterCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ModifyCacheClusterMessage(input, context),
        Action: "ModifyCacheCluster",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_ModifyCacheClusterCommand = se_ModifyCacheClusterCommand;
    var se_ModifyCacheParameterGroupCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ModifyCacheParameterGroupMessage(input, context),
        Action: "ModifyCacheParameterGroup",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_ModifyCacheParameterGroupCommand = se_ModifyCacheParameterGroupCommand;
    var se_ModifyCacheSubnetGroupCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ModifyCacheSubnetGroupMessage(input, context),
        Action: "ModifyCacheSubnetGroup",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_ModifyCacheSubnetGroupCommand = se_ModifyCacheSubnetGroupCommand;
    var se_ModifyGlobalReplicationGroupCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ModifyGlobalReplicationGroupMessage(input, context),
        Action: "ModifyGlobalReplicationGroup",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_ModifyGlobalReplicationGroupCommand = se_ModifyGlobalReplicationGroupCommand;
    var se_ModifyReplicationGroupCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ModifyReplicationGroupMessage(input, context),
        Action: "ModifyReplicationGroup",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_ModifyReplicationGroupCommand = se_ModifyReplicationGroupCommand;
    var se_ModifyReplicationGroupShardConfigurationCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ModifyReplicationGroupShardConfigurationMessage(input, context),
        Action: "ModifyReplicationGroupShardConfiguration",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_ModifyReplicationGroupShardConfigurationCommand = se_ModifyReplicationGroupShardConfigurationCommand;
    var se_ModifyUserCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ModifyUserMessage(input, context),
        Action: "ModifyUser",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_ModifyUserCommand = se_ModifyUserCommand;
    var se_ModifyUserGroupCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ModifyUserGroupMessage(input, context),
        Action: "ModifyUserGroup",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_ModifyUserGroupCommand = se_ModifyUserGroupCommand;
    var se_PurchaseReservedCacheNodesOfferingCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_PurchaseReservedCacheNodesOfferingMessage(input, context),
        Action: "PurchaseReservedCacheNodesOffering",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_PurchaseReservedCacheNodesOfferingCommand = se_PurchaseReservedCacheNodesOfferingCommand;
    var se_RebalanceSlotsInGlobalReplicationGroupCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_RebalanceSlotsInGlobalReplicationGroupMessage(input, context),
        Action: "RebalanceSlotsInGlobalReplicationGroup",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_RebalanceSlotsInGlobalReplicationGroupCommand = se_RebalanceSlotsInGlobalReplicationGroupCommand;
    var se_RebootCacheClusterCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_RebootCacheClusterMessage(input, context),
        Action: "RebootCacheCluster",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_RebootCacheClusterCommand = se_RebootCacheClusterCommand;
    var se_RemoveTagsFromResourceCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_RemoveTagsFromResourceMessage(input, context),
        Action: "RemoveTagsFromResource",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_RemoveTagsFromResourceCommand = se_RemoveTagsFromResourceCommand;
    var se_ResetCacheParameterGroupCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ResetCacheParameterGroupMessage(input, context),
        Action: "ResetCacheParameterGroup",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_ResetCacheParameterGroupCommand = se_ResetCacheParameterGroupCommand;
    var se_RevokeCacheSecurityGroupIngressCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_RevokeCacheSecurityGroupIngressMessage(input, context),
        Action: "RevokeCacheSecurityGroupIngress",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_RevokeCacheSecurityGroupIngressCommand = se_RevokeCacheSecurityGroupIngressCommand;
    var se_StartMigrationCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_StartMigrationMessage(input, context),
        Action: "StartMigration",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_StartMigrationCommand = se_StartMigrationCommand;
    var se_TestFailoverCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_TestFailoverMessage(input, context),
        Action: "TestFailover",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_TestFailoverCommand = se_TestFailoverCommand;
    var se_TestMigrationCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_TestMigrationMessage(input, context),
        Action: "TestMigration",
        Version: "2015-02-02"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.se_TestMigrationCommand = se_TestMigrationCommand;
    var de_AddTagsToResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_AddTagsToResourceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_TagListMessage(data.AddTagsToResourceResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_AddTagsToResourceCommand = de_AddTagsToResourceCommand;
    var de_AddTagsToResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CacheClusterNotFound":
        case "com.amazonaws.elasticache#CacheClusterNotFoundFault":
          throw await de_CacheClusterNotFoundFaultRes(parsedOutput, context);
        case "CacheParameterGroupNotFound":
        case "com.amazonaws.elasticache#CacheParameterGroupNotFoundFault":
          throw await de_CacheParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "CacheSecurityGroupNotFound":
        case "com.amazonaws.elasticache#CacheSecurityGroupNotFoundFault":
          throw await de_CacheSecurityGroupNotFoundFaultRes(parsedOutput, context);
        case "CacheSubnetGroupNotFoundFault":
        case "com.amazonaws.elasticache#CacheSubnetGroupNotFoundFault":
          throw await de_CacheSubnetGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidARN":
        case "com.amazonaws.elasticache#InvalidARNFault":
          throw await de_InvalidARNFaultRes(parsedOutput, context);
        case "InvalidReplicationGroupState":
        case "com.amazonaws.elasticache#InvalidReplicationGroupStateFault":
          throw await de_InvalidReplicationGroupStateFaultRes(parsedOutput, context);
        case "ReplicationGroupNotFoundFault":
        case "com.amazonaws.elasticache#ReplicationGroupNotFoundFault":
          throw await de_ReplicationGroupNotFoundFaultRes(parsedOutput, context);
        case "ReservedCacheNodeNotFound":
        case "com.amazonaws.elasticache#ReservedCacheNodeNotFoundFault":
          throw await de_ReservedCacheNodeNotFoundFaultRes(parsedOutput, context);
        case "SnapshotNotFoundFault":
        case "com.amazonaws.elasticache#SnapshotNotFoundFault":
          throw await de_SnapshotNotFoundFaultRes(parsedOutput, context);
        case "TagQuotaPerResourceExceeded":
        case "com.amazonaws.elasticache#TagQuotaPerResourceExceeded":
          throw await de_TagQuotaPerResourceExceededRes(parsedOutput, context);
        case "UserGroupNotFound":
        case "com.amazonaws.elasticache#UserGroupNotFoundFault":
          throw await de_UserGroupNotFoundFaultRes(parsedOutput, context);
        case "UserNotFound":
        case "com.amazonaws.elasticache#UserNotFoundFault":
          throw await de_UserNotFoundFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_AuthorizeCacheSecurityGroupIngressCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_AuthorizeCacheSecurityGroupIngressCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_AuthorizeCacheSecurityGroupIngressResult(data.AuthorizeCacheSecurityGroupIngressResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_AuthorizeCacheSecurityGroupIngressCommand = de_AuthorizeCacheSecurityGroupIngressCommand;
    var de_AuthorizeCacheSecurityGroupIngressCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AuthorizationAlreadyExists":
        case "com.amazonaws.elasticache#AuthorizationAlreadyExistsFault":
          throw await de_AuthorizationAlreadyExistsFaultRes(parsedOutput, context);
        case "CacheSecurityGroupNotFound":
        case "com.amazonaws.elasticache#CacheSecurityGroupNotFoundFault":
          throw await de_CacheSecurityGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidCacheSecurityGroupState":
        case "com.amazonaws.elasticache#InvalidCacheSecurityGroupStateFault":
          throw await de_InvalidCacheSecurityGroupStateFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_BatchApplyUpdateActionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_BatchApplyUpdateActionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateActionResultsMessage(data.BatchApplyUpdateActionResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_BatchApplyUpdateActionCommand = de_BatchApplyUpdateActionCommand;
    var de_BatchApplyUpdateActionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ServiceUpdateNotFoundFault":
        case "com.amazonaws.elasticache#ServiceUpdateNotFoundFault":
          throw await de_ServiceUpdateNotFoundFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_BatchStopUpdateActionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_BatchStopUpdateActionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateActionResultsMessage(data.BatchStopUpdateActionResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_BatchStopUpdateActionCommand = de_BatchStopUpdateActionCommand;
    var de_BatchStopUpdateActionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ServiceUpdateNotFoundFault":
        case "com.amazonaws.elasticache#ServiceUpdateNotFoundFault":
          throw await de_ServiceUpdateNotFoundFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_CompleteMigrationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CompleteMigrationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CompleteMigrationResponse(data.CompleteMigrationResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_CompleteMigrationCommand = de_CompleteMigrationCommand;
    var de_CompleteMigrationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidReplicationGroupState":
        case "com.amazonaws.elasticache#InvalidReplicationGroupStateFault":
          throw await de_InvalidReplicationGroupStateFaultRes(parsedOutput, context);
        case "ReplicationGroupNotFoundFault":
        case "com.amazonaws.elasticache#ReplicationGroupNotFoundFault":
          throw await de_ReplicationGroupNotFoundFaultRes(parsedOutput, context);
        case "ReplicationGroupNotUnderMigrationFault":
        case "com.amazonaws.elasticache#ReplicationGroupNotUnderMigrationFault":
          throw await de_ReplicationGroupNotUnderMigrationFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_CopySnapshotCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CopySnapshotCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CopySnapshotResult(data.CopySnapshotResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_CopySnapshotCommand = de_CopySnapshotCommand;
    var de_CopySnapshotCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidSnapshotState":
        case "com.amazonaws.elasticache#InvalidSnapshotStateFault":
          throw await de_InvalidSnapshotStateFaultRes(parsedOutput, context);
        case "SnapshotAlreadyExistsFault":
        case "com.amazonaws.elasticache#SnapshotAlreadyExistsFault":
          throw await de_SnapshotAlreadyExistsFaultRes(parsedOutput, context);
        case "SnapshotNotFoundFault":
        case "com.amazonaws.elasticache#SnapshotNotFoundFault":
          throw await de_SnapshotNotFoundFaultRes(parsedOutput, context);
        case "SnapshotQuotaExceededFault":
        case "com.amazonaws.elasticache#SnapshotQuotaExceededFault":
          throw await de_SnapshotQuotaExceededFaultRes(parsedOutput, context);
        case "TagQuotaPerResourceExceeded":
        case "com.amazonaws.elasticache#TagQuotaPerResourceExceeded":
          throw await de_TagQuotaPerResourceExceededRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_CreateCacheClusterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CreateCacheClusterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CreateCacheClusterResult(data.CreateCacheClusterResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_CreateCacheClusterCommand = de_CreateCacheClusterCommand;
    var de_CreateCacheClusterCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CacheClusterAlreadyExists":
        case "com.amazonaws.elasticache#CacheClusterAlreadyExistsFault":
          throw await de_CacheClusterAlreadyExistsFaultRes(parsedOutput, context);
        case "CacheParameterGroupNotFound":
        case "com.amazonaws.elasticache#CacheParameterGroupNotFoundFault":
          throw await de_CacheParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "CacheSecurityGroupNotFound":
        case "com.amazonaws.elasticache#CacheSecurityGroupNotFoundFault":
          throw await de_CacheSecurityGroupNotFoundFaultRes(parsedOutput, context);
        case "CacheSubnetGroupNotFoundFault":
        case "com.amazonaws.elasticache#CacheSubnetGroupNotFoundFault":
          throw await de_CacheSubnetGroupNotFoundFaultRes(parsedOutput, context);
        case "ClusterQuotaForCustomerExceeded":
        case "com.amazonaws.elasticache#ClusterQuotaForCustomerExceededFault":
          throw await de_ClusterQuotaForCustomerExceededFaultRes(parsedOutput, context);
        case "InsufficientCacheClusterCapacity":
        case "com.amazonaws.elasticache#InsufficientCacheClusterCapacityFault":
          throw await de_InsufficientCacheClusterCapacityFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidReplicationGroupState":
        case "com.amazonaws.elasticache#InvalidReplicationGroupStateFault":
          throw await de_InvalidReplicationGroupStateFaultRes(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.elasticache#InvalidVPCNetworkStateFault":
          throw await de_InvalidVPCNetworkStateFaultRes(parsedOutput, context);
        case "NodeQuotaForClusterExceeded":
        case "com.amazonaws.elasticache#NodeQuotaForClusterExceededFault":
          throw await de_NodeQuotaForClusterExceededFaultRes(parsedOutput, context);
        case "NodeQuotaForCustomerExceeded":
        case "com.amazonaws.elasticache#NodeQuotaForCustomerExceededFault":
          throw await de_NodeQuotaForCustomerExceededFaultRes(parsedOutput, context);
        case "ReplicationGroupNotFoundFault":
        case "com.amazonaws.elasticache#ReplicationGroupNotFoundFault":
          throw await de_ReplicationGroupNotFoundFaultRes(parsedOutput, context);
        case "TagQuotaPerResourceExceeded":
        case "com.amazonaws.elasticache#TagQuotaPerResourceExceeded":
          throw await de_TagQuotaPerResourceExceededRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_CreateCacheParameterGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CreateCacheParameterGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CreateCacheParameterGroupResult(data.CreateCacheParameterGroupResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_CreateCacheParameterGroupCommand = de_CreateCacheParameterGroupCommand;
    var de_CreateCacheParameterGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CacheParameterGroupAlreadyExists":
        case "com.amazonaws.elasticache#CacheParameterGroupAlreadyExistsFault":
          throw await de_CacheParameterGroupAlreadyExistsFaultRes(parsedOutput, context);
        case "CacheParameterGroupQuotaExceeded":
        case "com.amazonaws.elasticache#CacheParameterGroupQuotaExceededFault":
          throw await de_CacheParameterGroupQuotaExceededFaultRes(parsedOutput, context);
        case "InvalidCacheParameterGroupState":
        case "com.amazonaws.elasticache#InvalidCacheParameterGroupStateFault":
          throw await de_InvalidCacheParameterGroupStateFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "TagQuotaPerResourceExceeded":
        case "com.amazonaws.elasticache#TagQuotaPerResourceExceeded":
          throw await de_TagQuotaPerResourceExceededRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_CreateCacheSecurityGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CreateCacheSecurityGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CreateCacheSecurityGroupResult(data.CreateCacheSecurityGroupResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_CreateCacheSecurityGroupCommand = de_CreateCacheSecurityGroupCommand;
    var de_CreateCacheSecurityGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CacheSecurityGroupAlreadyExists":
        case "com.amazonaws.elasticache#CacheSecurityGroupAlreadyExistsFault":
          throw await de_CacheSecurityGroupAlreadyExistsFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "QuotaExceeded.CacheSecurityGroup":
        case "com.amazonaws.elasticache#CacheSecurityGroupQuotaExceededFault":
          throw await de_CacheSecurityGroupQuotaExceededFaultRes(parsedOutput, context);
        case "TagQuotaPerResourceExceeded":
        case "com.amazonaws.elasticache#TagQuotaPerResourceExceeded":
          throw await de_TagQuotaPerResourceExceededRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_CreateCacheSubnetGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CreateCacheSubnetGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CreateCacheSubnetGroupResult(data.CreateCacheSubnetGroupResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_CreateCacheSubnetGroupCommand = de_CreateCacheSubnetGroupCommand;
    var de_CreateCacheSubnetGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CacheSubnetGroupAlreadyExists":
        case "com.amazonaws.elasticache#CacheSubnetGroupAlreadyExistsFault":
          throw await de_CacheSubnetGroupAlreadyExistsFaultRes(parsedOutput, context);
        case "CacheSubnetGroupQuotaExceeded":
        case "com.amazonaws.elasticache#CacheSubnetGroupQuotaExceededFault":
          throw await de_CacheSubnetGroupQuotaExceededFaultRes(parsedOutput, context);
        case "CacheSubnetQuotaExceededFault":
        case "com.amazonaws.elasticache#CacheSubnetQuotaExceededFault":
          throw await de_CacheSubnetQuotaExceededFaultRes(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.elasticache#InvalidSubnet":
          throw await de_InvalidSubnetRes(parsedOutput, context);
        case "SubnetNotAllowedFault":
        case "com.amazonaws.elasticache#SubnetNotAllowedFault":
          throw await de_SubnetNotAllowedFaultRes(parsedOutput, context);
        case "TagQuotaPerResourceExceeded":
        case "com.amazonaws.elasticache#TagQuotaPerResourceExceeded":
          throw await de_TagQuotaPerResourceExceededRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_CreateGlobalReplicationGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CreateGlobalReplicationGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CreateGlobalReplicationGroupResult(data.CreateGlobalReplicationGroupResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_CreateGlobalReplicationGroupCommand = de_CreateGlobalReplicationGroupCommand;
    var de_CreateGlobalReplicationGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "GlobalReplicationGroupAlreadyExistsFault":
        case "com.amazonaws.elasticache#GlobalReplicationGroupAlreadyExistsFault":
          throw await de_GlobalReplicationGroupAlreadyExistsFaultRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidReplicationGroupState":
        case "com.amazonaws.elasticache#InvalidReplicationGroupStateFault":
          throw await de_InvalidReplicationGroupStateFaultRes(parsedOutput, context);
        case "ReplicationGroupNotFoundFault":
        case "com.amazonaws.elasticache#ReplicationGroupNotFoundFault":
          throw await de_ReplicationGroupNotFoundFaultRes(parsedOutput, context);
        case "ServiceLinkedRoleNotFoundFault":
        case "com.amazonaws.elasticache#ServiceLinkedRoleNotFoundFault":
          throw await de_ServiceLinkedRoleNotFoundFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_CreateReplicationGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CreateReplicationGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CreateReplicationGroupResult(data.CreateReplicationGroupResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_CreateReplicationGroupCommand = de_CreateReplicationGroupCommand;
    var de_CreateReplicationGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CacheClusterNotFound":
        case "com.amazonaws.elasticache#CacheClusterNotFoundFault":
          throw await de_CacheClusterNotFoundFaultRes(parsedOutput, context);
        case "CacheParameterGroupNotFound":
        case "com.amazonaws.elasticache#CacheParameterGroupNotFoundFault":
          throw await de_CacheParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "CacheSecurityGroupNotFound":
        case "com.amazonaws.elasticache#CacheSecurityGroupNotFoundFault":
          throw await de_CacheSecurityGroupNotFoundFaultRes(parsedOutput, context);
        case "CacheSubnetGroupNotFoundFault":
        case "com.amazonaws.elasticache#CacheSubnetGroupNotFoundFault":
          throw await de_CacheSubnetGroupNotFoundFaultRes(parsedOutput, context);
        case "ClusterQuotaForCustomerExceeded":
        case "com.amazonaws.elasticache#ClusterQuotaForCustomerExceededFault":
          throw await de_ClusterQuotaForCustomerExceededFaultRes(parsedOutput, context);
        case "GlobalReplicationGroupNotFoundFault":
        case "com.amazonaws.elasticache#GlobalReplicationGroupNotFoundFault":
          throw await de_GlobalReplicationGroupNotFoundFaultRes(parsedOutput, context);
        case "InsufficientCacheClusterCapacity":
        case "com.amazonaws.elasticache#InsufficientCacheClusterCapacityFault":
          throw await de_InsufficientCacheClusterCapacityFaultRes(parsedOutput, context);
        case "InvalidCacheClusterState":
        case "com.amazonaws.elasticache#InvalidCacheClusterStateFault":
          throw await de_InvalidCacheClusterStateFaultRes(parsedOutput, context);
        case "InvalidGlobalReplicationGroupState":
        case "com.amazonaws.elasticache#InvalidGlobalReplicationGroupStateFault":
          throw await de_InvalidGlobalReplicationGroupStateFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidUserGroupState":
        case "com.amazonaws.elasticache#InvalidUserGroupStateFault":
          throw await de_InvalidUserGroupStateFaultRes(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.elasticache#InvalidVPCNetworkStateFault":
          throw await de_InvalidVPCNetworkStateFaultRes(parsedOutput, context);
        case "NodeGroupsPerReplicationGroupQuotaExceeded":
        case "com.amazonaws.elasticache#NodeGroupsPerReplicationGroupQuotaExceededFault":
          throw await de_NodeGroupsPerReplicationGroupQuotaExceededFaultRes(parsedOutput, context);
        case "NodeQuotaForClusterExceeded":
        case "com.amazonaws.elasticache#NodeQuotaForClusterExceededFault":
          throw await de_NodeQuotaForClusterExceededFaultRes(parsedOutput, context);
        case "NodeQuotaForCustomerExceeded":
        case "com.amazonaws.elasticache#NodeQuotaForCustomerExceededFault":
          throw await de_NodeQuotaForCustomerExceededFaultRes(parsedOutput, context);
        case "ReplicationGroupAlreadyExists":
        case "com.amazonaws.elasticache#ReplicationGroupAlreadyExistsFault":
          throw await de_ReplicationGroupAlreadyExistsFaultRes(parsedOutput, context);
        case "TagQuotaPerResourceExceeded":
        case "com.amazonaws.elasticache#TagQuotaPerResourceExceeded":
          throw await de_TagQuotaPerResourceExceededRes(parsedOutput, context);
        case "UserGroupNotFound":
        case "com.amazonaws.elasticache#UserGroupNotFoundFault":
          throw await de_UserGroupNotFoundFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_CreateSnapshotCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CreateSnapshotCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CreateSnapshotResult(data.CreateSnapshotResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_CreateSnapshotCommand = de_CreateSnapshotCommand;
    var de_CreateSnapshotCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CacheClusterNotFound":
        case "com.amazonaws.elasticache#CacheClusterNotFoundFault":
          throw await de_CacheClusterNotFoundFaultRes(parsedOutput, context);
        case "InvalidCacheClusterState":
        case "com.amazonaws.elasticache#InvalidCacheClusterStateFault":
          throw await de_InvalidCacheClusterStateFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidReplicationGroupState":
        case "com.amazonaws.elasticache#InvalidReplicationGroupStateFault":
          throw await de_InvalidReplicationGroupStateFaultRes(parsedOutput, context);
        case "ReplicationGroupNotFoundFault":
        case "com.amazonaws.elasticache#ReplicationGroupNotFoundFault":
          throw await de_ReplicationGroupNotFoundFaultRes(parsedOutput, context);
        case "SnapshotAlreadyExistsFault":
        case "com.amazonaws.elasticache#SnapshotAlreadyExistsFault":
          throw await de_SnapshotAlreadyExistsFaultRes(parsedOutput, context);
        case "SnapshotFeatureNotSupportedFault":
        case "com.amazonaws.elasticache#SnapshotFeatureNotSupportedFault":
          throw await de_SnapshotFeatureNotSupportedFaultRes(parsedOutput, context);
        case "SnapshotQuotaExceededFault":
        case "com.amazonaws.elasticache#SnapshotQuotaExceededFault":
          throw await de_SnapshotQuotaExceededFaultRes(parsedOutput, context);
        case "TagQuotaPerResourceExceeded":
        case "com.amazonaws.elasticache#TagQuotaPerResourceExceeded":
          throw await de_TagQuotaPerResourceExceededRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_CreateUserCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CreateUserCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_User(data.CreateUserResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_CreateUserCommand = de_CreateUserCommand;
    var de_CreateUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DuplicateUserName":
        case "com.amazonaws.elasticache#DuplicateUserNameFault":
          throw await de_DuplicateUserNameFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ServiceLinkedRoleNotFoundFault":
        case "com.amazonaws.elasticache#ServiceLinkedRoleNotFoundFault":
          throw await de_ServiceLinkedRoleNotFoundFaultRes(parsedOutput, context);
        case "TagQuotaPerResourceExceeded":
        case "com.amazonaws.elasticache#TagQuotaPerResourceExceeded":
          throw await de_TagQuotaPerResourceExceededRes(parsedOutput, context);
        case "UserAlreadyExists":
        case "com.amazonaws.elasticache#UserAlreadyExistsFault":
          throw await de_UserAlreadyExistsFaultRes(parsedOutput, context);
        case "UserQuotaExceeded":
        case "com.amazonaws.elasticache#UserQuotaExceededFault":
          throw await de_UserQuotaExceededFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_CreateUserGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CreateUserGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UserGroup(data.CreateUserGroupResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_CreateUserGroupCommand = de_CreateUserGroupCommand;
    var de_CreateUserGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DefaultUserRequired":
        case "com.amazonaws.elasticache#DefaultUserRequired":
          throw await de_DefaultUserRequiredRes(parsedOutput, context);
        case "DuplicateUserName":
        case "com.amazonaws.elasticache#DuplicateUserNameFault":
          throw await de_DuplicateUserNameFaultRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ServiceLinkedRoleNotFoundFault":
        case "com.amazonaws.elasticache#ServiceLinkedRoleNotFoundFault":
          throw await de_ServiceLinkedRoleNotFoundFaultRes(parsedOutput, context);
        case "TagQuotaPerResourceExceeded":
        case "com.amazonaws.elasticache#TagQuotaPerResourceExceeded":
          throw await de_TagQuotaPerResourceExceededRes(parsedOutput, context);
        case "UserGroupAlreadyExists":
        case "com.amazonaws.elasticache#UserGroupAlreadyExistsFault":
          throw await de_UserGroupAlreadyExistsFaultRes(parsedOutput, context);
        case "UserGroupQuotaExceeded":
        case "com.amazonaws.elasticache#UserGroupQuotaExceededFault":
          throw await de_UserGroupQuotaExceededFaultRes(parsedOutput, context);
        case "UserNotFound":
        case "com.amazonaws.elasticache#UserNotFoundFault":
          throw await de_UserNotFoundFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DecreaseNodeGroupsInGlobalReplicationGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DecreaseNodeGroupsInGlobalReplicationGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DecreaseNodeGroupsInGlobalReplicationGroupResult(data.DecreaseNodeGroupsInGlobalReplicationGroupResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DecreaseNodeGroupsInGlobalReplicationGroupCommand = de_DecreaseNodeGroupsInGlobalReplicationGroupCommand;
    var de_DecreaseNodeGroupsInGlobalReplicationGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "GlobalReplicationGroupNotFoundFault":
        case "com.amazonaws.elasticache#GlobalReplicationGroupNotFoundFault":
          throw await de_GlobalReplicationGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidGlobalReplicationGroupState":
        case "com.amazonaws.elasticache#InvalidGlobalReplicationGroupStateFault":
          throw await de_InvalidGlobalReplicationGroupStateFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DecreaseReplicaCountCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DecreaseReplicaCountCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DecreaseReplicaCountResult(data.DecreaseReplicaCountResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DecreaseReplicaCountCommand = de_DecreaseReplicaCountCommand;
    var de_DecreaseReplicaCountCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ClusterQuotaForCustomerExceeded":
        case "com.amazonaws.elasticache#ClusterQuotaForCustomerExceededFault":
          throw await de_ClusterQuotaForCustomerExceededFaultRes(parsedOutput, context);
        case "InsufficientCacheClusterCapacity":
        case "com.amazonaws.elasticache#InsufficientCacheClusterCapacityFault":
          throw await de_InsufficientCacheClusterCapacityFaultRes(parsedOutput, context);
        case "InvalidCacheClusterState":
        case "com.amazonaws.elasticache#InvalidCacheClusterStateFault":
          throw await de_InvalidCacheClusterStateFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidReplicationGroupState":
        case "com.amazonaws.elasticache#InvalidReplicationGroupStateFault":
          throw await de_InvalidReplicationGroupStateFaultRes(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.elasticache#InvalidVPCNetworkStateFault":
          throw await de_InvalidVPCNetworkStateFaultRes(parsedOutput, context);
        case "NoOperationFault":
        case "com.amazonaws.elasticache#NoOperationFault":
          throw await de_NoOperationFaultRes(parsedOutput, context);
        case "NodeGroupsPerReplicationGroupQuotaExceeded":
        case "com.amazonaws.elasticache#NodeGroupsPerReplicationGroupQuotaExceededFault":
          throw await de_NodeGroupsPerReplicationGroupQuotaExceededFaultRes(parsedOutput, context);
        case "NodeQuotaForCustomerExceeded":
        case "com.amazonaws.elasticache#NodeQuotaForCustomerExceededFault":
          throw await de_NodeQuotaForCustomerExceededFaultRes(parsedOutput, context);
        case "ReplicationGroupNotFoundFault":
        case "com.amazonaws.elasticache#ReplicationGroupNotFoundFault":
          throw await de_ReplicationGroupNotFoundFaultRes(parsedOutput, context);
        case "ServiceLinkedRoleNotFoundFault":
        case "com.amazonaws.elasticache#ServiceLinkedRoleNotFoundFault":
          throw await de_ServiceLinkedRoleNotFoundFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DeleteCacheClusterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteCacheClusterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DeleteCacheClusterResult(data.DeleteCacheClusterResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DeleteCacheClusterCommand = de_DeleteCacheClusterCommand;
    var de_DeleteCacheClusterCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CacheClusterNotFound":
        case "com.amazonaws.elasticache#CacheClusterNotFoundFault":
          throw await de_CacheClusterNotFoundFaultRes(parsedOutput, context);
        case "InvalidCacheClusterState":
        case "com.amazonaws.elasticache#InvalidCacheClusterStateFault":
          throw await de_InvalidCacheClusterStateFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "SnapshotAlreadyExistsFault":
        case "com.amazonaws.elasticache#SnapshotAlreadyExistsFault":
          throw await de_SnapshotAlreadyExistsFaultRes(parsedOutput, context);
        case "SnapshotFeatureNotSupportedFault":
        case "com.amazonaws.elasticache#SnapshotFeatureNotSupportedFault":
          throw await de_SnapshotFeatureNotSupportedFaultRes(parsedOutput, context);
        case "SnapshotQuotaExceededFault":
        case "com.amazonaws.elasticache#SnapshotQuotaExceededFault":
          throw await de_SnapshotQuotaExceededFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DeleteCacheParameterGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteCacheParameterGroupCommandError(output, context);
      }
      await (0, smithy_client_1.collectBody)(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return response;
    };
    exports2.de_DeleteCacheParameterGroupCommand = de_DeleteCacheParameterGroupCommand;
    var de_DeleteCacheParameterGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CacheParameterGroupNotFound":
        case "com.amazonaws.elasticache#CacheParameterGroupNotFoundFault":
          throw await de_CacheParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidCacheParameterGroupState":
        case "com.amazonaws.elasticache#InvalidCacheParameterGroupStateFault":
          throw await de_InvalidCacheParameterGroupStateFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DeleteCacheSecurityGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteCacheSecurityGroupCommandError(output, context);
      }
      await (0, smithy_client_1.collectBody)(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return response;
    };
    exports2.de_DeleteCacheSecurityGroupCommand = de_DeleteCacheSecurityGroupCommand;
    var de_DeleteCacheSecurityGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CacheSecurityGroupNotFound":
        case "com.amazonaws.elasticache#CacheSecurityGroupNotFoundFault":
          throw await de_CacheSecurityGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidCacheSecurityGroupState":
        case "com.amazonaws.elasticache#InvalidCacheSecurityGroupStateFault":
          throw await de_InvalidCacheSecurityGroupStateFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DeleteCacheSubnetGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteCacheSubnetGroupCommandError(output, context);
      }
      await (0, smithy_client_1.collectBody)(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return response;
    };
    exports2.de_DeleteCacheSubnetGroupCommand = de_DeleteCacheSubnetGroupCommand;
    var de_DeleteCacheSubnetGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CacheSubnetGroupInUse":
        case "com.amazonaws.elasticache#CacheSubnetGroupInUse":
          throw await de_CacheSubnetGroupInUseRes(parsedOutput, context);
        case "CacheSubnetGroupNotFoundFault":
        case "com.amazonaws.elasticache#CacheSubnetGroupNotFoundFault":
          throw await de_CacheSubnetGroupNotFoundFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DeleteGlobalReplicationGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteGlobalReplicationGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DeleteGlobalReplicationGroupResult(data.DeleteGlobalReplicationGroupResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DeleteGlobalReplicationGroupCommand = de_DeleteGlobalReplicationGroupCommand;
    var de_DeleteGlobalReplicationGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "GlobalReplicationGroupNotFoundFault":
        case "com.amazonaws.elasticache#GlobalReplicationGroupNotFoundFault":
          throw await de_GlobalReplicationGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidGlobalReplicationGroupState":
        case "com.amazonaws.elasticache#InvalidGlobalReplicationGroupStateFault":
          throw await de_InvalidGlobalReplicationGroupStateFaultRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DeleteReplicationGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteReplicationGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DeleteReplicationGroupResult(data.DeleteReplicationGroupResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DeleteReplicationGroupCommand = de_DeleteReplicationGroupCommand;
    var de_DeleteReplicationGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidReplicationGroupState":
        case "com.amazonaws.elasticache#InvalidReplicationGroupStateFault":
          throw await de_InvalidReplicationGroupStateFaultRes(parsedOutput, context);
        case "ReplicationGroupNotFoundFault":
        case "com.amazonaws.elasticache#ReplicationGroupNotFoundFault":
          throw await de_ReplicationGroupNotFoundFaultRes(parsedOutput, context);
        case "SnapshotAlreadyExistsFault":
        case "com.amazonaws.elasticache#SnapshotAlreadyExistsFault":
          throw await de_SnapshotAlreadyExistsFaultRes(parsedOutput, context);
        case "SnapshotFeatureNotSupportedFault":
        case "com.amazonaws.elasticache#SnapshotFeatureNotSupportedFault":
          throw await de_SnapshotFeatureNotSupportedFaultRes(parsedOutput, context);
        case "SnapshotQuotaExceededFault":
        case "com.amazonaws.elasticache#SnapshotQuotaExceededFault":
          throw await de_SnapshotQuotaExceededFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DeleteSnapshotCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteSnapshotCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DeleteSnapshotResult(data.DeleteSnapshotResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DeleteSnapshotCommand = de_DeleteSnapshotCommand;
    var de_DeleteSnapshotCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidSnapshotState":
        case "com.amazonaws.elasticache#InvalidSnapshotStateFault":
          throw await de_InvalidSnapshotStateFaultRes(parsedOutput, context);
        case "SnapshotNotFoundFault":
        case "com.amazonaws.elasticache#SnapshotNotFoundFault":
          throw await de_SnapshotNotFoundFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DeleteUserCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteUserCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_User(data.DeleteUserResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DeleteUserCommand = de_DeleteUserCommand;
    var de_DeleteUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DefaultUserAssociatedToUserGroup":
        case "com.amazonaws.elasticache#DefaultUserAssociatedToUserGroupFault":
          throw await de_DefaultUserAssociatedToUserGroupFaultRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidUserState":
        case "com.amazonaws.elasticache#InvalidUserStateFault":
          throw await de_InvalidUserStateFaultRes(parsedOutput, context);
        case "ServiceLinkedRoleNotFoundFault":
        case "com.amazonaws.elasticache#ServiceLinkedRoleNotFoundFault":
          throw await de_ServiceLinkedRoleNotFoundFaultRes(parsedOutput, context);
        case "UserNotFound":
        case "com.amazonaws.elasticache#UserNotFoundFault":
          throw await de_UserNotFoundFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DeleteUserGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteUserGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UserGroup(data.DeleteUserGroupResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DeleteUserGroupCommand = de_DeleteUserGroupCommand;
    var de_DeleteUserGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidUserGroupState":
        case "com.amazonaws.elasticache#InvalidUserGroupStateFault":
          throw await de_InvalidUserGroupStateFaultRes(parsedOutput, context);
        case "ServiceLinkedRoleNotFoundFault":
        case "com.amazonaws.elasticache#ServiceLinkedRoleNotFoundFault":
          throw await de_ServiceLinkedRoleNotFoundFaultRes(parsedOutput, context);
        case "UserGroupNotFound":
        case "com.amazonaws.elasticache#UserGroupNotFoundFault":
          throw await de_UserGroupNotFoundFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DescribeCacheClustersCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeCacheClustersCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CacheClusterMessage(data.DescribeCacheClustersResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DescribeCacheClustersCommand = de_DescribeCacheClustersCommand;
    var de_DescribeCacheClustersCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CacheClusterNotFound":
        case "com.amazonaws.elasticache#CacheClusterNotFoundFault":
          throw await de_CacheClusterNotFoundFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DescribeCacheEngineVersionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeCacheEngineVersionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CacheEngineVersionMessage(data.DescribeCacheEngineVersionsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DescribeCacheEngineVersionsCommand = de_DescribeCacheEngineVersionsCommand;
    var de_DescribeCacheEngineVersionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
    };
    var de_DescribeCacheParameterGroupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeCacheParameterGroupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CacheParameterGroupsMessage(data.DescribeCacheParameterGroupsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DescribeCacheParameterGroupsCommand = de_DescribeCacheParameterGroupsCommand;
    var de_DescribeCacheParameterGroupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CacheParameterGroupNotFound":
        case "com.amazonaws.elasticache#CacheParameterGroupNotFoundFault":
          throw await de_CacheParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DescribeCacheParametersCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeCacheParametersCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CacheParameterGroupDetails(data.DescribeCacheParametersResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DescribeCacheParametersCommand = de_DescribeCacheParametersCommand;
    var de_DescribeCacheParametersCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CacheParameterGroupNotFound":
        case "com.amazonaws.elasticache#CacheParameterGroupNotFoundFault":
          throw await de_CacheParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DescribeCacheSecurityGroupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeCacheSecurityGroupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CacheSecurityGroupMessage(data.DescribeCacheSecurityGroupsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DescribeCacheSecurityGroupsCommand = de_DescribeCacheSecurityGroupsCommand;
    var de_DescribeCacheSecurityGroupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CacheSecurityGroupNotFound":
        case "com.amazonaws.elasticache#CacheSecurityGroupNotFoundFault":
          throw await de_CacheSecurityGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DescribeCacheSubnetGroupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeCacheSubnetGroupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CacheSubnetGroupMessage(data.DescribeCacheSubnetGroupsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DescribeCacheSubnetGroupsCommand = de_DescribeCacheSubnetGroupsCommand;
    var de_DescribeCacheSubnetGroupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CacheSubnetGroupNotFoundFault":
        case "com.amazonaws.elasticache#CacheSubnetGroupNotFoundFault":
          throw await de_CacheSubnetGroupNotFoundFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DescribeEngineDefaultParametersCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeEngineDefaultParametersCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeEngineDefaultParametersResult(data.DescribeEngineDefaultParametersResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DescribeEngineDefaultParametersCommand = de_DescribeEngineDefaultParametersCommand;
    var de_DescribeEngineDefaultParametersCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DescribeEventsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeEventsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_EventsMessage(data.DescribeEventsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DescribeEventsCommand = de_DescribeEventsCommand;
    var de_DescribeEventsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DescribeGlobalReplicationGroupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeGlobalReplicationGroupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeGlobalReplicationGroupsResult(data.DescribeGlobalReplicationGroupsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DescribeGlobalReplicationGroupsCommand = de_DescribeGlobalReplicationGroupsCommand;
    var de_DescribeGlobalReplicationGroupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "GlobalReplicationGroupNotFoundFault":
        case "com.amazonaws.elasticache#GlobalReplicationGroupNotFoundFault":
          throw await de_GlobalReplicationGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DescribeReplicationGroupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeReplicationGroupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ReplicationGroupMessage(data.DescribeReplicationGroupsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DescribeReplicationGroupsCommand = de_DescribeReplicationGroupsCommand;
    var de_DescribeReplicationGroupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ReplicationGroupNotFoundFault":
        case "com.amazonaws.elasticache#ReplicationGroupNotFoundFault":
          throw await de_ReplicationGroupNotFoundFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DescribeReservedCacheNodesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeReservedCacheNodesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ReservedCacheNodeMessage(data.DescribeReservedCacheNodesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DescribeReservedCacheNodesCommand = de_DescribeReservedCacheNodesCommand;
    var de_DescribeReservedCacheNodesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ReservedCacheNodeNotFound":
        case "com.amazonaws.elasticache#ReservedCacheNodeNotFoundFault":
          throw await de_ReservedCacheNodeNotFoundFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DescribeReservedCacheNodesOfferingsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeReservedCacheNodesOfferingsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ReservedCacheNodesOfferingMessage(data.DescribeReservedCacheNodesOfferingsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DescribeReservedCacheNodesOfferingsCommand = de_DescribeReservedCacheNodesOfferingsCommand;
    var de_DescribeReservedCacheNodesOfferingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ReservedCacheNodesOfferingNotFound":
        case "com.amazonaws.elasticache#ReservedCacheNodesOfferingNotFoundFault":
          throw await de_ReservedCacheNodesOfferingNotFoundFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DescribeServiceUpdatesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeServiceUpdatesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ServiceUpdatesMessage(data.DescribeServiceUpdatesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DescribeServiceUpdatesCommand = de_DescribeServiceUpdatesCommand;
    var de_DescribeServiceUpdatesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ServiceUpdateNotFoundFault":
        case "com.amazonaws.elasticache#ServiceUpdateNotFoundFault":
          throw await de_ServiceUpdateNotFoundFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DescribeSnapshotsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeSnapshotsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeSnapshotsListMessage(data.DescribeSnapshotsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DescribeSnapshotsCommand = de_DescribeSnapshotsCommand;
    var de_DescribeSnapshotsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CacheClusterNotFound":
        case "com.amazonaws.elasticache#CacheClusterNotFoundFault":
          throw await de_CacheClusterNotFoundFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "SnapshotNotFoundFault":
        case "com.amazonaws.elasticache#SnapshotNotFoundFault":
          throw await de_SnapshotNotFoundFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DescribeUpdateActionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeUpdateActionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateActionsMessage(data.DescribeUpdateActionsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DescribeUpdateActionsCommand = de_DescribeUpdateActionsCommand;
    var de_DescribeUpdateActionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DescribeUserGroupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeUserGroupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeUserGroupsResult(data.DescribeUserGroupsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DescribeUserGroupsCommand = de_DescribeUserGroupsCommand;
    var de_DescribeUserGroupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "ServiceLinkedRoleNotFoundFault":
        case "com.amazonaws.elasticache#ServiceLinkedRoleNotFoundFault":
          throw await de_ServiceLinkedRoleNotFoundFaultRes(parsedOutput, context);
        case "UserGroupNotFound":
        case "com.amazonaws.elasticache#UserGroupNotFoundFault":
          throw await de_UserGroupNotFoundFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DescribeUsersCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeUsersCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeUsersResult(data.DescribeUsersResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DescribeUsersCommand = de_DescribeUsersCommand;
    var de_DescribeUsersCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "ServiceLinkedRoleNotFoundFault":
        case "com.amazonaws.elasticache#ServiceLinkedRoleNotFoundFault":
          throw await de_ServiceLinkedRoleNotFoundFaultRes(parsedOutput, context);
        case "UserNotFound":
        case "com.amazonaws.elasticache#UserNotFoundFault":
          throw await de_UserNotFoundFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DisassociateGlobalReplicationGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DisassociateGlobalReplicationGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DisassociateGlobalReplicationGroupResult(data.DisassociateGlobalReplicationGroupResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_DisassociateGlobalReplicationGroupCommand = de_DisassociateGlobalReplicationGroupCommand;
    var de_DisassociateGlobalReplicationGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "GlobalReplicationGroupNotFoundFault":
        case "com.amazonaws.elasticache#GlobalReplicationGroupNotFoundFault":
          throw await de_GlobalReplicationGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidGlobalReplicationGroupState":
        case "com.amazonaws.elasticache#InvalidGlobalReplicationGroupStateFault":
          throw await de_InvalidGlobalReplicationGroupStateFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_FailoverGlobalReplicationGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_FailoverGlobalReplicationGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_FailoverGlobalReplicationGroupResult(data.FailoverGlobalReplicationGroupResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_FailoverGlobalReplicationGroupCommand = de_FailoverGlobalReplicationGroupCommand;
    var de_FailoverGlobalReplicationGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "GlobalReplicationGroupNotFoundFault":
        case "com.amazonaws.elasticache#GlobalReplicationGroupNotFoundFault":
          throw await de_GlobalReplicationGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidGlobalReplicationGroupState":
        case "com.amazonaws.elasticache#InvalidGlobalReplicationGroupStateFault":
          throw await de_InvalidGlobalReplicationGroupStateFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_IncreaseNodeGroupsInGlobalReplicationGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_IncreaseNodeGroupsInGlobalReplicationGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_IncreaseNodeGroupsInGlobalReplicationGroupResult(data.IncreaseNodeGroupsInGlobalReplicationGroupResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_IncreaseNodeGroupsInGlobalReplicationGroupCommand = de_IncreaseNodeGroupsInGlobalReplicationGroupCommand;
    var de_IncreaseNodeGroupsInGlobalReplicationGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "GlobalReplicationGroupNotFoundFault":
        case "com.amazonaws.elasticache#GlobalReplicationGroupNotFoundFault":
          throw await de_GlobalReplicationGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidGlobalReplicationGroupState":
        case "com.amazonaws.elasticache#InvalidGlobalReplicationGroupStateFault":
          throw await de_InvalidGlobalReplicationGroupStateFaultRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_IncreaseReplicaCountCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_IncreaseReplicaCountCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_IncreaseReplicaCountResult(data.IncreaseReplicaCountResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_IncreaseReplicaCountCommand = de_IncreaseReplicaCountCommand;
    var de_IncreaseReplicaCountCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ClusterQuotaForCustomerExceeded":
        case "com.amazonaws.elasticache#ClusterQuotaForCustomerExceededFault":
          throw await de_ClusterQuotaForCustomerExceededFaultRes(parsedOutput, context);
        case "InsufficientCacheClusterCapacity":
        case "com.amazonaws.elasticache#InsufficientCacheClusterCapacityFault":
          throw await de_InsufficientCacheClusterCapacityFaultRes(parsedOutput, context);
        case "InvalidCacheClusterState":
        case "com.amazonaws.elasticache#InvalidCacheClusterStateFault":
          throw await de_InvalidCacheClusterStateFaultRes(parsedOutput, context);
        case "InvalidKMSKeyFault":
        case "com.amazonaws.elasticache#InvalidKMSKeyFault":
          throw await de_InvalidKMSKeyFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidReplicationGroupState":
        case "com.amazonaws.elasticache#InvalidReplicationGroupStateFault":
          throw await de_InvalidReplicationGroupStateFaultRes(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.elasticache#InvalidVPCNetworkStateFault":
          throw await de_InvalidVPCNetworkStateFaultRes(parsedOutput, context);
        case "NoOperationFault":
        case "com.amazonaws.elasticache#NoOperationFault":
          throw await de_NoOperationFaultRes(parsedOutput, context);
        case "NodeGroupsPerReplicationGroupQuotaExceeded":
        case "com.amazonaws.elasticache#NodeGroupsPerReplicationGroupQuotaExceededFault":
          throw await de_NodeGroupsPerReplicationGroupQuotaExceededFaultRes(parsedOutput, context);
        case "NodeQuotaForCustomerExceeded":
        case "com.amazonaws.elasticache#NodeQuotaForCustomerExceededFault":
          throw await de_NodeQuotaForCustomerExceededFaultRes(parsedOutput, context);
        case "ReplicationGroupNotFoundFault":
        case "com.amazonaws.elasticache#ReplicationGroupNotFoundFault":
          throw await de_ReplicationGroupNotFoundFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_ListAllowedNodeTypeModificationsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListAllowedNodeTypeModificationsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_AllowedNodeTypeModificationsMessage(data.ListAllowedNodeTypeModificationsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_ListAllowedNodeTypeModificationsCommand = de_ListAllowedNodeTypeModificationsCommand;
    var de_ListAllowedNodeTypeModificationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CacheClusterNotFound":
        case "com.amazonaws.elasticache#CacheClusterNotFoundFault":
          throw await de_CacheClusterNotFoundFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ReplicationGroupNotFoundFault":
        case "com.amazonaws.elasticache#ReplicationGroupNotFoundFault":
          throw await de_ReplicationGroupNotFoundFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_ListTagsForResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListTagsForResourceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_TagListMessage(data.ListTagsForResourceResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_ListTagsForResourceCommand = de_ListTagsForResourceCommand;
    var de_ListTagsForResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CacheClusterNotFound":
        case "com.amazonaws.elasticache#CacheClusterNotFoundFault":
          throw await de_CacheClusterNotFoundFaultRes(parsedOutput, context);
        case "CacheParameterGroupNotFound":
        case "com.amazonaws.elasticache#CacheParameterGroupNotFoundFault":
          throw await de_CacheParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "CacheSecurityGroupNotFound":
        case "com.amazonaws.elasticache#CacheSecurityGroupNotFoundFault":
          throw await de_CacheSecurityGroupNotFoundFaultRes(parsedOutput, context);
        case "CacheSubnetGroupNotFoundFault":
        case "com.amazonaws.elasticache#CacheSubnetGroupNotFoundFault":
          throw await de_CacheSubnetGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidARN":
        case "com.amazonaws.elasticache#InvalidARNFault":
          throw await de_InvalidARNFaultRes(parsedOutput, context);
        case "InvalidReplicationGroupState":
        case "com.amazonaws.elasticache#InvalidReplicationGroupStateFault":
          throw await de_InvalidReplicationGroupStateFaultRes(parsedOutput, context);
        case "ReplicationGroupNotFoundFault":
        case "com.amazonaws.elasticache#ReplicationGroupNotFoundFault":
          throw await de_ReplicationGroupNotFoundFaultRes(parsedOutput, context);
        case "ReservedCacheNodeNotFound":
        case "com.amazonaws.elasticache#ReservedCacheNodeNotFoundFault":
          throw await de_ReservedCacheNodeNotFoundFaultRes(parsedOutput, context);
        case "SnapshotNotFoundFault":
        case "com.amazonaws.elasticache#SnapshotNotFoundFault":
          throw await de_SnapshotNotFoundFaultRes(parsedOutput, context);
        case "UserGroupNotFound":
        case "com.amazonaws.elasticache#UserGroupNotFoundFault":
          throw await de_UserGroupNotFoundFaultRes(parsedOutput, context);
        case "UserNotFound":
        case "com.amazonaws.elasticache#UserNotFoundFault":
          throw await de_UserNotFoundFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_ModifyCacheClusterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ModifyCacheClusterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ModifyCacheClusterResult(data.ModifyCacheClusterResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_ModifyCacheClusterCommand = de_ModifyCacheClusterCommand;
    var de_ModifyCacheClusterCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CacheClusterNotFound":
        case "com.amazonaws.elasticache#CacheClusterNotFoundFault":
          throw await de_CacheClusterNotFoundFaultRes(parsedOutput, context);
        case "CacheParameterGroupNotFound":
        case "com.amazonaws.elasticache#CacheParameterGroupNotFoundFault":
          throw await de_CacheParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "CacheSecurityGroupNotFound":
        case "com.amazonaws.elasticache#CacheSecurityGroupNotFoundFault":
          throw await de_CacheSecurityGroupNotFoundFaultRes(parsedOutput, context);
        case "InsufficientCacheClusterCapacity":
        case "com.amazonaws.elasticache#InsufficientCacheClusterCapacityFault":
          throw await de_InsufficientCacheClusterCapacityFaultRes(parsedOutput, context);
        case "InvalidCacheClusterState":
        case "com.amazonaws.elasticache#InvalidCacheClusterStateFault":
          throw await de_InvalidCacheClusterStateFaultRes(parsedOutput, context);
        case "InvalidCacheSecurityGroupState":
        case "com.amazonaws.elasticache#InvalidCacheSecurityGroupStateFault":
          throw await de_InvalidCacheSecurityGroupStateFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.elasticache#InvalidVPCNetworkStateFault":
          throw await de_InvalidVPCNetworkStateFaultRes(parsedOutput, context);
        case "NodeQuotaForClusterExceeded":
        case "com.amazonaws.elasticache#NodeQuotaForClusterExceededFault":
          throw await de_NodeQuotaForClusterExceededFaultRes(parsedOutput, context);
        case "NodeQuotaForCustomerExceeded":
        case "com.amazonaws.elasticache#NodeQuotaForCustomerExceededFault":
          throw await de_NodeQuotaForCustomerExceededFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_ModifyCacheParameterGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ModifyCacheParameterGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CacheParameterGroupNameMessage(data.ModifyCacheParameterGroupResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_ModifyCacheParameterGroupCommand = de_ModifyCacheParameterGroupCommand;
    var de_ModifyCacheParameterGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CacheParameterGroupNotFound":
        case "com.amazonaws.elasticache#CacheParameterGroupNotFoundFault":
          throw await de_CacheParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidCacheParameterGroupState":
        case "com.amazonaws.elasticache#InvalidCacheParameterGroupStateFault":
          throw await de_InvalidCacheParameterGroupStateFaultRes(parsedOutput, context);
        case "InvalidGlobalReplicationGroupState":
        case "com.amazonaws.elasticache#InvalidGlobalReplicationGroupStateFault":
          throw await de_InvalidGlobalReplicationGroupStateFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_ModifyCacheSubnetGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ModifyCacheSubnetGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ModifyCacheSubnetGroupResult(data.ModifyCacheSubnetGroupResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_ModifyCacheSubnetGroupCommand = de_ModifyCacheSubnetGroupCommand;
    var de_ModifyCacheSubnetGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CacheSubnetGroupNotFoundFault":
        case "com.amazonaws.elasticache#CacheSubnetGroupNotFoundFault":
          throw await de_CacheSubnetGroupNotFoundFaultRes(parsedOutput, context);
        case "CacheSubnetQuotaExceededFault":
        case "com.amazonaws.elasticache#CacheSubnetQuotaExceededFault":
          throw await de_CacheSubnetQuotaExceededFaultRes(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.elasticache#InvalidSubnet":
          throw await de_InvalidSubnetRes(parsedOutput, context);
        case "SubnetInUse":
        case "com.amazonaws.elasticache#SubnetInUse":
          throw await de_SubnetInUseRes(parsedOutput, context);
        case "SubnetNotAllowedFault":
        case "com.amazonaws.elasticache#SubnetNotAllowedFault":
          throw await de_SubnetNotAllowedFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_ModifyGlobalReplicationGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ModifyGlobalReplicationGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ModifyGlobalReplicationGroupResult(data.ModifyGlobalReplicationGroupResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_ModifyGlobalReplicationGroupCommand = de_ModifyGlobalReplicationGroupCommand;
    var de_ModifyGlobalReplicationGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "GlobalReplicationGroupNotFoundFault":
        case "com.amazonaws.elasticache#GlobalReplicationGroupNotFoundFault":
          throw await de_GlobalReplicationGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidGlobalReplicationGroupState":
        case "com.amazonaws.elasticache#InvalidGlobalReplicationGroupStateFault":
          throw await de_InvalidGlobalReplicationGroupStateFaultRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_ModifyReplicationGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ModifyReplicationGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ModifyReplicationGroupResult(data.ModifyReplicationGroupResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_ModifyReplicationGroupCommand = de_ModifyReplicationGroupCommand;
    var de_ModifyReplicationGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CacheClusterNotFound":
        case "com.amazonaws.elasticache#CacheClusterNotFoundFault":
          throw await de_CacheClusterNotFoundFaultRes(parsedOutput, context);
        case "CacheParameterGroupNotFound":
        case "com.amazonaws.elasticache#CacheParameterGroupNotFoundFault":
          throw await de_CacheParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "CacheSecurityGroupNotFound":
        case "com.amazonaws.elasticache#CacheSecurityGroupNotFoundFault":
          throw await de_CacheSecurityGroupNotFoundFaultRes(parsedOutput, context);
        case "InsufficientCacheClusterCapacity":
        case "com.amazonaws.elasticache#InsufficientCacheClusterCapacityFault":
          throw await de_InsufficientCacheClusterCapacityFaultRes(parsedOutput, context);
        case "InvalidCacheClusterState":
        case "com.amazonaws.elasticache#InvalidCacheClusterStateFault":
          throw await de_InvalidCacheClusterStateFaultRes(parsedOutput, context);
        case "InvalidCacheSecurityGroupState":
        case "com.amazonaws.elasticache#InvalidCacheSecurityGroupStateFault":
          throw await de_InvalidCacheSecurityGroupStateFaultRes(parsedOutput, context);
        case "InvalidKMSKeyFault":
        case "com.amazonaws.elasticache#InvalidKMSKeyFault":
          throw await de_InvalidKMSKeyFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidReplicationGroupState":
        case "com.amazonaws.elasticache#InvalidReplicationGroupStateFault":
          throw await de_InvalidReplicationGroupStateFaultRes(parsedOutput, context);
        case "InvalidUserGroupState":
        case "com.amazonaws.elasticache#InvalidUserGroupStateFault":
          throw await de_InvalidUserGroupStateFaultRes(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.elasticache#InvalidVPCNetworkStateFault":
          throw await de_InvalidVPCNetworkStateFaultRes(parsedOutput, context);
        case "NodeQuotaForClusterExceeded":
        case "com.amazonaws.elasticache#NodeQuotaForClusterExceededFault":
          throw await de_NodeQuotaForClusterExceededFaultRes(parsedOutput, context);
        case "NodeQuotaForCustomerExceeded":
        case "com.amazonaws.elasticache#NodeQuotaForCustomerExceededFault":
          throw await de_NodeQuotaForCustomerExceededFaultRes(parsedOutput, context);
        case "ReplicationGroupNotFoundFault":
        case "com.amazonaws.elasticache#ReplicationGroupNotFoundFault":
          throw await de_ReplicationGroupNotFoundFaultRes(parsedOutput, context);
        case "UserGroupNotFound":
        case "com.amazonaws.elasticache#UserGroupNotFoundFault":
          throw await de_UserGroupNotFoundFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_ModifyReplicationGroupShardConfigurationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ModifyReplicationGroupShardConfigurationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ModifyReplicationGroupShardConfigurationResult(data.ModifyReplicationGroupShardConfigurationResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_ModifyReplicationGroupShardConfigurationCommand = de_ModifyReplicationGroupShardConfigurationCommand;
    var de_ModifyReplicationGroupShardConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InsufficientCacheClusterCapacity":
        case "com.amazonaws.elasticache#InsufficientCacheClusterCapacityFault":
          throw await de_InsufficientCacheClusterCapacityFaultRes(parsedOutput, context);
        case "InvalidCacheClusterState":
        case "com.amazonaws.elasticache#InvalidCacheClusterStateFault":
          throw await de_InvalidCacheClusterStateFaultRes(parsedOutput, context);
        case "InvalidKMSKeyFault":
        case "com.amazonaws.elasticache#InvalidKMSKeyFault":
          throw await de_InvalidKMSKeyFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidReplicationGroupState":
        case "com.amazonaws.elasticache#InvalidReplicationGroupStateFault":
          throw await de_InvalidReplicationGroupStateFaultRes(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.elasticache#InvalidVPCNetworkStateFault":
          throw await de_InvalidVPCNetworkStateFaultRes(parsedOutput, context);
        case "NodeGroupsPerReplicationGroupQuotaExceeded":
        case "com.amazonaws.elasticache#NodeGroupsPerReplicationGroupQuotaExceededFault":
          throw await de_NodeGroupsPerReplicationGroupQuotaExceededFaultRes(parsedOutput, context);
        case "NodeQuotaForCustomerExceeded":
        case "com.amazonaws.elasticache#NodeQuotaForCustomerExceededFault":
          throw await de_NodeQuotaForCustomerExceededFaultRes(parsedOutput, context);
        case "ReplicationGroupNotFoundFault":
        case "com.amazonaws.elasticache#ReplicationGroupNotFoundFault":
          throw await de_ReplicationGroupNotFoundFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_ModifyUserCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ModifyUserCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_User(data.ModifyUserResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_ModifyUserCommand = de_ModifyUserCommand;
    var de_ModifyUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidUserState":
        case "com.amazonaws.elasticache#InvalidUserStateFault":
          throw await de_InvalidUserStateFaultRes(parsedOutput, context);
        case "ServiceLinkedRoleNotFoundFault":
        case "com.amazonaws.elasticache#ServiceLinkedRoleNotFoundFault":
          throw await de_ServiceLinkedRoleNotFoundFaultRes(parsedOutput, context);
        case "UserNotFound":
        case "com.amazonaws.elasticache#UserNotFoundFault":
          throw await de_UserNotFoundFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_ModifyUserGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ModifyUserGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UserGroup(data.ModifyUserGroupResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_ModifyUserGroupCommand = de_ModifyUserGroupCommand;
    var de_ModifyUserGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DefaultUserRequired":
        case "com.amazonaws.elasticache#DefaultUserRequired":
          throw await de_DefaultUserRequiredRes(parsedOutput, context);
        case "DuplicateUserName":
        case "com.amazonaws.elasticache#DuplicateUserNameFault":
          throw await de_DuplicateUserNameFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidUserGroupState":
        case "com.amazonaws.elasticache#InvalidUserGroupStateFault":
          throw await de_InvalidUserGroupStateFaultRes(parsedOutput, context);
        case "ServiceLinkedRoleNotFoundFault":
        case "com.amazonaws.elasticache#ServiceLinkedRoleNotFoundFault":
          throw await de_ServiceLinkedRoleNotFoundFaultRes(parsedOutput, context);
        case "UserGroupNotFound":
        case "com.amazonaws.elasticache#UserGroupNotFoundFault":
          throw await de_UserGroupNotFoundFaultRes(parsedOutput, context);
        case "UserNotFound":
        case "com.amazonaws.elasticache#UserNotFoundFault":
          throw await de_UserNotFoundFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_PurchaseReservedCacheNodesOfferingCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_PurchaseReservedCacheNodesOfferingCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_PurchaseReservedCacheNodesOfferingResult(data.PurchaseReservedCacheNodesOfferingResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_PurchaseReservedCacheNodesOfferingCommand = de_PurchaseReservedCacheNodesOfferingCommand;
    var de_PurchaseReservedCacheNodesOfferingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ReservedCacheNodeAlreadyExists":
        case "com.amazonaws.elasticache#ReservedCacheNodeAlreadyExistsFault":
          throw await de_ReservedCacheNodeAlreadyExistsFaultRes(parsedOutput, context);
        case "ReservedCacheNodeQuotaExceeded":
        case "com.amazonaws.elasticache#ReservedCacheNodeQuotaExceededFault":
          throw await de_ReservedCacheNodeQuotaExceededFaultRes(parsedOutput, context);
        case "ReservedCacheNodesOfferingNotFound":
        case "com.amazonaws.elasticache#ReservedCacheNodesOfferingNotFoundFault":
          throw await de_ReservedCacheNodesOfferingNotFoundFaultRes(parsedOutput, context);
        case "TagQuotaPerResourceExceeded":
        case "com.amazonaws.elasticache#TagQuotaPerResourceExceeded":
          throw await de_TagQuotaPerResourceExceededRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_RebalanceSlotsInGlobalReplicationGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_RebalanceSlotsInGlobalReplicationGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_RebalanceSlotsInGlobalReplicationGroupResult(data.RebalanceSlotsInGlobalReplicationGroupResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_RebalanceSlotsInGlobalReplicationGroupCommand = de_RebalanceSlotsInGlobalReplicationGroupCommand;
    var de_RebalanceSlotsInGlobalReplicationGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "GlobalReplicationGroupNotFoundFault":
        case "com.amazonaws.elasticache#GlobalReplicationGroupNotFoundFault":
          throw await de_GlobalReplicationGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidGlobalReplicationGroupState":
        case "com.amazonaws.elasticache#InvalidGlobalReplicationGroupStateFault":
          throw await de_InvalidGlobalReplicationGroupStateFaultRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_RebootCacheClusterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_RebootCacheClusterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_RebootCacheClusterResult(data.RebootCacheClusterResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_RebootCacheClusterCommand = de_RebootCacheClusterCommand;
    var de_RebootCacheClusterCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CacheClusterNotFound":
        case "com.amazonaws.elasticache#CacheClusterNotFoundFault":
          throw await de_CacheClusterNotFoundFaultRes(parsedOutput, context);
        case "InvalidCacheClusterState":
        case "com.amazonaws.elasticache#InvalidCacheClusterStateFault":
          throw await de_InvalidCacheClusterStateFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_RemoveTagsFromResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_RemoveTagsFromResourceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_TagListMessage(data.RemoveTagsFromResourceResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_RemoveTagsFromResourceCommand = de_RemoveTagsFromResourceCommand;
    var de_RemoveTagsFromResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CacheClusterNotFound":
        case "com.amazonaws.elasticache#CacheClusterNotFoundFault":
          throw await de_CacheClusterNotFoundFaultRes(parsedOutput, context);
        case "CacheParameterGroupNotFound":
        case "com.amazonaws.elasticache#CacheParameterGroupNotFoundFault":
          throw await de_CacheParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "CacheSecurityGroupNotFound":
        case "com.amazonaws.elasticache#CacheSecurityGroupNotFoundFault":
          throw await de_CacheSecurityGroupNotFoundFaultRes(parsedOutput, context);
        case "CacheSubnetGroupNotFoundFault":
        case "com.amazonaws.elasticache#CacheSubnetGroupNotFoundFault":
          throw await de_CacheSubnetGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidARN":
        case "com.amazonaws.elasticache#InvalidARNFault":
          throw await de_InvalidARNFaultRes(parsedOutput, context);
        case "InvalidReplicationGroupState":
        case "com.amazonaws.elasticache#InvalidReplicationGroupStateFault":
          throw await de_InvalidReplicationGroupStateFaultRes(parsedOutput, context);
        case "ReplicationGroupNotFoundFault":
        case "com.amazonaws.elasticache#ReplicationGroupNotFoundFault":
          throw await de_ReplicationGroupNotFoundFaultRes(parsedOutput, context);
        case "ReservedCacheNodeNotFound":
        case "com.amazonaws.elasticache#ReservedCacheNodeNotFoundFault":
          throw await de_ReservedCacheNodeNotFoundFaultRes(parsedOutput, context);
        case "SnapshotNotFoundFault":
        case "com.amazonaws.elasticache#SnapshotNotFoundFault":
          throw await de_SnapshotNotFoundFaultRes(parsedOutput, context);
        case "TagNotFound":
        case "com.amazonaws.elasticache#TagNotFoundFault":
          throw await de_TagNotFoundFaultRes(parsedOutput, context);
        case "UserGroupNotFound":
        case "com.amazonaws.elasticache#UserGroupNotFoundFault":
          throw await de_UserGroupNotFoundFaultRes(parsedOutput, context);
        case "UserNotFound":
        case "com.amazonaws.elasticache#UserNotFoundFault":
          throw await de_UserNotFoundFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_ResetCacheParameterGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ResetCacheParameterGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CacheParameterGroupNameMessage(data.ResetCacheParameterGroupResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_ResetCacheParameterGroupCommand = de_ResetCacheParameterGroupCommand;
    var de_ResetCacheParameterGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CacheParameterGroupNotFound":
        case "com.amazonaws.elasticache#CacheParameterGroupNotFoundFault":
          throw await de_CacheParameterGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidCacheParameterGroupState":
        case "com.amazonaws.elasticache#InvalidCacheParameterGroupStateFault":
          throw await de_InvalidCacheParameterGroupStateFaultRes(parsedOutput, context);
        case "InvalidGlobalReplicationGroupState":
        case "com.amazonaws.elasticache#InvalidGlobalReplicationGroupStateFault":
          throw await de_InvalidGlobalReplicationGroupStateFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_RevokeCacheSecurityGroupIngressCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_RevokeCacheSecurityGroupIngressCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_RevokeCacheSecurityGroupIngressResult(data.RevokeCacheSecurityGroupIngressResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_RevokeCacheSecurityGroupIngressCommand = de_RevokeCacheSecurityGroupIngressCommand;
    var de_RevokeCacheSecurityGroupIngressCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AuthorizationNotFound":
        case "com.amazonaws.elasticache#AuthorizationNotFoundFault":
          throw await de_AuthorizationNotFoundFaultRes(parsedOutput, context);
        case "CacheSecurityGroupNotFound":
        case "com.amazonaws.elasticache#CacheSecurityGroupNotFoundFault":
          throw await de_CacheSecurityGroupNotFoundFaultRes(parsedOutput, context);
        case "InvalidCacheSecurityGroupState":
        case "com.amazonaws.elasticache#InvalidCacheSecurityGroupStateFault":
          throw await de_InvalidCacheSecurityGroupStateFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_StartMigrationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_StartMigrationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_StartMigrationResponse(data.StartMigrationResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_StartMigrationCommand = de_StartMigrationCommand;
    var de_StartMigrationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidReplicationGroupState":
        case "com.amazonaws.elasticache#InvalidReplicationGroupStateFault":
          throw await de_InvalidReplicationGroupStateFaultRes(parsedOutput, context);
        case "ReplicationGroupAlreadyUnderMigrationFault":
        case "com.amazonaws.elasticache#ReplicationGroupAlreadyUnderMigrationFault":
          throw await de_ReplicationGroupAlreadyUnderMigrationFaultRes(parsedOutput, context);
        case "ReplicationGroupNotFoundFault":
        case "com.amazonaws.elasticache#ReplicationGroupNotFoundFault":
          throw await de_ReplicationGroupNotFoundFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_TestFailoverCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_TestFailoverCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_TestFailoverResult(data.TestFailoverResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_TestFailoverCommand = de_TestFailoverCommand;
    var de_TestFailoverCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "APICallRateForCustomerExceeded":
        case "com.amazonaws.elasticache#APICallRateForCustomerExceededFault":
          throw await de_APICallRateForCustomerExceededFaultRes(parsedOutput, context);
        case "InvalidCacheClusterState":
        case "com.amazonaws.elasticache#InvalidCacheClusterStateFault":
          throw await de_InvalidCacheClusterStateFaultRes(parsedOutput, context);
        case "InvalidKMSKeyFault":
        case "com.amazonaws.elasticache#InvalidKMSKeyFault":
          throw await de_InvalidKMSKeyFaultRes(parsedOutput, context);
        case "InvalidParameterCombination":
        case "com.amazonaws.elasticache#InvalidParameterCombinationException":
          throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidReplicationGroupState":
        case "com.amazonaws.elasticache#InvalidReplicationGroupStateFault":
          throw await de_InvalidReplicationGroupStateFaultRes(parsedOutput, context);
        case "NodeGroupNotFoundFault":
        case "com.amazonaws.elasticache#NodeGroupNotFoundFault":
          throw await de_NodeGroupNotFoundFaultRes(parsedOutput, context);
        case "ReplicationGroupNotFoundFault":
        case "com.amazonaws.elasticache#ReplicationGroupNotFoundFault":
          throw await de_ReplicationGroupNotFoundFaultRes(parsedOutput, context);
        case "TestFailoverNotAvailableFault":
        case "com.amazonaws.elasticache#TestFailoverNotAvailableFault":
          throw await de_TestFailoverNotAvailableFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_TestMigrationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_TestMigrationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_TestMigrationResponse(data.TestMigrationResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    };
    exports2.de_TestMigrationCommand = de_TestMigrationCommand;
    var de_TestMigrationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValue":
        case "com.amazonaws.elasticache#InvalidParameterValueException":
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidReplicationGroupState":
        case "com.amazonaws.elasticache#InvalidReplicationGroupStateFault":
          throw await de_InvalidReplicationGroupStateFaultRes(parsedOutput, context);
        case "ReplicationGroupAlreadyUnderMigrationFault":
        case "com.amazonaws.elasticache#ReplicationGroupAlreadyUnderMigrationFault":
          throw await de_ReplicationGroupAlreadyUnderMigrationFaultRes(parsedOutput, context);
        case "ReplicationGroupNotFoundFault":
        case "com.amazonaws.elasticache#ReplicationGroupNotFoundFault":
          throw await de_ReplicationGroupNotFoundFaultRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_APICallRateForCustomerExceededFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_APICallRateForCustomerExceededFault(body.Error, context);
      const exception = new models_0_1.APICallRateForCustomerExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_AuthorizationAlreadyExistsFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_AuthorizationAlreadyExistsFault(body.Error, context);
      const exception = new models_0_1.AuthorizationAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_AuthorizationNotFoundFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_AuthorizationNotFoundFault(body.Error, context);
      const exception = new models_0_1.AuthorizationNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_CacheClusterAlreadyExistsFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_CacheClusterAlreadyExistsFault(body.Error, context);
      const exception = new models_0_1.CacheClusterAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_CacheClusterNotFoundFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_CacheClusterNotFoundFault(body.Error, context);
      const exception = new models_0_1.CacheClusterNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_CacheParameterGroupAlreadyExistsFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_CacheParameterGroupAlreadyExistsFault(body.Error, context);
      const exception = new models_0_1.CacheParameterGroupAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_CacheParameterGroupNotFoundFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_CacheParameterGroupNotFoundFault(body.Error, context);
      const exception = new models_0_1.CacheParameterGroupNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_CacheParameterGroupQuotaExceededFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_CacheParameterGroupQuotaExceededFault(body.Error, context);
      const exception = new models_0_1.CacheParameterGroupQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_CacheSecurityGroupAlreadyExistsFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_CacheSecurityGroupAlreadyExistsFault(body.Error, context);
      const exception = new models_0_1.CacheSecurityGroupAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_CacheSecurityGroupNotFoundFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_CacheSecurityGroupNotFoundFault(body.Error, context);
      const exception = new models_0_1.CacheSecurityGroupNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_CacheSecurityGroupQuotaExceededFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_CacheSecurityGroupQuotaExceededFault(body.Error, context);
      const exception = new models_0_1.CacheSecurityGroupQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_CacheSubnetGroupAlreadyExistsFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_CacheSubnetGroupAlreadyExistsFault(body.Error, context);
      const exception = new models_0_1.CacheSubnetGroupAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_CacheSubnetGroupInUseRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_CacheSubnetGroupInUse(body.Error, context);
      const exception = new models_0_1.CacheSubnetGroupInUse({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_CacheSubnetGroupNotFoundFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_CacheSubnetGroupNotFoundFault(body.Error, context);
      const exception = new models_0_1.CacheSubnetGroupNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_CacheSubnetGroupQuotaExceededFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_CacheSubnetGroupQuotaExceededFault(body.Error, context);
      const exception = new models_0_1.CacheSubnetGroupQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_CacheSubnetQuotaExceededFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_CacheSubnetQuotaExceededFault(body.Error, context);
      const exception = new models_0_1.CacheSubnetQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ClusterQuotaForCustomerExceededFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ClusterQuotaForCustomerExceededFault(body.Error, context);
      const exception = new models_0_1.ClusterQuotaForCustomerExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_DefaultUserAssociatedToUserGroupFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_DefaultUserAssociatedToUserGroupFault(body.Error, context);
      const exception = new models_0_1.DefaultUserAssociatedToUserGroupFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_DefaultUserRequiredRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_DefaultUserRequired(body.Error, context);
      const exception = new models_0_1.DefaultUserRequired({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_DuplicateUserNameFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_DuplicateUserNameFault(body.Error, context);
      const exception = new models_0_1.DuplicateUserNameFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_GlobalReplicationGroupAlreadyExistsFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_GlobalReplicationGroupAlreadyExistsFault(body.Error, context);
      const exception = new models_0_1.GlobalReplicationGroupAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_GlobalReplicationGroupNotFoundFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_GlobalReplicationGroupNotFoundFault(body.Error, context);
      const exception = new models_0_1.GlobalReplicationGroupNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InsufficientCacheClusterCapacityFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InsufficientCacheClusterCapacityFault(body.Error, context);
      const exception = new models_0_1.InsufficientCacheClusterCapacityFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidARNFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidARNFault(body.Error, context);
      const exception = new models_0_1.InvalidARNFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidCacheClusterStateFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidCacheClusterStateFault(body.Error, context);
      const exception = new models_0_1.InvalidCacheClusterStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidCacheParameterGroupStateFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidCacheParameterGroupStateFault(body.Error, context);
      const exception = new models_0_1.InvalidCacheParameterGroupStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidCacheSecurityGroupStateFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidCacheSecurityGroupStateFault(body.Error, context);
      const exception = new models_0_1.InvalidCacheSecurityGroupStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidGlobalReplicationGroupStateFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidGlobalReplicationGroupStateFault(body.Error, context);
      const exception = new models_0_1.InvalidGlobalReplicationGroupStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidKMSKeyFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidKMSKeyFault(body.Error, context);
      const exception = new models_0_1.InvalidKMSKeyFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidParameterCombinationExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidParameterCombinationException(body.Error, context);
      const exception = new models_0_1.InvalidParameterCombinationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidParameterValueExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidParameterValueException(body.Error, context);
      const exception = new models_0_1.InvalidParameterValueException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidReplicationGroupStateFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidReplicationGroupStateFault(body.Error, context);
      const exception = new models_0_1.InvalidReplicationGroupStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidSnapshotStateFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidSnapshotStateFault(body.Error, context);
      const exception = new models_0_1.InvalidSnapshotStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidSubnetRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidSubnet(body.Error, context);
      const exception = new models_0_1.InvalidSubnet({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidUserGroupStateFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidUserGroupStateFault(body.Error, context);
      const exception = new models_0_1.InvalidUserGroupStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidUserStateFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidUserStateFault(body.Error, context);
      const exception = new models_0_1.InvalidUserStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidVPCNetworkStateFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidVPCNetworkStateFault(body.Error, context);
      const exception = new models_0_1.InvalidVPCNetworkStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_NodeGroupNotFoundFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_NodeGroupNotFoundFault(body.Error, context);
      const exception = new models_0_1.NodeGroupNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_NodeGroupsPerReplicationGroupQuotaExceededFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_NodeGroupsPerReplicationGroupQuotaExceededFault(body.Error, context);
      const exception = new models_0_1.NodeGroupsPerReplicationGroupQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_NodeQuotaForClusterExceededFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_NodeQuotaForClusterExceededFault(body.Error, context);
      const exception = new models_0_1.NodeQuotaForClusterExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_NodeQuotaForCustomerExceededFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_NodeQuotaForCustomerExceededFault(body.Error, context);
      const exception = new models_0_1.NodeQuotaForCustomerExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_NoOperationFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_NoOperationFault(body.Error, context);
      const exception = new models_0_1.NoOperationFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ReplicationGroupAlreadyExistsFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ReplicationGroupAlreadyExistsFault(body.Error, context);
      const exception = new models_0_1.ReplicationGroupAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ReplicationGroupAlreadyUnderMigrationFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ReplicationGroupAlreadyUnderMigrationFault(body.Error, context);
      const exception = new models_0_1.ReplicationGroupAlreadyUnderMigrationFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ReplicationGroupNotFoundFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ReplicationGroupNotFoundFault(body.Error, context);
      const exception = new models_0_1.ReplicationGroupNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ReplicationGroupNotUnderMigrationFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ReplicationGroupNotUnderMigrationFault(body.Error, context);
      const exception = new models_0_1.ReplicationGroupNotUnderMigrationFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ReservedCacheNodeAlreadyExistsFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ReservedCacheNodeAlreadyExistsFault(body.Error, context);
      const exception = new models_0_1.ReservedCacheNodeAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ReservedCacheNodeNotFoundFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ReservedCacheNodeNotFoundFault(body.Error, context);
      const exception = new models_0_1.ReservedCacheNodeNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ReservedCacheNodeQuotaExceededFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ReservedCacheNodeQuotaExceededFault(body.Error, context);
      const exception = new models_0_1.ReservedCacheNodeQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ReservedCacheNodesOfferingNotFoundFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ReservedCacheNodesOfferingNotFoundFault(body.Error, context);
      const exception = new models_0_1.ReservedCacheNodesOfferingNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ServiceLinkedRoleNotFoundFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ServiceLinkedRoleNotFoundFault(body.Error, context);
      const exception = new models_0_1.ServiceLinkedRoleNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ServiceUpdateNotFoundFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ServiceUpdateNotFoundFault(body.Error, context);
      const exception = new models_0_1.ServiceUpdateNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_SnapshotAlreadyExistsFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_SnapshotAlreadyExistsFault(body.Error, context);
      const exception = new models_0_1.SnapshotAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_SnapshotFeatureNotSupportedFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_SnapshotFeatureNotSupportedFault(body.Error, context);
      const exception = new models_0_1.SnapshotFeatureNotSupportedFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_SnapshotNotFoundFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_SnapshotNotFoundFault(body.Error, context);
      const exception = new models_0_1.SnapshotNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_SnapshotQuotaExceededFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_SnapshotQuotaExceededFault(body.Error, context);
      const exception = new models_0_1.SnapshotQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_SubnetInUseRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_SubnetInUse(body.Error, context);
      const exception = new models_0_1.SubnetInUse({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_SubnetNotAllowedFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_SubnetNotAllowedFault(body.Error, context);
      const exception = new models_0_1.SubnetNotAllowedFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TagNotFoundFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_TagNotFoundFault(body.Error, context);
      const exception = new models_0_1.TagNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TagQuotaPerResourceExceededRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_TagQuotaPerResourceExceeded(body.Error, context);
      const exception = new models_0_1.TagQuotaPerResourceExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TestFailoverNotAvailableFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_TestFailoverNotAvailableFault(body.Error, context);
      const exception = new models_0_1.TestFailoverNotAvailableFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_UserAlreadyExistsFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_UserAlreadyExistsFault(body.Error, context);
      const exception = new models_0_1.UserAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_UserGroupAlreadyExistsFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_UserGroupAlreadyExistsFault(body.Error, context);
      const exception = new models_0_1.UserGroupAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_UserGroupNotFoundFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_UserGroupNotFoundFault(body.Error, context);
      const exception = new models_0_1.UserGroupNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_UserGroupQuotaExceededFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_UserGroupQuotaExceededFault(body.Error, context);
      const exception = new models_0_1.UserGroupQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_UserNotFoundFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_UserNotFoundFault(body.Error, context);
      const exception = new models_0_1.UserNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_UserQuotaExceededFaultRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_UserQuotaExceededFault(body.Error, context);
      const exception = new models_0_1.UserQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var se_AddTagsToResourceMessage = (input, context) => {
      const entries = {};
      if (input.ResourceName != null) {
        entries["ResourceName"] = input.ResourceName;
      }
      if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_AuthenticationMode = (input, context) => {
      const entries = {};
      if (input.Type != null) {
        entries["Type"] = input.Type;
      }
      if (input.Passwords != null) {
        const memberEntries = se_PasswordListInput(input.Passwords, context);
        if (input.Passwords?.length === 0) {
          entries.Passwords = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Passwords.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_AuthorizeCacheSecurityGroupIngressMessage = (input, context) => {
      const entries = {};
      if (input.CacheSecurityGroupName != null) {
        entries["CacheSecurityGroupName"] = input.CacheSecurityGroupName;
      }
      if (input.EC2SecurityGroupName != null) {
        entries["EC2SecurityGroupName"] = input.EC2SecurityGroupName;
      }
      if (input.EC2SecurityGroupOwnerId != null) {
        entries["EC2SecurityGroupOwnerId"] = input.EC2SecurityGroupOwnerId;
      }
      return entries;
    };
    var se_AvailabilityZonesList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`AvailabilityZone.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var se_BatchApplyUpdateActionMessage = (input, context) => {
      const entries = {};
      if (input.ReplicationGroupIds != null) {
        const memberEntries = se_ReplicationGroupIdList(input.ReplicationGroupIds, context);
        if (input.ReplicationGroupIds?.length === 0) {
          entries.ReplicationGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ReplicationGroupIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.CacheClusterIds != null) {
        const memberEntries = se_CacheClusterIdList(input.CacheClusterIds, context);
        if (input.CacheClusterIds?.length === 0) {
          entries.CacheClusterIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `CacheClusterIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ServiceUpdateName != null) {
        entries["ServiceUpdateName"] = input.ServiceUpdateName;
      }
      return entries;
    };
    var se_BatchStopUpdateActionMessage = (input, context) => {
      const entries = {};
      if (input.ReplicationGroupIds != null) {
        const memberEntries = se_ReplicationGroupIdList(input.ReplicationGroupIds, context);
        if (input.ReplicationGroupIds?.length === 0) {
          entries.ReplicationGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ReplicationGroupIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.CacheClusterIds != null) {
        const memberEntries = se_CacheClusterIdList(input.CacheClusterIds, context);
        if (input.CacheClusterIds?.length === 0) {
          entries.CacheClusterIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `CacheClusterIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ServiceUpdateName != null) {
        entries["ServiceUpdateName"] = input.ServiceUpdateName;
      }
      return entries;
    };
    var se_CacheClusterIdList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var se_CacheNodeIdsList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`CacheNodeId.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var se_CacheSecurityGroupNameList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`CacheSecurityGroupName.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var se_CloudWatchLogsDestinationDetails = (input, context) => {
      const entries = {};
      if (input.LogGroup != null) {
        entries["LogGroup"] = input.LogGroup;
      }
      return entries;
    };
    var se_CompleteMigrationMessage = (input, context) => {
      const entries = {};
      if (input.ReplicationGroupId != null) {
        entries["ReplicationGroupId"] = input.ReplicationGroupId;
      }
      if (input.Force != null) {
        entries["Force"] = input.Force;
      }
      return entries;
    };
    var se_ConfigureShard = (input, context) => {
      const entries = {};
      if (input.NodeGroupId != null) {
        entries["NodeGroupId"] = input.NodeGroupId;
      }
      if (input.NewReplicaCount != null) {
        entries["NewReplicaCount"] = input.NewReplicaCount;
      }
      if (input.PreferredAvailabilityZones != null) {
        const memberEntries = se_PreferredAvailabilityZoneList(input.PreferredAvailabilityZones, context);
        if (input.PreferredAvailabilityZones?.length === 0) {
          entries.PreferredAvailabilityZones = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PreferredAvailabilityZones.${key}`;
          entries[loc] = value;
        });
      }
      if (input.PreferredOutpostArns != null) {
        const memberEntries = se_PreferredOutpostArnList(input.PreferredOutpostArns, context);
        if (input.PreferredOutpostArns?.length === 0) {
          entries.PreferredOutpostArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PreferredOutpostArns.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_CopySnapshotMessage = (input, context) => {
      const entries = {};
      if (input.SourceSnapshotName != null) {
        entries["SourceSnapshotName"] = input.SourceSnapshotName;
      }
      if (input.TargetSnapshotName != null) {
        entries["TargetSnapshotName"] = input.TargetSnapshotName;
      }
      if (input.TargetBucket != null) {
        entries["TargetBucket"] = input.TargetBucket;
      }
      if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
      }
      if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_CreateCacheClusterMessage = (input, context) => {
      const entries = {};
      if (input.CacheClusterId != null) {
        entries["CacheClusterId"] = input.CacheClusterId;
      }
      if (input.ReplicationGroupId != null) {
        entries["ReplicationGroupId"] = input.ReplicationGroupId;
      }
      if (input.AZMode != null) {
        entries["AZMode"] = input.AZMode;
      }
      if (input.PreferredAvailabilityZone != null) {
        entries["PreferredAvailabilityZone"] = input.PreferredAvailabilityZone;
      }
      if (input.PreferredAvailabilityZones != null) {
        const memberEntries = se_PreferredAvailabilityZoneList(input.PreferredAvailabilityZones, context);
        if (input.PreferredAvailabilityZones?.length === 0) {
          entries.PreferredAvailabilityZones = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PreferredAvailabilityZones.${key}`;
          entries[loc] = value;
        });
      }
      if (input.NumCacheNodes != null) {
        entries["NumCacheNodes"] = input.NumCacheNodes;
      }
      if (input.CacheNodeType != null) {
        entries["CacheNodeType"] = input.CacheNodeType;
      }
      if (input.Engine != null) {
        entries["Engine"] = input.Engine;
      }
      if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
      }
      if (input.CacheParameterGroupName != null) {
        entries["CacheParameterGroupName"] = input.CacheParameterGroupName;
      }
      if (input.CacheSubnetGroupName != null) {
        entries["CacheSubnetGroupName"] = input.CacheSubnetGroupName;
      }
      if (input.CacheSecurityGroupNames != null) {
        const memberEntries = se_CacheSecurityGroupNameList(input.CacheSecurityGroupNames, context);
        if (input.CacheSecurityGroupNames?.length === 0) {
          entries.CacheSecurityGroupNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `CacheSecurityGroupNames.${key}`;
          entries[loc] = value;
        });
      }
      if (input.SecurityGroupIds != null) {
        const memberEntries = se_SecurityGroupIdsList(input.SecurityGroupIds, context);
        if (input.SecurityGroupIds?.length === 0) {
          entries.SecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `SecurityGroupIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.SnapshotArns != null) {
        const memberEntries = se_SnapshotArnsList(input.SnapshotArns, context);
        if (input.SnapshotArns?.length === 0) {
          entries.SnapshotArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `SnapshotArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.SnapshotName != null) {
        entries["SnapshotName"] = input.SnapshotName;
      }
      if (input.PreferredMaintenanceWindow != null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
      }
      if (input.Port != null) {
        entries["Port"] = input.Port;
      }
      if (input.NotificationTopicArn != null) {
        entries["NotificationTopicArn"] = input.NotificationTopicArn;
      }
      if (input.AutoMinorVersionUpgrade != null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
      }
      if (input.SnapshotRetentionLimit != null) {
        entries["SnapshotRetentionLimit"] = input.SnapshotRetentionLimit;
      }
      if (input.SnapshotWindow != null) {
        entries["SnapshotWindow"] = input.SnapshotWindow;
      }
      if (input.AuthToken != null) {
        entries["AuthToken"] = input.AuthToken;
      }
      if (input.OutpostMode != null) {
        entries["OutpostMode"] = input.OutpostMode;
      }
      if (input.PreferredOutpostArn != null) {
        entries["PreferredOutpostArn"] = input.PreferredOutpostArn;
      }
      if (input.PreferredOutpostArns != null) {
        const memberEntries = se_PreferredOutpostArnList(input.PreferredOutpostArns, context);
        if (input.PreferredOutpostArns?.length === 0) {
          entries.PreferredOutpostArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PreferredOutpostArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.LogDeliveryConfigurations != null) {
        const memberEntries = se_LogDeliveryConfigurationRequestList(input.LogDeliveryConfigurations, context);
        if (input.LogDeliveryConfigurations?.length === 0) {
          entries.LogDeliveryConfigurations = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `LogDeliveryConfigurations.${key}`;
          entries[loc] = value;
        });
      }
      if (input.TransitEncryptionEnabled != null) {
        entries["TransitEncryptionEnabled"] = input.TransitEncryptionEnabled;
      }
      if (input.NetworkType != null) {
        entries["NetworkType"] = input.NetworkType;
      }
      if (input.IpDiscovery != null) {
        entries["IpDiscovery"] = input.IpDiscovery;
      }
      return entries;
    };
    var se_CreateCacheParameterGroupMessage = (input, context) => {
      const entries = {};
      if (input.CacheParameterGroupName != null) {
        entries["CacheParameterGroupName"] = input.CacheParameterGroupName;
      }
      if (input.CacheParameterGroupFamily != null) {
        entries["CacheParameterGroupFamily"] = input.CacheParameterGroupFamily;
      }
      if (input.Description != null) {
        entries["Description"] = input.Description;
      }
      if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_CreateCacheSecurityGroupMessage = (input, context) => {
      const entries = {};
      if (input.CacheSecurityGroupName != null) {
        entries["CacheSecurityGroupName"] = input.CacheSecurityGroupName;
      }
      if (input.Description != null) {
        entries["Description"] = input.Description;
      }
      if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_CreateCacheSubnetGroupMessage = (input, context) => {
      const entries = {};
      if (input.CacheSubnetGroupName != null) {
        entries["CacheSubnetGroupName"] = input.CacheSubnetGroupName;
      }
      if (input.CacheSubnetGroupDescription != null) {
        entries["CacheSubnetGroupDescription"] = input.CacheSubnetGroupDescription;
      }
      if (input.SubnetIds != null) {
        const memberEntries = se_SubnetIdentifierList(input.SubnetIds, context);
        if (input.SubnetIds?.length === 0) {
          entries.SubnetIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `SubnetIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_CreateGlobalReplicationGroupMessage = (input, context) => {
      const entries = {};
      if (input.GlobalReplicationGroupIdSuffix != null) {
        entries["GlobalReplicationGroupIdSuffix"] = input.GlobalReplicationGroupIdSuffix;
      }
      if (input.GlobalReplicationGroupDescription != null) {
        entries["GlobalReplicationGroupDescription"] = input.GlobalReplicationGroupDescription;
      }
      if (input.PrimaryReplicationGroupId != null) {
        entries["PrimaryReplicationGroupId"] = input.PrimaryReplicationGroupId;
      }
      return entries;
    };
    var se_CreateReplicationGroupMessage = (input, context) => {
      const entries = {};
      if (input.ReplicationGroupId != null) {
        entries["ReplicationGroupId"] = input.ReplicationGroupId;
      }
      if (input.ReplicationGroupDescription != null) {
        entries["ReplicationGroupDescription"] = input.ReplicationGroupDescription;
      }
      if (input.GlobalReplicationGroupId != null) {
        entries["GlobalReplicationGroupId"] = input.GlobalReplicationGroupId;
      }
      if (input.PrimaryClusterId != null) {
        entries["PrimaryClusterId"] = input.PrimaryClusterId;
      }
      if (input.AutomaticFailoverEnabled != null) {
        entries["AutomaticFailoverEnabled"] = input.AutomaticFailoverEnabled;
      }
      if (input.MultiAZEnabled != null) {
        entries["MultiAZEnabled"] = input.MultiAZEnabled;
      }
      if (input.NumCacheClusters != null) {
        entries["NumCacheClusters"] = input.NumCacheClusters;
      }
      if (input.PreferredCacheClusterAZs != null) {
        const memberEntries = se_AvailabilityZonesList(input.PreferredCacheClusterAZs, context);
        if (input.PreferredCacheClusterAZs?.length === 0) {
          entries.PreferredCacheClusterAZs = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PreferredCacheClusterAZs.${key}`;
          entries[loc] = value;
        });
      }
      if (input.NumNodeGroups != null) {
        entries["NumNodeGroups"] = input.NumNodeGroups;
      }
      if (input.ReplicasPerNodeGroup != null) {
        entries["ReplicasPerNodeGroup"] = input.ReplicasPerNodeGroup;
      }
      if (input.NodeGroupConfiguration != null) {
        const memberEntries = se_NodeGroupConfigurationList(input.NodeGroupConfiguration, context);
        if (input.NodeGroupConfiguration?.length === 0) {
          entries.NodeGroupConfiguration = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `NodeGroupConfiguration.${key}`;
          entries[loc] = value;
        });
      }
      if (input.CacheNodeType != null) {
        entries["CacheNodeType"] = input.CacheNodeType;
      }
      if (input.Engine != null) {
        entries["Engine"] = input.Engine;
      }
      if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
      }
      if (input.CacheParameterGroupName != null) {
        entries["CacheParameterGroupName"] = input.CacheParameterGroupName;
      }
      if (input.CacheSubnetGroupName != null) {
        entries["CacheSubnetGroupName"] = input.CacheSubnetGroupName;
      }
      if (input.CacheSecurityGroupNames != null) {
        const memberEntries = se_CacheSecurityGroupNameList(input.CacheSecurityGroupNames, context);
        if (input.CacheSecurityGroupNames?.length === 0) {
          entries.CacheSecurityGroupNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `CacheSecurityGroupNames.${key}`;
          entries[loc] = value;
        });
      }
      if (input.SecurityGroupIds != null) {
        const memberEntries = se_SecurityGroupIdsList(input.SecurityGroupIds, context);
        if (input.SecurityGroupIds?.length === 0) {
          entries.SecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `SecurityGroupIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.SnapshotArns != null) {
        const memberEntries = se_SnapshotArnsList(input.SnapshotArns, context);
        if (input.SnapshotArns?.length === 0) {
          entries.SnapshotArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `SnapshotArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.SnapshotName != null) {
        entries["SnapshotName"] = input.SnapshotName;
      }
      if (input.PreferredMaintenanceWindow != null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
      }
      if (input.Port != null) {
        entries["Port"] = input.Port;
      }
      if (input.NotificationTopicArn != null) {
        entries["NotificationTopicArn"] = input.NotificationTopicArn;
      }
      if (input.AutoMinorVersionUpgrade != null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
      }
      if (input.SnapshotRetentionLimit != null) {
        entries["SnapshotRetentionLimit"] = input.SnapshotRetentionLimit;
      }
      if (input.SnapshotWindow != null) {
        entries["SnapshotWindow"] = input.SnapshotWindow;
      }
      if (input.AuthToken != null) {
        entries["AuthToken"] = input.AuthToken;
      }
      if (input.TransitEncryptionEnabled != null) {
        entries["TransitEncryptionEnabled"] = input.TransitEncryptionEnabled;
      }
      if (input.AtRestEncryptionEnabled != null) {
        entries["AtRestEncryptionEnabled"] = input.AtRestEncryptionEnabled;
      }
      if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
      }
      if (input.UserGroupIds != null) {
        const memberEntries = se_UserGroupIdListInput(input.UserGroupIds, context);
        if (input.UserGroupIds?.length === 0) {
          entries.UserGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `UserGroupIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.LogDeliveryConfigurations != null) {
        const memberEntries = se_LogDeliveryConfigurationRequestList(input.LogDeliveryConfigurations, context);
        if (input.LogDeliveryConfigurations?.length === 0) {
          entries.LogDeliveryConfigurations = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `LogDeliveryConfigurations.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DataTieringEnabled != null) {
        entries["DataTieringEnabled"] = input.DataTieringEnabled;
      }
      if (input.NetworkType != null) {
        entries["NetworkType"] = input.NetworkType;
      }
      if (input.IpDiscovery != null) {
        entries["IpDiscovery"] = input.IpDiscovery;
      }
      if (input.TransitEncryptionMode != null) {
        entries["TransitEncryptionMode"] = input.TransitEncryptionMode;
      }
      if (input.ClusterMode != null) {
        entries["ClusterMode"] = input.ClusterMode;
      }
      return entries;
    };
    var se_CreateSnapshotMessage = (input, context) => {
      const entries = {};
      if (input.ReplicationGroupId != null) {
        entries["ReplicationGroupId"] = input.ReplicationGroupId;
      }
      if (input.CacheClusterId != null) {
        entries["CacheClusterId"] = input.CacheClusterId;
      }
      if (input.SnapshotName != null) {
        entries["SnapshotName"] = input.SnapshotName;
      }
      if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
      }
      if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_CreateUserGroupMessage = (input, context) => {
      const entries = {};
      if (input.UserGroupId != null) {
        entries["UserGroupId"] = input.UserGroupId;
      }
      if (input.Engine != null) {
        entries["Engine"] = input.Engine;
      }
      if (input.UserIds != null) {
        const memberEntries = se_UserIdListInput(input.UserIds, context);
        if (input.UserIds?.length === 0) {
          entries.UserIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `UserIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_CreateUserMessage = (input, context) => {
      const entries = {};
      if (input.UserId != null) {
        entries["UserId"] = input.UserId;
      }
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.Engine != null) {
        entries["Engine"] = input.Engine;
      }
      if (input.Passwords != null) {
        const memberEntries = se_PasswordListInput(input.Passwords, context);
        if (input.Passwords?.length === 0) {
          entries.Passwords = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Passwords.${key}`;
          entries[loc] = value;
        });
      }
      if (input.AccessString != null) {
        entries["AccessString"] = input.AccessString;
      }
      if (input.NoPasswordRequired != null) {
        entries["NoPasswordRequired"] = input.NoPasswordRequired;
      }
      if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.AuthenticationMode != null) {
        const memberEntries = se_AuthenticationMode(input.AuthenticationMode, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `AuthenticationMode.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_CustomerNodeEndpoint = (input, context) => {
      const entries = {};
      if (input.Address != null) {
        entries["Address"] = input.Address;
      }
      if (input.Port != null) {
        entries["Port"] = input.Port;
      }
      return entries;
    };
    var se_CustomerNodeEndpointList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_CustomerNodeEndpoint(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var se_DecreaseNodeGroupsInGlobalReplicationGroupMessage = (input, context) => {
      const entries = {};
      if (input.GlobalReplicationGroupId != null) {
        entries["GlobalReplicationGroupId"] = input.GlobalReplicationGroupId;
      }
      if (input.NodeGroupCount != null) {
        entries["NodeGroupCount"] = input.NodeGroupCount;
      }
      if (input.GlobalNodeGroupsToRemove != null) {
        const memberEntries = se_GlobalNodeGroupIdList(input.GlobalNodeGroupsToRemove, context);
        if (input.GlobalNodeGroupsToRemove?.length === 0) {
          entries.GlobalNodeGroupsToRemove = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `GlobalNodeGroupsToRemove.${key}`;
          entries[loc] = value;
        });
      }
      if (input.GlobalNodeGroupsToRetain != null) {
        const memberEntries = se_GlobalNodeGroupIdList(input.GlobalNodeGroupsToRetain, context);
        if (input.GlobalNodeGroupsToRetain?.length === 0) {
          entries.GlobalNodeGroupsToRetain = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `GlobalNodeGroupsToRetain.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ApplyImmediately != null) {
        entries["ApplyImmediately"] = input.ApplyImmediately;
      }
      return entries;
    };
    var se_DecreaseReplicaCountMessage = (input, context) => {
      const entries = {};
      if (input.ReplicationGroupId != null) {
        entries["ReplicationGroupId"] = input.ReplicationGroupId;
      }
      if (input.NewReplicaCount != null) {
        entries["NewReplicaCount"] = input.NewReplicaCount;
      }
      if (input.ReplicaConfiguration != null) {
        const memberEntries = se_ReplicaConfigurationList(input.ReplicaConfiguration, context);
        if (input.ReplicaConfiguration?.length === 0) {
          entries.ReplicaConfiguration = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ReplicaConfiguration.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ReplicasToRemove != null) {
        const memberEntries = se_RemoveReplicasList(input.ReplicasToRemove, context);
        if (input.ReplicasToRemove?.length === 0) {
          entries.ReplicasToRemove = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ReplicasToRemove.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ApplyImmediately != null) {
        entries["ApplyImmediately"] = input.ApplyImmediately;
      }
      return entries;
    };
    var se_DeleteCacheClusterMessage = (input, context) => {
      const entries = {};
      if (input.CacheClusterId != null) {
        entries["CacheClusterId"] = input.CacheClusterId;
      }
      if (input.FinalSnapshotIdentifier != null) {
        entries["FinalSnapshotIdentifier"] = input.FinalSnapshotIdentifier;
      }
      return entries;
    };
    var se_DeleteCacheParameterGroupMessage = (input, context) => {
      const entries = {};
      if (input.CacheParameterGroupName != null) {
        entries["CacheParameterGroupName"] = input.CacheParameterGroupName;
      }
      return entries;
    };
    var se_DeleteCacheSecurityGroupMessage = (input, context) => {
      const entries = {};
      if (input.CacheSecurityGroupName != null) {
        entries["CacheSecurityGroupName"] = input.CacheSecurityGroupName;
      }
      return entries;
    };
    var se_DeleteCacheSubnetGroupMessage = (input, context) => {
      const entries = {};
      if (input.CacheSubnetGroupName != null) {
        entries["CacheSubnetGroupName"] = input.CacheSubnetGroupName;
      }
      return entries;
    };
    var se_DeleteGlobalReplicationGroupMessage = (input, context) => {
      const entries = {};
      if (input.GlobalReplicationGroupId != null) {
        entries["GlobalReplicationGroupId"] = input.GlobalReplicationGroupId;
      }
      if (input.RetainPrimaryReplicationGroup != null) {
        entries["RetainPrimaryReplicationGroup"] = input.RetainPrimaryReplicationGroup;
      }
      return entries;
    };
    var se_DeleteReplicationGroupMessage = (input, context) => {
      const entries = {};
      if (input.ReplicationGroupId != null) {
        entries["ReplicationGroupId"] = input.ReplicationGroupId;
      }
      if (input.RetainPrimaryCluster != null) {
        entries["RetainPrimaryCluster"] = input.RetainPrimaryCluster;
      }
      if (input.FinalSnapshotIdentifier != null) {
        entries["FinalSnapshotIdentifier"] = input.FinalSnapshotIdentifier;
      }
      return entries;
    };
    var se_DeleteSnapshotMessage = (input, context) => {
      const entries = {};
      if (input.SnapshotName != null) {
        entries["SnapshotName"] = input.SnapshotName;
      }
      return entries;
    };
    var se_DeleteUserGroupMessage = (input, context) => {
      const entries = {};
      if (input.UserGroupId != null) {
        entries["UserGroupId"] = input.UserGroupId;
      }
      return entries;
    };
    var se_DeleteUserMessage = (input, context) => {
      const entries = {};
      if (input.UserId != null) {
        entries["UserId"] = input.UserId;
      }
      return entries;
    };
    var se_DescribeCacheClustersMessage = (input, context) => {
      const entries = {};
      if (input.CacheClusterId != null) {
        entries["CacheClusterId"] = input.CacheClusterId;
      }
      if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.ShowCacheNodeInfo != null) {
        entries["ShowCacheNodeInfo"] = input.ShowCacheNodeInfo;
      }
      if (input.ShowCacheClustersNotInReplicationGroups != null) {
        entries["ShowCacheClustersNotInReplicationGroups"] = input.ShowCacheClustersNotInReplicationGroups;
      }
      return entries;
    };
    var se_DescribeCacheEngineVersionsMessage = (input, context) => {
      const entries = {};
      if (input.Engine != null) {
        entries["Engine"] = input.Engine;
      }
      if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
      }
      if (input.CacheParameterGroupFamily != null) {
        entries["CacheParameterGroupFamily"] = input.CacheParameterGroupFamily;
      }
      if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.DefaultOnly != null) {
        entries["DefaultOnly"] = input.DefaultOnly;
      }
      return entries;
    };
    var se_DescribeCacheParameterGroupsMessage = (input, context) => {
      const entries = {};
      if (input.CacheParameterGroupName != null) {
        entries["CacheParameterGroupName"] = input.CacheParameterGroupName;
      }
      if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var se_DescribeCacheParametersMessage = (input, context) => {
      const entries = {};
      if (input.CacheParameterGroupName != null) {
        entries["CacheParameterGroupName"] = input.CacheParameterGroupName;
      }
      if (input.Source != null) {
        entries["Source"] = input.Source;
      }
      if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var se_DescribeCacheSecurityGroupsMessage = (input, context) => {
      const entries = {};
      if (input.CacheSecurityGroupName != null) {
        entries["CacheSecurityGroupName"] = input.CacheSecurityGroupName;
      }
      if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var se_DescribeCacheSubnetGroupsMessage = (input, context) => {
      const entries = {};
      if (input.CacheSubnetGroupName != null) {
        entries["CacheSubnetGroupName"] = input.CacheSubnetGroupName;
      }
      if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var se_DescribeEngineDefaultParametersMessage = (input, context) => {
      const entries = {};
      if (input.CacheParameterGroupFamily != null) {
        entries["CacheParameterGroupFamily"] = input.CacheParameterGroupFamily;
      }
      if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var se_DescribeEventsMessage = (input, context) => {
      const entries = {};
      if (input.SourceIdentifier != null) {
        entries["SourceIdentifier"] = input.SourceIdentifier;
      }
      if (input.SourceType != null) {
        entries["SourceType"] = input.SourceType;
      }
      if (input.StartTime != null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
      }
      if (input.EndTime != null) {
        entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
      }
      if (input.Duration != null) {
        entries["Duration"] = input.Duration;
      }
      if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var se_DescribeGlobalReplicationGroupsMessage = (input, context) => {
      const entries = {};
      if (input.GlobalReplicationGroupId != null) {
        entries["GlobalReplicationGroupId"] = input.GlobalReplicationGroupId;
      }
      if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.ShowMemberInfo != null) {
        entries["ShowMemberInfo"] = input.ShowMemberInfo;
      }
      return entries;
    };
    var se_DescribeReplicationGroupsMessage = (input, context) => {
      const entries = {};
      if (input.ReplicationGroupId != null) {
        entries["ReplicationGroupId"] = input.ReplicationGroupId;
      }
      if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var se_DescribeReservedCacheNodesMessage = (input, context) => {
      const entries = {};
      if (input.ReservedCacheNodeId != null) {
        entries["ReservedCacheNodeId"] = input.ReservedCacheNodeId;
      }
      if (input.ReservedCacheNodesOfferingId != null) {
        entries["ReservedCacheNodesOfferingId"] = input.ReservedCacheNodesOfferingId;
      }
      if (input.CacheNodeType != null) {
        entries["CacheNodeType"] = input.CacheNodeType;
      }
      if (input.Duration != null) {
        entries["Duration"] = input.Duration;
      }
      if (input.ProductDescription != null) {
        entries["ProductDescription"] = input.ProductDescription;
      }
      if (input.OfferingType != null) {
        entries["OfferingType"] = input.OfferingType;
      }
      if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var se_DescribeReservedCacheNodesOfferingsMessage = (input, context) => {
      const entries = {};
      if (input.ReservedCacheNodesOfferingId != null) {
        entries["ReservedCacheNodesOfferingId"] = input.ReservedCacheNodesOfferingId;
      }
      if (input.CacheNodeType != null) {
        entries["CacheNodeType"] = input.CacheNodeType;
      }
      if (input.Duration != null) {
        entries["Duration"] = input.Duration;
      }
      if (input.ProductDescription != null) {
        entries["ProductDescription"] = input.ProductDescription;
      }
      if (input.OfferingType != null) {
        entries["OfferingType"] = input.OfferingType;
      }
      if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var se_DescribeServiceUpdatesMessage = (input, context) => {
      const entries = {};
      if (input.ServiceUpdateName != null) {
        entries["ServiceUpdateName"] = input.ServiceUpdateName;
      }
      if (input.ServiceUpdateStatus != null) {
        const memberEntries = se_ServiceUpdateStatusList(input.ServiceUpdateStatus, context);
        if (input.ServiceUpdateStatus?.length === 0) {
          entries.ServiceUpdateStatus = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ServiceUpdateStatus.${key}`;
          entries[loc] = value;
        });
      }
      if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var se_DescribeSnapshotsMessage = (input, context) => {
      const entries = {};
      if (input.ReplicationGroupId != null) {
        entries["ReplicationGroupId"] = input.ReplicationGroupId;
      }
      if (input.CacheClusterId != null) {
        entries["CacheClusterId"] = input.CacheClusterId;
      }
      if (input.SnapshotName != null) {
        entries["SnapshotName"] = input.SnapshotName;
      }
      if (input.SnapshotSource != null) {
        entries["SnapshotSource"] = input.SnapshotSource;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.ShowNodeGroupConfig != null) {
        entries["ShowNodeGroupConfig"] = input.ShowNodeGroupConfig;
      }
      return entries;
    };
    var se_DescribeUpdateActionsMessage = (input, context) => {
      const entries = {};
      if (input.ServiceUpdateName != null) {
        entries["ServiceUpdateName"] = input.ServiceUpdateName;
      }
      if (input.ReplicationGroupIds != null) {
        const memberEntries = se_ReplicationGroupIdList(input.ReplicationGroupIds, context);
        if (input.ReplicationGroupIds?.length === 0) {
          entries.ReplicationGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ReplicationGroupIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.CacheClusterIds != null) {
        const memberEntries = se_CacheClusterIdList(input.CacheClusterIds, context);
        if (input.CacheClusterIds?.length === 0) {
          entries.CacheClusterIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `CacheClusterIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Engine != null) {
        entries["Engine"] = input.Engine;
      }
      if (input.ServiceUpdateStatus != null) {
        const memberEntries = se_ServiceUpdateStatusList(input.ServiceUpdateStatus, context);
        if (input.ServiceUpdateStatus?.length === 0) {
          entries.ServiceUpdateStatus = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ServiceUpdateStatus.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ServiceUpdateTimeRange != null) {
        const memberEntries = se_TimeRangeFilter(input.ServiceUpdateTimeRange, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ServiceUpdateTimeRange.${key}`;
          entries[loc] = value;
        });
      }
      if (input.UpdateActionStatus != null) {
        const memberEntries = se_UpdateActionStatusList(input.UpdateActionStatus, context);
        if (input.UpdateActionStatus?.length === 0) {
          entries.UpdateActionStatus = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `UpdateActionStatus.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ShowNodeLevelUpdateStatus != null) {
        entries["ShowNodeLevelUpdateStatus"] = input.ShowNodeLevelUpdateStatus;
      }
      if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var se_DescribeUserGroupsMessage = (input, context) => {
      const entries = {};
      if (input.UserGroupId != null) {
        entries["UserGroupId"] = input.UserGroupId;
      }
      if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var se_DescribeUsersMessage = (input, context) => {
      const entries = {};
      if (input.Engine != null) {
        entries["Engine"] = input.Engine;
      }
      if (input.UserId != null) {
        entries["UserId"] = input.UserId;
      }
      if (input.Filters != null) {
        const memberEntries = se_FilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
          entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var se_DestinationDetails = (input, context) => {
      const entries = {};
      if (input.CloudWatchLogsDetails != null) {
        const memberEntries = se_CloudWatchLogsDestinationDetails(input.CloudWatchLogsDetails, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `CloudWatchLogsDetails.${key}`;
          entries[loc] = value;
        });
      }
      if (input.KinesisFirehoseDetails != null) {
        const memberEntries = se_KinesisFirehoseDestinationDetails(input.KinesisFirehoseDetails, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `KinesisFirehoseDetails.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_DisassociateGlobalReplicationGroupMessage = (input, context) => {
      const entries = {};
      if (input.GlobalReplicationGroupId != null) {
        entries["GlobalReplicationGroupId"] = input.GlobalReplicationGroupId;
      }
      if (input.ReplicationGroupId != null) {
        entries["ReplicationGroupId"] = input.ReplicationGroupId;
      }
      if (input.ReplicationGroupRegion != null) {
        entries["ReplicationGroupRegion"] = input.ReplicationGroupRegion;
      }
      return entries;
    };
    var se_FailoverGlobalReplicationGroupMessage = (input, context) => {
      const entries = {};
      if (input.GlobalReplicationGroupId != null) {
        entries["GlobalReplicationGroupId"] = input.GlobalReplicationGroupId;
      }
      if (input.PrimaryRegion != null) {
        entries["PrimaryRegion"] = input.PrimaryRegion;
      }
      if (input.PrimaryReplicationGroupId != null) {
        entries["PrimaryReplicationGroupId"] = input.PrimaryReplicationGroupId;
      }
      return entries;
    };
    var se_Filter = (input, context) => {
      const entries = {};
      if (input.Name != null) {
        entries["Name"] = input.Name;
      }
      if (input.Values != null) {
        const memberEntries = se_FilterValueList(input.Values, context);
        if (input.Values?.length === 0) {
          entries.Values = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Values.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_FilterList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_Filter(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var se_FilterValueList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var se_GlobalNodeGroupIdList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`GlobalNodeGroupId.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var se_IncreaseNodeGroupsInGlobalReplicationGroupMessage = (input, context) => {
      const entries = {};
      if (input.GlobalReplicationGroupId != null) {
        entries["GlobalReplicationGroupId"] = input.GlobalReplicationGroupId;
      }
      if (input.NodeGroupCount != null) {
        entries["NodeGroupCount"] = input.NodeGroupCount;
      }
      if (input.RegionalConfigurations != null) {
        const memberEntries = se_RegionalConfigurationList(input.RegionalConfigurations, context);
        if (input.RegionalConfigurations?.length === 0) {
          entries.RegionalConfigurations = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `RegionalConfigurations.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ApplyImmediately != null) {
        entries["ApplyImmediately"] = input.ApplyImmediately;
      }
      return entries;
    };
    var se_IncreaseReplicaCountMessage = (input, context) => {
      const entries = {};
      if (input.ReplicationGroupId != null) {
        entries["ReplicationGroupId"] = input.ReplicationGroupId;
      }
      if (input.NewReplicaCount != null) {
        entries["NewReplicaCount"] = input.NewReplicaCount;
      }
      if (input.ReplicaConfiguration != null) {
        const memberEntries = se_ReplicaConfigurationList(input.ReplicaConfiguration, context);
        if (input.ReplicaConfiguration?.length === 0) {
          entries.ReplicaConfiguration = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ReplicaConfiguration.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ApplyImmediately != null) {
        entries["ApplyImmediately"] = input.ApplyImmediately;
      }
      return entries;
    };
    var se_KeyList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var se_KinesisFirehoseDestinationDetails = (input, context) => {
      const entries = {};
      if (input.DeliveryStream != null) {
        entries["DeliveryStream"] = input.DeliveryStream;
      }
      return entries;
    };
    var se_ListAllowedNodeTypeModificationsMessage = (input, context) => {
      const entries = {};
      if (input.CacheClusterId != null) {
        entries["CacheClusterId"] = input.CacheClusterId;
      }
      if (input.ReplicationGroupId != null) {
        entries["ReplicationGroupId"] = input.ReplicationGroupId;
      }
      return entries;
    };
    var se_ListTagsForResourceMessage = (input, context) => {
      const entries = {};
      if (input.ResourceName != null) {
        entries["ResourceName"] = input.ResourceName;
      }
      return entries;
    };
    var se_LogDeliveryConfigurationRequest = (input, context) => {
      const entries = {};
      if (input.LogType != null) {
        entries["LogType"] = input.LogType;
      }
      if (input.DestinationType != null) {
        entries["DestinationType"] = input.DestinationType;
      }
      if (input.DestinationDetails != null) {
        const memberEntries = se_DestinationDetails(input.DestinationDetails, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `DestinationDetails.${key}`;
          entries[loc] = value;
        });
      }
      if (input.LogFormat != null) {
        entries["LogFormat"] = input.LogFormat;
      }
      if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
      }
      return entries;
    };
    var se_LogDeliveryConfigurationRequestList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_LogDeliveryConfigurationRequest(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`LogDeliveryConfigurationRequest.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var se_ModifyCacheClusterMessage = (input, context) => {
      const entries = {};
      if (input.CacheClusterId != null) {
        entries["CacheClusterId"] = input.CacheClusterId;
      }
      if (input.NumCacheNodes != null) {
        entries["NumCacheNodes"] = input.NumCacheNodes;
      }
      if (input.CacheNodeIdsToRemove != null) {
        const memberEntries = se_CacheNodeIdsList(input.CacheNodeIdsToRemove, context);
        if (input.CacheNodeIdsToRemove?.length === 0) {
          entries.CacheNodeIdsToRemove = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `CacheNodeIdsToRemove.${key}`;
          entries[loc] = value;
        });
      }
      if (input.AZMode != null) {
        entries["AZMode"] = input.AZMode;
      }
      if (input.NewAvailabilityZones != null) {
        const memberEntries = se_PreferredAvailabilityZoneList(input.NewAvailabilityZones, context);
        if (input.NewAvailabilityZones?.length === 0) {
          entries.NewAvailabilityZones = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `NewAvailabilityZones.${key}`;
          entries[loc] = value;
        });
      }
      if (input.CacheSecurityGroupNames != null) {
        const memberEntries = se_CacheSecurityGroupNameList(input.CacheSecurityGroupNames, context);
        if (input.CacheSecurityGroupNames?.length === 0) {
          entries.CacheSecurityGroupNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `CacheSecurityGroupNames.${key}`;
          entries[loc] = value;
        });
      }
      if (input.SecurityGroupIds != null) {
        const memberEntries = se_SecurityGroupIdsList(input.SecurityGroupIds, context);
        if (input.SecurityGroupIds?.length === 0) {
          entries.SecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `SecurityGroupIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.PreferredMaintenanceWindow != null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
      }
      if (input.NotificationTopicArn != null) {
        entries["NotificationTopicArn"] = input.NotificationTopicArn;
      }
      if (input.CacheParameterGroupName != null) {
        entries["CacheParameterGroupName"] = input.CacheParameterGroupName;
      }
      if (input.NotificationTopicStatus != null) {
        entries["NotificationTopicStatus"] = input.NotificationTopicStatus;
      }
      if (input.ApplyImmediately != null) {
        entries["ApplyImmediately"] = input.ApplyImmediately;
      }
      if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
      }
      if (input.AutoMinorVersionUpgrade != null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
      }
      if (input.SnapshotRetentionLimit != null) {
        entries["SnapshotRetentionLimit"] = input.SnapshotRetentionLimit;
      }
      if (input.SnapshotWindow != null) {
        entries["SnapshotWindow"] = input.SnapshotWindow;
      }
      if (input.CacheNodeType != null) {
        entries["CacheNodeType"] = input.CacheNodeType;
      }
      if (input.AuthToken != null) {
        entries["AuthToken"] = input.AuthToken;
      }
      if (input.AuthTokenUpdateStrategy != null) {
        entries["AuthTokenUpdateStrategy"] = input.AuthTokenUpdateStrategy;
      }
      if (input.LogDeliveryConfigurations != null) {
        const memberEntries = se_LogDeliveryConfigurationRequestList(input.LogDeliveryConfigurations, context);
        if (input.LogDeliveryConfigurations?.length === 0) {
          entries.LogDeliveryConfigurations = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `LogDeliveryConfigurations.${key}`;
          entries[loc] = value;
        });
      }
      if (input.IpDiscovery != null) {
        entries["IpDiscovery"] = input.IpDiscovery;
      }
      return entries;
    };
    var se_ModifyCacheParameterGroupMessage = (input, context) => {
      const entries = {};
      if (input.CacheParameterGroupName != null) {
        entries["CacheParameterGroupName"] = input.CacheParameterGroupName;
      }
      if (input.ParameterNameValues != null) {
        const memberEntries = se_ParameterNameValueList(input.ParameterNameValues, context);
        if (input.ParameterNameValues?.length === 0) {
          entries.ParameterNameValues = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ParameterNameValues.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_ModifyCacheSubnetGroupMessage = (input, context) => {
      const entries = {};
      if (input.CacheSubnetGroupName != null) {
        entries["CacheSubnetGroupName"] = input.CacheSubnetGroupName;
      }
      if (input.CacheSubnetGroupDescription != null) {
        entries["CacheSubnetGroupDescription"] = input.CacheSubnetGroupDescription;
      }
      if (input.SubnetIds != null) {
        const memberEntries = se_SubnetIdentifierList(input.SubnetIds, context);
        if (input.SubnetIds?.length === 0) {
          entries.SubnetIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `SubnetIds.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_ModifyGlobalReplicationGroupMessage = (input, context) => {
      const entries = {};
      if (input.GlobalReplicationGroupId != null) {
        entries["GlobalReplicationGroupId"] = input.GlobalReplicationGroupId;
      }
      if (input.ApplyImmediately != null) {
        entries["ApplyImmediately"] = input.ApplyImmediately;
      }
      if (input.CacheNodeType != null) {
        entries["CacheNodeType"] = input.CacheNodeType;
      }
      if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
      }
      if (input.CacheParameterGroupName != null) {
        entries["CacheParameterGroupName"] = input.CacheParameterGroupName;
      }
      if (input.GlobalReplicationGroupDescription != null) {
        entries["GlobalReplicationGroupDescription"] = input.GlobalReplicationGroupDescription;
      }
      if (input.AutomaticFailoverEnabled != null) {
        entries["AutomaticFailoverEnabled"] = input.AutomaticFailoverEnabled;
      }
      return entries;
    };
    var se_ModifyReplicationGroupMessage = (input, context) => {
      const entries = {};
      if (input.ReplicationGroupId != null) {
        entries["ReplicationGroupId"] = input.ReplicationGroupId;
      }
      if (input.ReplicationGroupDescription != null) {
        entries["ReplicationGroupDescription"] = input.ReplicationGroupDescription;
      }
      if (input.PrimaryClusterId != null) {
        entries["PrimaryClusterId"] = input.PrimaryClusterId;
      }
      if (input.SnapshottingClusterId != null) {
        entries["SnapshottingClusterId"] = input.SnapshottingClusterId;
      }
      if (input.AutomaticFailoverEnabled != null) {
        entries["AutomaticFailoverEnabled"] = input.AutomaticFailoverEnabled;
      }
      if (input.MultiAZEnabled != null) {
        entries["MultiAZEnabled"] = input.MultiAZEnabled;
      }
      if (input.NodeGroupId != null) {
        entries["NodeGroupId"] = input.NodeGroupId;
      }
      if (input.CacheSecurityGroupNames != null) {
        const memberEntries = se_CacheSecurityGroupNameList(input.CacheSecurityGroupNames, context);
        if (input.CacheSecurityGroupNames?.length === 0) {
          entries.CacheSecurityGroupNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `CacheSecurityGroupNames.${key}`;
          entries[loc] = value;
        });
      }
      if (input.SecurityGroupIds != null) {
        const memberEntries = se_SecurityGroupIdsList(input.SecurityGroupIds, context);
        if (input.SecurityGroupIds?.length === 0) {
          entries.SecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `SecurityGroupIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.PreferredMaintenanceWindow != null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
      }
      if (input.NotificationTopicArn != null) {
        entries["NotificationTopicArn"] = input.NotificationTopicArn;
      }
      if (input.CacheParameterGroupName != null) {
        entries["CacheParameterGroupName"] = input.CacheParameterGroupName;
      }
      if (input.NotificationTopicStatus != null) {
        entries["NotificationTopicStatus"] = input.NotificationTopicStatus;
      }
      if (input.ApplyImmediately != null) {
        entries["ApplyImmediately"] = input.ApplyImmediately;
      }
      if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
      }
      if (input.AutoMinorVersionUpgrade != null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
      }
      if (input.SnapshotRetentionLimit != null) {
        entries["SnapshotRetentionLimit"] = input.SnapshotRetentionLimit;
      }
      if (input.SnapshotWindow != null) {
        entries["SnapshotWindow"] = input.SnapshotWindow;
      }
      if (input.CacheNodeType != null) {
        entries["CacheNodeType"] = input.CacheNodeType;
      }
      if (input.AuthToken != null) {
        entries["AuthToken"] = input.AuthToken;
      }
      if (input.AuthTokenUpdateStrategy != null) {
        entries["AuthTokenUpdateStrategy"] = input.AuthTokenUpdateStrategy;
      }
      if (input.UserGroupIdsToAdd != null) {
        const memberEntries = se_UserGroupIdList(input.UserGroupIdsToAdd, context);
        if (input.UserGroupIdsToAdd?.length === 0) {
          entries.UserGroupIdsToAdd = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `UserGroupIdsToAdd.${key}`;
          entries[loc] = value;
        });
      }
      if (input.UserGroupIdsToRemove != null) {
        const memberEntries = se_UserGroupIdList(input.UserGroupIdsToRemove, context);
        if (input.UserGroupIdsToRemove?.length === 0) {
          entries.UserGroupIdsToRemove = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `UserGroupIdsToRemove.${key}`;
          entries[loc] = value;
        });
      }
      if (input.RemoveUserGroups != null) {
        entries["RemoveUserGroups"] = input.RemoveUserGroups;
      }
      if (input.LogDeliveryConfigurations != null) {
        const memberEntries = se_LogDeliveryConfigurationRequestList(input.LogDeliveryConfigurations, context);
        if (input.LogDeliveryConfigurations?.length === 0) {
          entries.LogDeliveryConfigurations = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `LogDeliveryConfigurations.${key}`;
          entries[loc] = value;
        });
      }
      if (input.IpDiscovery != null) {
        entries["IpDiscovery"] = input.IpDiscovery;
      }
      if (input.TransitEncryptionEnabled != null) {
        entries["TransitEncryptionEnabled"] = input.TransitEncryptionEnabled;
      }
      if (input.TransitEncryptionMode != null) {
        entries["TransitEncryptionMode"] = input.TransitEncryptionMode;
      }
      if (input.ClusterMode != null) {
        entries["ClusterMode"] = input.ClusterMode;
      }
      return entries;
    };
    var se_ModifyReplicationGroupShardConfigurationMessage = (input, context) => {
      const entries = {};
      if (input.ReplicationGroupId != null) {
        entries["ReplicationGroupId"] = input.ReplicationGroupId;
      }
      if (input.NodeGroupCount != null) {
        entries["NodeGroupCount"] = input.NodeGroupCount;
      }
      if (input.ApplyImmediately != null) {
        entries["ApplyImmediately"] = input.ApplyImmediately;
      }
      if (input.ReshardingConfiguration != null) {
        const memberEntries = se_ReshardingConfigurationList(input.ReshardingConfiguration, context);
        if (input.ReshardingConfiguration?.length === 0) {
          entries.ReshardingConfiguration = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ReshardingConfiguration.${key}`;
          entries[loc] = value;
        });
      }
      if (input.NodeGroupsToRemove != null) {
        const memberEntries = se_NodeGroupsToRemoveList(input.NodeGroupsToRemove, context);
        if (input.NodeGroupsToRemove?.length === 0) {
          entries.NodeGroupsToRemove = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `NodeGroupsToRemove.${key}`;
          entries[loc] = value;
        });
      }
      if (input.NodeGroupsToRetain != null) {
        const memberEntries = se_NodeGroupsToRetainList(input.NodeGroupsToRetain, context);
        if (input.NodeGroupsToRetain?.length === 0) {
          entries.NodeGroupsToRetain = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `NodeGroupsToRetain.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_ModifyUserGroupMessage = (input, context) => {
      const entries = {};
      if (input.UserGroupId != null) {
        entries["UserGroupId"] = input.UserGroupId;
      }
      if (input.UserIdsToAdd != null) {
        const memberEntries = se_UserIdListInput(input.UserIdsToAdd, context);
        if (input.UserIdsToAdd?.length === 0) {
          entries.UserIdsToAdd = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `UserIdsToAdd.${key}`;
          entries[loc] = value;
        });
      }
      if (input.UserIdsToRemove != null) {
        const memberEntries = se_UserIdListInput(input.UserIdsToRemove, context);
        if (input.UserIdsToRemove?.length === 0) {
          entries.UserIdsToRemove = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `UserIdsToRemove.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_ModifyUserMessage = (input, context) => {
      const entries = {};
      if (input.UserId != null) {
        entries["UserId"] = input.UserId;
      }
      if (input.AccessString != null) {
        entries["AccessString"] = input.AccessString;
      }
      if (input.AppendAccessString != null) {
        entries["AppendAccessString"] = input.AppendAccessString;
      }
      if (input.Passwords != null) {
        const memberEntries = se_PasswordListInput(input.Passwords, context);
        if (input.Passwords?.length === 0) {
          entries.Passwords = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Passwords.${key}`;
          entries[loc] = value;
        });
      }
      if (input.NoPasswordRequired != null) {
        entries["NoPasswordRequired"] = input.NoPasswordRequired;
      }
      if (input.AuthenticationMode != null) {
        const memberEntries = se_AuthenticationMode(input.AuthenticationMode, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `AuthenticationMode.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_NodeGroupConfiguration = (input, context) => {
      const entries = {};
      if (input.NodeGroupId != null) {
        entries["NodeGroupId"] = input.NodeGroupId;
      }
      if (input.Slots != null) {
        entries["Slots"] = input.Slots;
      }
      if (input.ReplicaCount != null) {
        entries["ReplicaCount"] = input.ReplicaCount;
      }
      if (input.PrimaryAvailabilityZone != null) {
        entries["PrimaryAvailabilityZone"] = input.PrimaryAvailabilityZone;
      }
      if (input.ReplicaAvailabilityZones != null) {
        const memberEntries = se_AvailabilityZonesList(input.ReplicaAvailabilityZones, context);
        if (input.ReplicaAvailabilityZones?.length === 0) {
          entries.ReplicaAvailabilityZones = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ReplicaAvailabilityZones.${key}`;
          entries[loc] = value;
        });
      }
      if (input.PrimaryOutpostArn != null) {
        entries["PrimaryOutpostArn"] = input.PrimaryOutpostArn;
      }
      if (input.ReplicaOutpostArns != null) {
        const memberEntries = se_OutpostArnsList(input.ReplicaOutpostArns, context);
        if (input.ReplicaOutpostArns?.length === 0) {
          entries.ReplicaOutpostArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ReplicaOutpostArns.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_NodeGroupConfigurationList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_NodeGroupConfiguration(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`NodeGroupConfiguration.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var se_NodeGroupsToRemoveList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`NodeGroupToRemove.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var se_NodeGroupsToRetainList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`NodeGroupToRetain.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var se_OutpostArnsList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`OutpostArn.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var se_ParameterNameValue = (input, context) => {
      const entries = {};
      if (input.ParameterName != null) {
        entries["ParameterName"] = input.ParameterName;
      }
      if (input.ParameterValue != null) {
        entries["ParameterValue"] = input.ParameterValue;
      }
      return entries;
    };
    var se_ParameterNameValueList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_ParameterNameValue(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`ParameterNameValue.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var se_PasswordListInput = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var se_PreferredAvailabilityZoneList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`PreferredAvailabilityZone.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var se_PreferredOutpostArnList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`PreferredOutpostArn.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var se_PurchaseReservedCacheNodesOfferingMessage = (input, context) => {
      const entries = {};
      if (input.ReservedCacheNodesOfferingId != null) {
        entries["ReservedCacheNodesOfferingId"] = input.ReservedCacheNodesOfferingId;
      }
      if (input.ReservedCacheNodeId != null) {
        entries["ReservedCacheNodeId"] = input.ReservedCacheNodeId;
      }
      if (input.CacheNodeCount != null) {
        entries["CacheNodeCount"] = input.CacheNodeCount;
      }
      if (input.Tags != null) {
        const memberEntries = se_TagList(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_RebalanceSlotsInGlobalReplicationGroupMessage = (input, context) => {
      const entries = {};
      if (input.GlobalReplicationGroupId != null) {
        entries["GlobalReplicationGroupId"] = input.GlobalReplicationGroupId;
      }
      if (input.ApplyImmediately != null) {
        entries["ApplyImmediately"] = input.ApplyImmediately;
      }
      return entries;
    };
    var se_RebootCacheClusterMessage = (input, context) => {
      const entries = {};
      if (input.CacheClusterId != null) {
        entries["CacheClusterId"] = input.CacheClusterId;
      }
      if (input.CacheNodeIdsToReboot != null) {
        const memberEntries = se_CacheNodeIdsList(input.CacheNodeIdsToReboot, context);
        if (input.CacheNodeIdsToReboot?.length === 0) {
          entries.CacheNodeIdsToReboot = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `CacheNodeIdsToReboot.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_RegionalConfiguration = (input, context) => {
      const entries = {};
      if (input.ReplicationGroupId != null) {
        entries["ReplicationGroupId"] = input.ReplicationGroupId;
      }
      if (input.ReplicationGroupRegion != null) {
        entries["ReplicationGroupRegion"] = input.ReplicationGroupRegion;
      }
      if (input.ReshardingConfiguration != null) {
        const memberEntries = se_ReshardingConfigurationList(input.ReshardingConfiguration, context);
        if (input.ReshardingConfiguration?.length === 0) {
          entries.ReshardingConfiguration = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ReshardingConfiguration.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_RegionalConfigurationList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_RegionalConfiguration(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`RegionalConfiguration.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var se_RemoveReplicasList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var se_RemoveTagsFromResourceMessage = (input, context) => {
      const entries = {};
      if (input.ResourceName != null) {
        entries["ResourceName"] = input.ResourceName;
      }
      if (input.TagKeys != null) {
        const memberEntries = se_KeyList(input.TagKeys, context);
        if (input.TagKeys?.length === 0) {
          entries.TagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TagKeys.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_ReplicaConfigurationList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_ConfigureShard(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`ConfigureShard.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var se_ReplicationGroupIdList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var se_ResetCacheParameterGroupMessage = (input, context) => {
      const entries = {};
      if (input.CacheParameterGroupName != null) {
        entries["CacheParameterGroupName"] = input.CacheParameterGroupName;
      }
      if (input.ResetAllParameters != null) {
        entries["ResetAllParameters"] = input.ResetAllParameters;
      }
      if (input.ParameterNameValues != null) {
        const memberEntries = se_ParameterNameValueList(input.ParameterNameValues, context);
        if (input.ParameterNameValues?.length === 0) {
          entries.ParameterNameValues = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ParameterNameValues.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_ReshardingConfiguration = (input, context) => {
      const entries = {};
      if (input.NodeGroupId != null) {
        entries["NodeGroupId"] = input.NodeGroupId;
      }
      if (input.PreferredAvailabilityZones != null) {
        const memberEntries = se_AvailabilityZonesList(input.PreferredAvailabilityZones, context);
        if (input.PreferredAvailabilityZones?.length === 0) {
          entries.PreferredAvailabilityZones = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PreferredAvailabilityZones.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_ReshardingConfigurationList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_ReshardingConfiguration(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`ReshardingConfiguration.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var se_RevokeCacheSecurityGroupIngressMessage = (input, context) => {
      const entries = {};
      if (input.CacheSecurityGroupName != null) {
        entries["CacheSecurityGroupName"] = input.CacheSecurityGroupName;
      }
      if (input.EC2SecurityGroupName != null) {
        entries["EC2SecurityGroupName"] = input.EC2SecurityGroupName;
      }
      if (input.EC2SecurityGroupOwnerId != null) {
        entries["EC2SecurityGroupOwnerId"] = input.EC2SecurityGroupOwnerId;
      }
      return entries;
    };
    var se_SecurityGroupIdsList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`SecurityGroupId.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var se_ServiceUpdateStatusList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var se_SnapshotArnsList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`SnapshotArn.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var se_StartMigrationMessage = (input, context) => {
      const entries = {};
      if (input.ReplicationGroupId != null) {
        entries["ReplicationGroupId"] = input.ReplicationGroupId;
      }
      if (input.CustomerNodeEndpointList != null) {
        const memberEntries = se_CustomerNodeEndpointList(input.CustomerNodeEndpointList, context);
        if (input.CustomerNodeEndpointList?.length === 0) {
          entries.CustomerNodeEndpointList = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `CustomerNodeEndpointList.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_SubnetIdentifierList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`SubnetIdentifier.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var se_Tag = (input, context) => {
      const entries = {};
      if (input.Key != null) {
        entries["Key"] = input.Key;
      }
      if (input.Value != null) {
        entries["Value"] = input.Value;
      }
      return entries;
    };
    var se_TagList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_Tag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`Tag.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var se_TestFailoverMessage = (input, context) => {
      const entries = {};
      if (input.ReplicationGroupId != null) {
        entries["ReplicationGroupId"] = input.ReplicationGroupId;
      }
      if (input.NodeGroupId != null) {
        entries["NodeGroupId"] = input.NodeGroupId;
      }
      return entries;
    };
    var se_TestMigrationMessage = (input, context) => {
      const entries = {};
      if (input.ReplicationGroupId != null) {
        entries["ReplicationGroupId"] = input.ReplicationGroupId;
      }
      if (input.CustomerNodeEndpointList != null) {
        const memberEntries = se_CustomerNodeEndpointList(input.CustomerNodeEndpointList, context);
        if (input.CustomerNodeEndpointList?.length === 0) {
          entries.CustomerNodeEndpointList = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `CustomerNodeEndpointList.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_TimeRangeFilter = (input, context) => {
      const entries = {};
      if (input.StartTime != null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
      }
      if (input.EndTime != null) {
        entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
      }
      return entries;
    };
    var se_UpdateActionStatusList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var se_UserGroupIdList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var se_UserGroupIdListInput = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var se_UserIdListInput = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var de_AllowedNodeTypeModificationsMessage = (output, context) => {
      const contents = {};
      if (output.ScaleUpModifications === "") {
        contents.ScaleUpModifications = [];
      } else if (output["ScaleUpModifications"] !== void 0 && output["ScaleUpModifications"]["member"] !== void 0) {
        contents.ScaleUpModifications = de_NodeTypeList((0, smithy_client_1.getArrayIfSingleItem)(output["ScaleUpModifications"]["member"]), context);
      }
      if (output.ScaleDownModifications === "") {
        contents.ScaleDownModifications = [];
      } else if (output["ScaleDownModifications"] !== void 0 && output["ScaleDownModifications"]["member"] !== void 0) {
        contents.ScaleDownModifications = de_NodeTypeList((0, smithy_client_1.getArrayIfSingleItem)(output["ScaleDownModifications"]["member"]), context);
      }
      return contents;
    };
    var de_APICallRateForCustomerExceededFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_Authentication = (output, context) => {
      const contents = {};
      if (output["Type"] !== void 0) {
        contents.Type = (0, smithy_client_1.expectString)(output["Type"]);
      }
      if (output["PasswordCount"] !== void 0) {
        contents.PasswordCount = (0, smithy_client_1.strictParseInt32)(output["PasswordCount"]);
      }
      return contents;
    };
    var de_AuthorizationAlreadyExistsFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_AuthorizationNotFoundFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_AuthorizeCacheSecurityGroupIngressResult = (output, context) => {
      const contents = {};
      if (output["CacheSecurityGroup"] !== void 0) {
        contents.CacheSecurityGroup = de_CacheSecurityGroup(output["CacheSecurityGroup"], context);
      }
      return contents;
    };
    var de_AvailabilityZone = (output, context) => {
      const contents = {};
      if (output["Name"] !== void 0) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
      }
      return contents;
    };
    var de_AvailabilityZonesList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var de_CacheCluster = (output, context) => {
      const contents = {};
      if (output["CacheClusterId"] !== void 0) {
        contents.CacheClusterId = (0, smithy_client_1.expectString)(output["CacheClusterId"]);
      }
      if (output["ConfigurationEndpoint"] !== void 0) {
        contents.ConfigurationEndpoint = de_Endpoint(output["ConfigurationEndpoint"], context);
      }
      if (output["ClientDownloadLandingPage"] !== void 0) {
        contents.ClientDownloadLandingPage = (0, smithy_client_1.expectString)(output["ClientDownloadLandingPage"]);
      }
      if (output["CacheNodeType"] !== void 0) {
        contents.CacheNodeType = (0, smithy_client_1.expectString)(output["CacheNodeType"]);
      }
      if (output["Engine"] !== void 0) {
        contents.Engine = (0, smithy_client_1.expectString)(output["Engine"]);
      }
      if (output["EngineVersion"] !== void 0) {
        contents.EngineVersion = (0, smithy_client_1.expectString)(output["EngineVersion"]);
      }
      if (output["CacheClusterStatus"] !== void 0) {
        contents.CacheClusterStatus = (0, smithy_client_1.expectString)(output["CacheClusterStatus"]);
      }
      if (output["NumCacheNodes"] !== void 0) {
        contents.NumCacheNodes = (0, smithy_client_1.strictParseInt32)(output["NumCacheNodes"]);
      }
      if (output["PreferredAvailabilityZone"] !== void 0) {
        contents.PreferredAvailabilityZone = (0, smithy_client_1.expectString)(output["PreferredAvailabilityZone"]);
      }
      if (output["PreferredOutpostArn"] !== void 0) {
        contents.PreferredOutpostArn = (0, smithy_client_1.expectString)(output["PreferredOutpostArn"]);
      }
      if (output["CacheClusterCreateTime"] !== void 0) {
        contents.CacheClusterCreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CacheClusterCreateTime"]));
      }
      if (output["PreferredMaintenanceWindow"] !== void 0) {
        contents.PreferredMaintenanceWindow = (0, smithy_client_1.expectString)(output["PreferredMaintenanceWindow"]);
      }
      if (output["PendingModifiedValues"] !== void 0) {
        contents.PendingModifiedValues = de_PendingModifiedValues(output["PendingModifiedValues"], context);
      }
      if (output["NotificationConfiguration"] !== void 0) {
        contents.NotificationConfiguration = de_NotificationConfiguration(output["NotificationConfiguration"], context);
      }
      if (output.CacheSecurityGroups === "") {
        contents.CacheSecurityGroups = [];
      } else if (output["CacheSecurityGroups"] !== void 0 && output["CacheSecurityGroups"]["CacheSecurityGroup"] !== void 0) {
        contents.CacheSecurityGroups = de_CacheSecurityGroupMembershipList((0, smithy_client_1.getArrayIfSingleItem)(output["CacheSecurityGroups"]["CacheSecurityGroup"]), context);
      }
      if (output["CacheParameterGroup"] !== void 0) {
        contents.CacheParameterGroup = de_CacheParameterGroupStatus(output["CacheParameterGroup"], context);
      }
      if (output["CacheSubnetGroupName"] !== void 0) {
        contents.CacheSubnetGroupName = (0, smithy_client_1.expectString)(output["CacheSubnetGroupName"]);
      }
      if (output.CacheNodes === "") {
        contents.CacheNodes = [];
      } else if (output["CacheNodes"] !== void 0 && output["CacheNodes"]["CacheNode"] !== void 0) {
        contents.CacheNodes = de_CacheNodeList((0, smithy_client_1.getArrayIfSingleItem)(output["CacheNodes"]["CacheNode"]), context);
      }
      if (output["AutoMinorVersionUpgrade"] !== void 0) {
        contents.AutoMinorVersionUpgrade = (0, smithy_client_1.parseBoolean)(output["AutoMinorVersionUpgrade"]);
      }
      if (output.SecurityGroups === "") {
        contents.SecurityGroups = [];
      } else if (output["SecurityGroups"] !== void 0 && output["SecurityGroups"]["member"] !== void 0) {
        contents.SecurityGroups = de_SecurityGroupMembershipList((0, smithy_client_1.getArrayIfSingleItem)(output["SecurityGroups"]["member"]), context);
      }
      if (output["ReplicationGroupId"] !== void 0) {
        contents.ReplicationGroupId = (0, smithy_client_1.expectString)(output["ReplicationGroupId"]);
      }
      if (output["SnapshotRetentionLimit"] !== void 0) {
        contents.SnapshotRetentionLimit = (0, smithy_client_1.strictParseInt32)(output["SnapshotRetentionLimit"]);
      }
      if (output["SnapshotWindow"] !== void 0) {
        contents.SnapshotWindow = (0, smithy_client_1.expectString)(output["SnapshotWindow"]);
      }
      if (output["AuthTokenEnabled"] !== void 0) {
        contents.AuthTokenEnabled = (0, smithy_client_1.parseBoolean)(output["AuthTokenEnabled"]);
      }
      if (output["AuthTokenLastModifiedDate"] !== void 0) {
        contents.AuthTokenLastModifiedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["AuthTokenLastModifiedDate"]));
      }
      if (output["TransitEncryptionEnabled"] !== void 0) {
        contents.TransitEncryptionEnabled = (0, smithy_client_1.parseBoolean)(output["TransitEncryptionEnabled"]);
      }
      if (output["AtRestEncryptionEnabled"] !== void 0) {
        contents.AtRestEncryptionEnabled = (0, smithy_client_1.parseBoolean)(output["AtRestEncryptionEnabled"]);
      }
      if (output["ARN"] !== void 0) {
        contents.ARN = (0, smithy_client_1.expectString)(output["ARN"]);
      }
      if (output["ReplicationGroupLogDeliveryEnabled"] !== void 0) {
        contents.ReplicationGroupLogDeliveryEnabled = (0, smithy_client_1.parseBoolean)(output["ReplicationGroupLogDeliveryEnabled"]);
      }
      if (output.LogDeliveryConfigurations === "") {
        contents.LogDeliveryConfigurations = [];
      } else if (output["LogDeliveryConfigurations"] !== void 0 && output["LogDeliveryConfigurations"]["LogDeliveryConfiguration"] !== void 0) {
        contents.LogDeliveryConfigurations = de_LogDeliveryConfigurationList((0, smithy_client_1.getArrayIfSingleItem)(output["LogDeliveryConfigurations"]["LogDeliveryConfiguration"]), context);
      }
      if (output["NetworkType"] !== void 0) {
        contents.NetworkType = (0, smithy_client_1.expectString)(output["NetworkType"]);
      }
      if (output["IpDiscovery"] !== void 0) {
        contents.IpDiscovery = (0, smithy_client_1.expectString)(output["IpDiscovery"]);
      }
      if (output["TransitEncryptionMode"] !== void 0) {
        contents.TransitEncryptionMode = (0, smithy_client_1.expectString)(output["TransitEncryptionMode"]);
      }
      return contents;
    };
    var de_CacheClusterAlreadyExistsFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_CacheClusterList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_CacheCluster(entry, context);
      });
    };
    var de_CacheClusterMessage = (output, context) => {
      const contents = {};
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.CacheClusters === "") {
        contents.CacheClusters = [];
      } else if (output["CacheClusters"] !== void 0 && output["CacheClusters"]["CacheCluster"] !== void 0) {
        contents.CacheClusters = de_CacheClusterList((0, smithy_client_1.getArrayIfSingleItem)(output["CacheClusters"]["CacheCluster"]), context);
      }
      return contents;
    };
    var de_CacheClusterNotFoundFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_CacheEngineVersion = (output, context) => {
      const contents = {};
      if (output["Engine"] !== void 0) {
        contents.Engine = (0, smithy_client_1.expectString)(output["Engine"]);
      }
      if (output["EngineVersion"] !== void 0) {
        contents.EngineVersion = (0, smithy_client_1.expectString)(output["EngineVersion"]);
      }
      if (output["CacheParameterGroupFamily"] !== void 0) {
        contents.CacheParameterGroupFamily = (0, smithy_client_1.expectString)(output["CacheParameterGroupFamily"]);
      }
      if (output["CacheEngineDescription"] !== void 0) {
        contents.CacheEngineDescription = (0, smithy_client_1.expectString)(output["CacheEngineDescription"]);
      }
      if (output["CacheEngineVersionDescription"] !== void 0) {
        contents.CacheEngineVersionDescription = (0, smithy_client_1.expectString)(output["CacheEngineVersionDescription"]);
      }
      return contents;
    };
    var de_CacheEngineVersionList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_CacheEngineVersion(entry, context);
      });
    };
    var de_CacheEngineVersionMessage = (output, context) => {
      const contents = {};
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.CacheEngineVersions === "") {
        contents.CacheEngineVersions = [];
      } else if (output["CacheEngineVersions"] !== void 0 && output["CacheEngineVersions"]["CacheEngineVersion"] !== void 0) {
        contents.CacheEngineVersions = de_CacheEngineVersionList((0, smithy_client_1.getArrayIfSingleItem)(output["CacheEngineVersions"]["CacheEngineVersion"]), context);
      }
      return contents;
    };
    var de_CacheNode = (output, context) => {
      const contents = {};
      if (output["CacheNodeId"] !== void 0) {
        contents.CacheNodeId = (0, smithy_client_1.expectString)(output["CacheNodeId"]);
      }
      if (output["CacheNodeStatus"] !== void 0) {
        contents.CacheNodeStatus = (0, smithy_client_1.expectString)(output["CacheNodeStatus"]);
      }
      if (output["CacheNodeCreateTime"] !== void 0) {
        contents.CacheNodeCreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CacheNodeCreateTime"]));
      }
      if (output["Endpoint"] !== void 0) {
        contents.Endpoint = de_Endpoint(output["Endpoint"], context);
      }
      if (output["ParameterGroupStatus"] !== void 0) {
        contents.ParameterGroupStatus = (0, smithy_client_1.expectString)(output["ParameterGroupStatus"]);
      }
      if (output["SourceCacheNodeId"] !== void 0) {
        contents.SourceCacheNodeId = (0, smithy_client_1.expectString)(output["SourceCacheNodeId"]);
      }
      if (output["CustomerAvailabilityZone"] !== void 0) {
        contents.CustomerAvailabilityZone = (0, smithy_client_1.expectString)(output["CustomerAvailabilityZone"]);
      }
      if (output["CustomerOutpostArn"] !== void 0) {
        contents.CustomerOutpostArn = (0, smithy_client_1.expectString)(output["CustomerOutpostArn"]);
      }
      return contents;
    };
    var de_CacheNodeIdsList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var de_CacheNodeList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_CacheNode(entry, context);
      });
    };
    var de_CacheNodeTypeSpecificParameter = (output, context) => {
      const contents = {};
      if (output["ParameterName"] !== void 0) {
        contents.ParameterName = (0, smithy_client_1.expectString)(output["ParameterName"]);
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      if (output["Source"] !== void 0) {
        contents.Source = (0, smithy_client_1.expectString)(output["Source"]);
      }
      if (output["DataType"] !== void 0) {
        contents.DataType = (0, smithy_client_1.expectString)(output["DataType"]);
      }
      if (output["AllowedValues"] !== void 0) {
        contents.AllowedValues = (0, smithy_client_1.expectString)(output["AllowedValues"]);
      }
      if (output["IsModifiable"] !== void 0) {
        contents.IsModifiable = (0, smithy_client_1.parseBoolean)(output["IsModifiable"]);
      }
      if (output["MinimumEngineVersion"] !== void 0) {
        contents.MinimumEngineVersion = (0, smithy_client_1.expectString)(output["MinimumEngineVersion"]);
      }
      if (output.CacheNodeTypeSpecificValues === "") {
        contents.CacheNodeTypeSpecificValues = [];
      } else if (output["CacheNodeTypeSpecificValues"] !== void 0 && output["CacheNodeTypeSpecificValues"]["CacheNodeTypeSpecificValue"] !== void 0) {
        contents.CacheNodeTypeSpecificValues = de_CacheNodeTypeSpecificValueList((0, smithy_client_1.getArrayIfSingleItem)(output["CacheNodeTypeSpecificValues"]["CacheNodeTypeSpecificValue"]), context);
      }
      if (output["ChangeType"] !== void 0) {
        contents.ChangeType = (0, smithy_client_1.expectString)(output["ChangeType"]);
      }
      return contents;
    };
    var de_CacheNodeTypeSpecificParametersList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_CacheNodeTypeSpecificParameter(entry, context);
      });
    };
    var de_CacheNodeTypeSpecificValue = (output, context) => {
      const contents = {};
      if (output["CacheNodeType"] !== void 0) {
        contents.CacheNodeType = (0, smithy_client_1.expectString)(output["CacheNodeType"]);
      }
      if (output["Value"] !== void 0) {
        contents.Value = (0, smithy_client_1.expectString)(output["Value"]);
      }
      return contents;
    };
    var de_CacheNodeTypeSpecificValueList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_CacheNodeTypeSpecificValue(entry, context);
      });
    };
    var de_CacheNodeUpdateStatus = (output, context) => {
      const contents = {};
      if (output["CacheNodeId"] !== void 0) {
        contents.CacheNodeId = (0, smithy_client_1.expectString)(output["CacheNodeId"]);
      }
      if (output["NodeUpdateStatus"] !== void 0) {
        contents.NodeUpdateStatus = (0, smithy_client_1.expectString)(output["NodeUpdateStatus"]);
      }
      if (output["NodeDeletionDate"] !== void 0) {
        contents.NodeDeletionDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["NodeDeletionDate"]));
      }
      if (output["NodeUpdateStartDate"] !== void 0) {
        contents.NodeUpdateStartDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["NodeUpdateStartDate"]));
      }
      if (output["NodeUpdateEndDate"] !== void 0) {
        contents.NodeUpdateEndDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["NodeUpdateEndDate"]));
      }
      if (output["NodeUpdateInitiatedBy"] !== void 0) {
        contents.NodeUpdateInitiatedBy = (0, smithy_client_1.expectString)(output["NodeUpdateInitiatedBy"]);
      }
      if (output["NodeUpdateInitiatedDate"] !== void 0) {
        contents.NodeUpdateInitiatedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["NodeUpdateInitiatedDate"]));
      }
      if (output["NodeUpdateStatusModifiedDate"] !== void 0) {
        contents.NodeUpdateStatusModifiedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["NodeUpdateStatusModifiedDate"]));
      }
      return contents;
    };
    var de_CacheNodeUpdateStatusList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_CacheNodeUpdateStatus(entry, context);
      });
    };
    var de_CacheParameterGroup = (output, context) => {
      const contents = {};
      if (output["CacheParameterGroupName"] !== void 0) {
        contents.CacheParameterGroupName = (0, smithy_client_1.expectString)(output["CacheParameterGroupName"]);
      }
      if (output["CacheParameterGroupFamily"] !== void 0) {
        contents.CacheParameterGroupFamily = (0, smithy_client_1.expectString)(output["CacheParameterGroupFamily"]);
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      if (output["IsGlobal"] !== void 0) {
        contents.IsGlobal = (0, smithy_client_1.parseBoolean)(output["IsGlobal"]);
      }
      if (output["ARN"] !== void 0) {
        contents.ARN = (0, smithy_client_1.expectString)(output["ARN"]);
      }
      return contents;
    };
    var de_CacheParameterGroupAlreadyExistsFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_CacheParameterGroupDetails = (output, context) => {
      const contents = {};
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.Parameters === "") {
        contents.Parameters = [];
      } else if (output["Parameters"] !== void 0 && output["Parameters"]["Parameter"] !== void 0) {
        contents.Parameters = de_ParametersList((0, smithy_client_1.getArrayIfSingleItem)(output["Parameters"]["Parameter"]), context);
      }
      if (output.CacheNodeTypeSpecificParameters === "") {
        contents.CacheNodeTypeSpecificParameters = [];
      } else if (output["CacheNodeTypeSpecificParameters"] !== void 0 && output["CacheNodeTypeSpecificParameters"]["CacheNodeTypeSpecificParameter"] !== void 0) {
        contents.CacheNodeTypeSpecificParameters = de_CacheNodeTypeSpecificParametersList((0, smithy_client_1.getArrayIfSingleItem)(output["CacheNodeTypeSpecificParameters"]["CacheNodeTypeSpecificParameter"]), context);
      }
      return contents;
    };
    var de_CacheParameterGroupList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_CacheParameterGroup(entry, context);
      });
    };
    var de_CacheParameterGroupNameMessage = (output, context) => {
      const contents = {};
      if (output["CacheParameterGroupName"] !== void 0) {
        contents.CacheParameterGroupName = (0, smithy_client_1.expectString)(output["CacheParameterGroupName"]);
      }
      return contents;
    };
    var de_CacheParameterGroupNotFoundFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_CacheParameterGroupQuotaExceededFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_CacheParameterGroupsMessage = (output, context) => {
      const contents = {};
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.CacheParameterGroups === "") {
        contents.CacheParameterGroups = [];
      } else if (output["CacheParameterGroups"] !== void 0 && output["CacheParameterGroups"]["CacheParameterGroup"] !== void 0) {
        contents.CacheParameterGroups = de_CacheParameterGroupList((0, smithy_client_1.getArrayIfSingleItem)(output["CacheParameterGroups"]["CacheParameterGroup"]), context);
      }
      return contents;
    };
    var de_CacheParameterGroupStatus = (output, context) => {
      const contents = {};
      if (output["CacheParameterGroupName"] !== void 0) {
        contents.CacheParameterGroupName = (0, smithy_client_1.expectString)(output["CacheParameterGroupName"]);
      }
      if (output["ParameterApplyStatus"] !== void 0) {
        contents.ParameterApplyStatus = (0, smithy_client_1.expectString)(output["ParameterApplyStatus"]);
      }
      if (output.CacheNodeIdsToReboot === "") {
        contents.CacheNodeIdsToReboot = [];
      } else if (output["CacheNodeIdsToReboot"] !== void 0 && output["CacheNodeIdsToReboot"]["CacheNodeId"] !== void 0) {
        contents.CacheNodeIdsToReboot = de_CacheNodeIdsList((0, smithy_client_1.getArrayIfSingleItem)(output["CacheNodeIdsToReboot"]["CacheNodeId"]), context);
      }
      return contents;
    };
    var de_CacheSecurityGroup = (output, context) => {
      const contents = {};
      if (output["OwnerId"] !== void 0) {
        contents.OwnerId = (0, smithy_client_1.expectString)(output["OwnerId"]);
      }
      if (output["CacheSecurityGroupName"] !== void 0) {
        contents.CacheSecurityGroupName = (0, smithy_client_1.expectString)(output["CacheSecurityGroupName"]);
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      if (output.EC2SecurityGroups === "") {
        contents.EC2SecurityGroups = [];
      } else if (output["EC2SecurityGroups"] !== void 0 && output["EC2SecurityGroups"]["EC2SecurityGroup"] !== void 0) {
        contents.EC2SecurityGroups = de_EC2SecurityGroupList((0, smithy_client_1.getArrayIfSingleItem)(output["EC2SecurityGroups"]["EC2SecurityGroup"]), context);
      }
      if (output["ARN"] !== void 0) {
        contents.ARN = (0, smithy_client_1.expectString)(output["ARN"]);
      }
      return contents;
    };
    var de_CacheSecurityGroupAlreadyExistsFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_CacheSecurityGroupMembership = (output, context) => {
      const contents = {};
      if (output["CacheSecurityGroupName"] !== void 0) {
        contents.CacheSecurityGroupName = (0, smithy_client_1.expectString)(output["CacheSecurityGroupName"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      return contents;
    };
    var de_CacheSecurityGroupMembershipList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_CacheSecurityGroupMembership(entry, context);
      });
    };
    var de_CacheSecurityGroupMessage = (output, context) => {
      const contents = {};
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.CacheSecurityGroups === "") {
        contents.CacheSecurityGroups = [];
      } else if (output["CacheSecurityGroups"] !== void 0 && output["CacheSecurityGroups"]["CacheSecurityGroup"] !== void 0) {
        contents.CacheSecurityGroups = de_CacheSecurityGroups((0, smithy_client_1.getArrayIfSingleItem)(output["CacheSecurityGroups"]["CacheSecurityGroup"]), context);
      }
      return contents;
    };
    var de_CacheSecurityGroupNotFoundFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_CacheSecurityGroupQuotaExceededFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_CacheSecurityGroups = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_CacheSecurityGroup(entry, context);
      });
    };
    var de_CacheSubnetGroup = (output, context) => {
      const contents = {};
      if (output["CacheSubnetGroupName"] !== void 0) {
        contents.CacheSubnetGroupName = (0, smithy_client_1.expectString)(output["CacheSubnetGroupName"]);
      }
      if (output["CacheSubnetGroupDescription"] !== void 0) {
        contents.CacheSubnetGroupDescription = (0, smithy_client_1.expectString)(output["CacheSubnetGroupDescription"]);
      }
      if (output["VpcId"] !== void 0) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["VpcId"]);
      }
      if (output.Subnets === "") {
        contents.Subnets = [];
      } else if (output["Subnets"] !== void 0 && output["Subnets"]["Subnet"] !== void 0) {
        contents.Subnets = de_SubnetList((0, smithy_client_1.getArrayIfSingleItem)(output["Subnets"]["Subnet"]), context);
      }
      if (output["ARN"] !== void 0) {
        contents.ARN = (0, smithy_client_1.expectString)(output["ARN"]);
      }
      if (output.SupportedNetworkTypes === "") {
        contents.SupportedNetworkTypes = [];
      } else if (output["SupportedNetworkTypes"] !== void 0 && output["SupportedNetworkTypes"]["member"] !== void 0) {
        contents.SupportedNetworkTypes = de_NetworkTypeList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedNetworkTypes"]["member"]), context);
      }
      return contents;
    };
    var de_CacheSubnetGroupAlreadyExistsFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_CacheSubnetGroupInUse = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_CacheSubnetGroupMessage = (output, context) => {
      const contents = {};
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.CacheSubnetGroups === "") {
        contents.CacheSubnetGroups = [];
      } else if (output["CacheSubnetGroups"] !== void 0 && output["CacheSubnetGroups"]["CacheSubnetGroup"] !== void 0) {
        contents.CacheSubnetGroups = de_CacheSubnetGroups((0, smithy_client_1.getArrayIfSingleItem)(output["CacheSubnetGroups"]["CacheSubnetGroup"]), context);
      }
      return contents;
    };
    var de_CacheSubnetGroupNotFoundFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_CacheSubnetGroupQuotaExceededFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_CacheSubnetGroups = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_CacheSubnetGroup(entry, context);
      });
    };
    var de_CacheSubnetQuotaExceededFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_CloudWatchLogsDestinationDetails = (output, context) => {
      const contents = {};
      if (output["LogGroup"] !== void 0) {
        contents.LogGroup = (0, smithy_client_1.expectString)(output["LogGroup"]);
      }
      return contents;
    };
    var de_ClusterIdList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var de_ClusterQuotaForCustomerExceededFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_CompleteMigrationResponse = (output, context) => {
      const contents = {};
      if (output["ReplicationGroup"] !== void 0) {
        contents.ReplicationGroup = de_ReplicationGroup(output["ReplicationGroup"], context);
      }
      return contents;
    };
    var de_CopySnapshotResult = (output, context) => {
      const contents = {};
      if (output["Snapshot"] !== void 0) {
        contents.Snapshot = de_Snapshot(output["Snapshot"], context);
      }
      return contents;
    };
    var de_CreateCacheClusterResult = (output, context) => {
      const contents = {};
      if (output["CacheCluster"] !== void 0) {
        contents.CacheCluster = de_CacheCluster(output["CacheCluster"], context);
      }
      return contents;
    };
    var de_CreateCacheParameterGroupResult = (output, context) => {
      const contents = {};
      if (output["CacheParameterGroup"] !== void 0) {
        contents.CacheParameterGroup = de_CacheParameterGroup(output["CacheParameterGroup"], context);
      }
      return contents;
    };
    var de_CreateCacheSecurityGroupResult = (output, context) => {
      const contents = {};
      if (output["CacheSecurityGroup"] !== void 0) {
        contents.CacheSecurityGroup = de_CacheSecurityGroup(output["CacheSecurityGroup"], context);
      }
      return contents;
    };
    var de_CreateCacheSubnetGroupResult = (output, context) => {
      const contents = {};
      if (output["CacheSubnetGroup"] !== void 0) {
        contents.CacheSubnetGroup = de_CacheSubnetGroup(output["CacheSubnetGroup"], context);
      }
      return contents;
    };
    var de_CreateGlobalReplicationGroupResult = (output, context) => {
      const contents = {};
      if (output["GlobalReplicationGroup"] !== void 0) {
        contents.GlobalReplicationGroup = de_GlobalReplicationGroup(output["GlobalReplicationGroup"], context);
      }
      return contents;
    };
    var de_CreateReplicationGroupResult = (output, context) => {
      const contents = {};
      if (output["ReplicationGroup"] !== void 0) {
        contents.ReplicationGroup = de_ReplicationGroup(output["ReplicationGroup"], context);
      }
      return contents;
    };
    var de_CreateSnapshotResult = (output, context) => {
      const contents = {};
      if (output["Snapshot"] !== void 0) {
        contents.Snapshot = de_Snapshot(output["Snapshot"], context);
      }
      return contents;
    };
    var de_DecreaseNodeGroupsInGlobalReplicationGroupResult = (output, context) => {
      const contents = {};
      if (output["GlobalReplicationGroup"] !== void 0) {
        contents.GlobalReplicationGroup = de_GlobalReplicationGroup(output["GlobalReplicationGroup"], context);
      }
      return contents;
    };
    var de_DecreaseReplicaCountResult = (output, context) => {
      const contents = {};
      if (output["ReplicationGroup"] !== void 0) {
        contents.ReplicationGroup = de_ReplicationGroup(output["ReplicationGroup"], context);
      }
      return contents;
    };
    var de_DefaultUserAssociatedToUserGroupFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_DefaultUserRequired = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_DeleteCacheClusterResult = (output, context) => {
      const contents = {};
      if (output["CacheCluster"] !== void 0) {
        contents.CacheCluster = de_CacheCluster(output["CacheCluster"], context);
      }
      return contents;
    };
    var de_DeleteGlobalReplicationGroupResult = (output, context) => {
      const contents = {};
      if (output["GlobalReplicationGroup"] !== void 0) {
        contents.GlobalReplicationGroup = de_GlobalReplicationGroup(output["GlobalReplicationGroup"], context);
      }
      return contents;
    };
    var de_DeleteReplicationGroupResult = (output, context) => {
      const contents = {};
      if (output["ReplicationGroup"] !== void 0) {
        contents.ReplicationGroup = de_ReplicationGroup(output["ReplicationGroup"], context);
      }
      return contents;
    };
    var de_DeleteSnapshotResult = (output, context) => {
      const contents = {};
      if (output["Snapshot"] !== void 0) {
        contents.Snapshot = de_Snapshot(output["Snapshot"], context);
      }
      return contents;
    };
    var de_DescribeEngineDefaultParametersResult = (output, context) => {
      const contents = {};
      if (output["EngineDefaults"] !== void 0) {
        contents.EngineDefaults = de_EngineDefaults(output["EngineDefaults"], context);
      }
      return contents;
    };
    var de_DescribeGlobalReplicationGroupsResult = (output, context) => {
      const contents = {};
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.GlobalReplicationGroups === "") {
        contents.GlobalReplicationGroups = [];
      } else if (output["GlobalReplicationGroups"] !== void 0 && output["GlobalReplicationGroups"]["GlobalReplicationGroup"] !== void 0) {
        contents.GlobalReplicationGroups = de_GlobalReplicationGroupList((0, smithy_client_1.getArrayIfSingleItem)(output["GlobalReplicationGroups"]["GlobalReplicationGroup"]), context);
      }
      return contents;
    };
    var de_DescribeSnapshotsListMessage = (output, context) => {
      const contents = {};
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.Snapshots === "") {
        contents.Snapshots = [];
      } else if (output["Snapshots"] !== void 0 && output["Snapshots"]["Snapshot"] !== void 0) {
        contents.Snapshots = de_SnapshotList((0, smithy_client_1.getArrayIfSingleItem)(output["Snapshots"]["Snapshot"]), context);
      }
      return contents;
    };
    var de_DescribeUserGroupsResult = (output, context) => {
      const contents = {};
      if (output.UserGroups === "") {
        contents.UserGroups = [];
      } else if (output["UserGroups"] !== void 0 && output["UserGroups"]["member"] !== void 0) {
        contents.UserGroups = de_UserGroupList((0, smithy_client_1.getArrayIfSingleItem)(output["UserGroups"]["member"]), context);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var de_DescribeUsersResult = (output, context) => {
      const contents = {};
      if (output.Users === "") {
        contents.Users = [];
      } else if (output["Users"] !== void 0 && output["Users"]["member"] !== void 0) {
        contents.Users = de_UserList((0, smithy_client_1.getArrayIfSingleItem)(output["Users"]["member"]), context);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var de_DestinationDetails = (output, context) => {
      const contents = {};
      if (output["CloudWatchLogsDetails"] !== void 0) {
        contents.CloudWatchLogsDetails = de_CloudWatchLogsDestinationDetails(output["CloudWatchLogsDetails"], context);
      }
      if (output["KinesisFirehoseDetails"] !== void 0) {
        contents.KinesisFirehoseDetails = de_KinesisFirehoseDestinationDetails(output["KinesisFirehoseDetails"], context);
      }
      return contents;
    };
    var de_DisassociateGlobalReplicationGroupResult = (output, context) => {
      const contents = {};
      if (output["GlobalReplicationGroup"] !== void 0) {
        contents.GlobalReplicationGroup = de_GlobalReplicationGroup(output["GlobalReplicationGroup"], context);
      }
      return contents;
    };
    var de_DuplicateUserNameFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_EC2SecurityGroup = (output, context) => {
      const contents = {};
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["EC2SecurityGroupName"] !== void 0) {
        contents.EC2SecurityGroupName = (0, smithy_client_1.expectString)(output["EC2SecurityGroupName"]);
      }
      if (output["EC2SecurityGroupOwnerId"] !== void 0) {
        contents.EC2SecurityGroupOwnerId = (0, smithy_client_1.expectString)(output["EC2SecurityGroupOwnerId"]);
      }
      return contents;
    };
    var de_EC2SecurityGroupList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_EC2SecurityGroup(entry, context);
      });
    };
    var de_Endpoint = (output, context) => {
      const contents = {};
      if (output["Address"] !== void 0) {
        contents.Address = (0, smithy_client_1.expectString)(output["Address"]);
      }
      if (output["Port"] !== void 0) {
        contents.Port = (0, smithy_client_1.strictParseInt32)(output["Port"]);
      }
      return contents;
    };
    var de_EngineDefaults = (output, context) => {
      const contents = {};
      if (output["CacheParameterGroupFamily"] !== void 0) {
        contents.CacheParameterGroupFamily = (0, smithy_client_1.expectString)(output["CacheParameterGroupFamily"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.Parameters === "") {
        contents.Parameters = [];
      } else if (output["Parameters"] !== void 0 && output["Parameters"]["Parameter"] !== void 0) {
        contents.Parameters = de_ParametersList((0, smithy_client_1.getArrayIfSingleItem)(output["Parameters"]["Parameter"]), context);
      }
      if (output.CacheNodeTypeSpecificParameters === "") {
        contents.CacheNodeTypeSpecificParameters = [];
      } else if (output["CacheNodeTypeSpecificParameters"] !== void 0 && output["CacheNodeTypeSpecificParameters"]["CacheNodeTypeSpecificParameter"] !== void 0) {
        contents.CacheNodeTypeSpecificParameters = de_CacheNodeTypeSpecificParametersList((0, smithy_client_1.getArrayIfSingleItem)(output["CacheNodeTypeSpecificParameters"]["CacheNodeTypeSpecificParameter"]), context);
      }
      return contents;
    };
    var de_Event = (output, context) => {
      const contents = {};
      if (output["SourceIdentifier"] !== void 0) {
        contents.SourceIdentifier = (0, smithy_client_1.expectString)(output["SourceIdentifier"]);
      }
      if (output["SourceType"] !== void 0) {
        contents.SourceType = (0, smithy_client_1.expectString)(output["SourceType"]);
      }
      if (output["Message"] !== void 0) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
      }
      if (output["Date"] !== void 0) {
        contents.Date = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["Date"]));
      }
      return contents;
    };
    var de_EventList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_Event(entry, context);
      });
    };
    var de_EventsMessage = (output, context) => {
      const contents = {};
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.Events === "") {
        contents.Events = [];
      } else if (output["Events"] !== void 0 && output["Events"]["Event"] !== void 0) {
        contents.Events = de_EventList((0, smithy_client_1.getArrayIfSingleItem)(output["Events"]["Event"]), context);
      }
      return contents;
    };
    var de_FailoverGlobalReplicationGroupResult = (output, context) => {
      const contents = {};
      if (output["GlobalReplicationGroup"] !== void 0) {
        contents.GlobalReplicationGroup = de_GlobalReplicationGroup(output["GlobalReplicationGroup"], context);
      }
      return contents;
    };
    var de_GlobalNodeGroup = (output, context) => {
      const contents = {};
      if (output["GlobalNodeGroupId"] !== void 0) {
        contents.GlobalNodeGroupId = (0, smithy_client_1.expectString)(output["GlobalNodeGroupId"]);
      }
      if (output["Slots"] !== void 0) {
        contents.Slots = (0, smithy_client_1.expectString)(output["Slots"]);
      }
      return contents;
    };
    var de_GlobalNodeGroupList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_GlobalNodeGroup(entry, context);
      });
    };
    var de_GlobalReplicationGroup = (output, context) => {
      const contents = {};
      if (output["GlobalReplicationGroupId"] !== void 0) {
        contents.GlobalReplicationGroupId = (0, smithy_client_1.expectString)(output["GlobalReplicationGroupId"]);
      }
      if (output["GlobalReplicationGroupDescription"] !== void 0) {
        contents.GlobalReplicationGroupDescription = (0, smithy_client_1.expectString)(output["GlobalReplicationGroupDescription"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["CacheNodeType"] !== void 0) {
        contents.CacheNodeType = (0, smithy_client_1.expectString)(output["CacheNodeType"]);
      }
      if (output["Engine"] !== void 0) {
        contents.Engine = (0, smithy_client_1.expectString)(output["Engine"]);
      }
      if (output["EngineVersion"] !== void 0) {
        contents.EngineVersion = (0, smithy_client_1.expectString)(output["EngineVersion"]);
      }
      if (output.Members === "") {
        contents.Members = [];
      } else if (output["Members"] !== void 0 && output["Members"]["GlobalReplicationGroupMember"] !== void 0) {
        contents.Members = de_GlobalReplicationGroupMemberList((0, smithy_client_1.getArrayIfSingleItem)(output["Members"]["GlobalReplicationGroupMember"]), context);
      }
      if (output["ClusterEnabled"] !== void 0) {
        contents.ClusterEnabled = (0, smithy_client_1.parseBoolean)(output["ClusterEnabled"]);
      }
      if (output.GlobalNodeGroups === "") {
        contents.GlobalNodeGroups = [];
      } else if (output["GlobalNodeGroups"] !== void 0 && output["GlobalNodeGroups"]["GlobalNodeGroup"] !== void 0) {
        contents.GlobalNodeGroups = de_GlobalNodeGroupList((0, smithy_client_1.getArrayIfSingleItem)(output["GlobalNodeGroups"]["GlobalNodeGroup"]), context);
      }
      if (output["AuthTokenEnabled"] !== void 0) {
        contents.AuthTokenEnabled = (0, smithy_client_1.parseBoolean)(output["AuthTokenEnabled"]);
      }
      if (output["TransitEncryptionEnabled"] !== void 0) {
        contents.TransitEncryptionEnabled = (0, smithy_client_1.parseBoolean)(output["TransitEncryptionEnabled"]);
      }
      if (output["AtRestEncryptionEnabled"] !== void 0) {
        contents.AtRestEncryptionEnabled = (0, smithy_client_1.parseBoolean)(output["AtRestEncryptionEnabled"]);
      }
      if (output["ARN"] !== void 0) {
        contents.ARN = (0, smithy_client_1.expectString)(output["ARN"]);
      }
      return contents;
    };
    var de_GlobalReplicationGroupAlreadyExistsFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_GlobalReplicationGroupInfo = (output, context) => {
      const contents = {};
      if (output["GlobalReplicationGroupId"] !== void 0) {
        contents.GlobalReplicationGroupId = (0, smithy_client_1.expectString)(output["GlobalReplicationGroupId"]);
      }
      if (output["GlobalReplicationGroupMemberRole"] !== void 0) {
        contents.GlobalReplicationGroupMemberRole = (0, smithy_client_1.expectString)(output["GlobalReplicationGroupMemberRole"]);
      }
      return contents;
    };
    var de_GlobalReplicationGroupList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_GlobalReplicationGroup(entry, context);
      });
    };
    var de_GlobalReplicationGroupMember = (output, context) => {
      const contents = {};
      if (output["ReplicationGroupId"] !== void 0) {
        contents.ReplicationGroupId = (0, smithy_client_1.expectString)(output["ReplicationGroupId"]);
      }
      if (output["ReplicationGroupRegion"] !== void 0) {
        contents.ReplicationGroupRegion = (0, smithy_client_1.expectString)(output["ReplicationGroupRegion"]);
      }
      if (output["Role"] !== void 0) {
        contents.Role = (0, smithy_client_1.expectString)(output["Role"]);
      }
      if (output["AutomaticFailover"] !== void 0) {
        contents.AutomaticFailover = (0, smithy_client_1.expectString)(output["AutomaticFailover"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      return contents;
    };
    var de_GlobalReplicationGroupMemberList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_GlobalReplicationGroupMember(entry, context);
      });
    };
    var de_GlobalReplicationGroupNotFoundFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_IncreaseNodeGroupsInGlobalReplicationGroupResult = (output, context) => {
      const contents = {};
      if (output["GlobalReplicationGroup"] !== void 0) {
        contents.GlobalReplicationGroup = de_GlobalReplicationGroup(output["GlobalReplicationGroup"], context);
      }
      return contents;
    };
    var de_IncreaseReplicaCountResult = (output, context) => {
      const contents = {};
      if (output["ReplicationGroup"] !== void 0) {
        contents.ReplicationGroup = de_ReplicationGroup(output["ReplicationGroup"], context);
      }
      return contents;
    };
    var de_InsufficientCacheClusterCapacityFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_InvalidARNFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_InvalidCacheClusterStateFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_InvalidCacheParameterGroupStateFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_InvalidCacheSecurityGroupStateFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_InvalidGlobalReplicationGroupStateFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_InvalidKMSKeyFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_InvalidParameterCombinationException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_InvalidParameterValueException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_InvalidReplicationGroupStateFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_InvalidSnapshotStateFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_InvalidSubnet = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_InvalidUserGroupStateFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_InvalidUserStateFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_InvalidVPCNetworkStateFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_KinesisFirehoseDestinationDetails = (output, context) => {
      const contents = {};
      if (output["DeliveryStream"] !== void 0) {
        contents.DeliveryStream = (0, smithy_client_1.expectString)(output["DeliveryStream"]);
      }
      return contents;
    };
    var de_LogDeliveryConfiguration = (output, context) => {
      const contents = {};
      if (output["LogType"] !== void 0) {
        contents.LogType = (0, smithy_client_1.expectString)(output["LogType"]);
      }
      if (output["DestinationType"] !== void 0) {
        contents.DestinationType = (0, smithy_client_1.expectString)(output["DestinationType"]);
      }
      if (output["DestinationDetails"] !== void 0) {
        contents.DestinationDetails = de_DestinationDetails(output["DestinationDetails"], context);
      }
      if (output["LogFormat"] !== void 0) {
        contents.LogFormat = (0, smithy_client_1.expectString)(output["LogFormat"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["Message"] !== void 0) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
      }
      return contents;
    };
    var de_LogDeliveryConfigurationList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_LogDeliveryConfiguration(entry, context);
      });
    };
    var de_ModifyCacheClusterResult = (output, context) => {
      const contents = {};
      if (output["CacheCluster"] !== void 0) {
        contents.CacheCluster = de_CacheCluster(output["CacheCluster"], context);
      }
      return contents;
    };
    var de_ModifyCacheSubnetGroupResult = (output, context) => {
      const contents = {};
      if (output["CacheSubnetGroup"] !== void 0) {
        contents.CacheSubnetGroup = de_CacheSubnetGroup(output["CacheSubnetGroup"], context);
      }
      return contents;
    };
    var de_ModifyGlobalReplicationGroupResult = (output, context) => {
      const contents = {};
      if (output["GlobalReplicationGroup"] !== void 0) {
        contents.GlobalReplicationGroup = de_GlobalReplicationGroup(output["GlobalReplicationGroup"], context);
      }
      return contents;
    };
    var de_ModifyReplicationGroupResult = (output, context) => {
      const contents = {};
      if (output["ReplicationGroup"] !== void 0) {
        contents.ReplicationGroup = de_ReplicationGroup(output["ReplicationGroup"], context);
      }
      return contents;
    };
    var de_ModifyReplicationGroupShardConfigurationResult = (output, context) => {
      const contents = {};
      if (output["ReplicationGroup"] !== void 0) {
        contents.ReplicationGroup = de_ReplicationGroup(output["ReplicationGroup"], context);
      }
      return contents;
    };
    var de_NetworkTypeList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var de_NodeGroup = (output, context) => {
      const contents = {};
      if (output["NodeGroupId"] !== void 0) {
        contents.NodeGroupId = (0, smithy_client_1.expectString)(output["NodeGroupId"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["PrimaryEndpoint"] !== void 0) {
        contents.PrimaryEndpoint = de_Endpoint(output["PrimaryEndpoint"], context);
      }
      if (output["ReaderEndpoint"] !== void 0) {
        contents.ReaderEndpoint = de_Endpoint(output["ReaderEndpoint"], context);
      }
      if (output["Slots"] !== void 0) {
        contents.Slots = (0, smithy_client_1.expectString)(output["Slots"]);
      }
      if (output.NodeGroupMembers === "") {
        contents.NodeGroupMembers = [];
      } else if (output["NodeGroupMembers"] !== void 0 && output["NodeGroupMembers"]["NodeGroupMember"] !== void 0) {
        contents.NodeGroupMembers = de_NodeGroupMemberList((0, smithy_client_1.getArrayIfSingleItem)(output["NodeGroupMembers"]["NodeGroupMember"]), context);
      }
      return contents;
    };
    var de_NodeGroupConfiguration = (output, context) => {
      const contents = {};
      if (output["NodeGroupId"] !== void 0) {
        contents.NodeGroupId = (0, smithy_client_1.expectString)(output["NodeGroupId"]);
      }
      if (output["Slots"] !== void 0) {
        contents.Slots = (0, smithy_client_1.expectString)(output["Slots"]);
      }
      if (output["ReplicaCount"] !== void 0) {
        contents.ReplicaCount = (0, smithy_client_1.strictParseInt32)(output["ReplicaCount"]);
      }
      if (output["PrimaryAvailabilityZone"] !== void 0) {
        contents.PrimaryAvailabilityZone = (0, smithy_client_1.expectString)(output["PrimaryAvailabilityZone"]);
      }
      if (output.ReplicaAvailabilityZones === "") {
        contents.ReplicaAvailabilityZones = [];
      } else if (output["ReplicaAvailabilityZones"] !== void 0 && output["ReplicaAvailabilityZones"]["AvailabilityZone"] !== void 0) {
        contents.ReplicaAvailabilityZones = de_AvailabilityZonesList((0, smithy_client_1.getArrayIfSingleItem)(output["ReplicaAvailabilityZones"]["AvailabilityZone"]), context);
      }
      if (output["PrimaryOutpostArn"] !== void 0) {
        contents.PrimaryOutpostArn = (0, smithy_client_1.expectString)(output["PrimaryOutpostArn"]);
      }
      if (output.ReplicaOutpostArns === "") {
        contents.ReplicaOutpostArns = [];
      } else if (output["ReplicaOutpostArns"] !== void 0 && output["ReplicaOutpostArns"]["OutpostArn"] !== void 0) {
        contents.ReplicaOutpostArns = de_OutpostArnsList((0, smithy_client_1.getArrayIfSingleItem)(output["ReplicaOutpostArns"]["OutpostArn"]), context);
      }
      return contents;
    };
    var de_NodeGroupList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_NodeGroup(entry, context);
      });
    };
    var de_NodeGroupMember = (output, context) => {
      const contents = {};
      if (output["CacheClusterId"] !== void 0) {
        contents.CacheClusterId = (0, smithy_client_1.expectString)(output["CacheClusterId"]);
      }
      if (output["CacheNodeId"] !== void 0) {
        contents.CacheNodeId = (0, smithy_client_1.expectString)(output["CacheNodeId"]);
      }
      if (output["ReadEndpoint"] !== void 0) {
        contents.ReadEndpoint = de_Endpoint(output["ReadEndpoint"], context);
      }
      if (output["PreferredAvailabilityZone"] !== void 0) {
        contents.PreferredAvailabilityZone = (0, smithy_client_1.expectString)(output["PreferredAvailabilityZone"]);
      }
      if (output["PreferredOutpostArn"] !== void 0) {
        contents.PreferredOutpostArn = (0, smithy_client_1.expectString)(output["PreferredOutpostArn"]);
      }
      if (output["CurrentRole"] !== void 0) {
        contents.CurrentRole = (0, smithy_client_1.expectString)(output["CurrentRole"]);
      }
      return contents;
    };
    var de_NodeGroupMemberList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_NodeGroupMember(entry, context);
      });
    };
    var de_NodeGroupMemberUpdateStatus = (output, context) => {
      const contents = {};
      if (output["CacheClusterId"] !== void 0) {
        contents.CacheClusterId = (0, smithy_client_1.expectString)(output["CacheClusterId"]);
      }
      if (output["CacheNodeId"] !== void 0) {
        contents.CacheNodeId = (0, smithy_client_1.expectString)(output["CacheNodeId"]);
      }
      if (output["NodeUpdateStatus"] !== void 0) {
        contents.NodeUpdateStatus = (0, smithy_client_1.expectString)(output["NodeUpdateStatus"]);
      }
      if (output["NodeDeletionDate"] !== void 0) {
        contents.NodeDeletionDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["NodeDeletionDate"]));
      }
      if (output["NodeUpdateStartDate"] !== void 0) {
        contents.NodeUpdateStartDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["NodeUpdateStartDate"]));
      }
      if (output["NodeUpdateEndDate"] !== void 0) {
        contents.NodeUpdateEndDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["NodeUpdateEndDate"]));
      }
      if (output["NodeUpdateInitiatedBy"] !== void 0) {
        contents.NodeUpdateInitiatedBy = (0, smithy_client_1.expectString)(output["NodeUpdateInitiatedBy"]);
      }
      if (output["NodeUpdateInitiatedDate"] !== void 0) {
        contents.NodeUpdateInitiatedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["NodeUpdateInitiatedDate"]));
      }
      if (output["NodeUpdateStatusModifiedDate"] !== void 0) {
        contents.NodeUpdateStatusModifiedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["NodeUpdateStatusModifiedDate"]));
      }
      return contents;
    };
    var de_NodeGroupMemberUpdateStatusList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_NodeGroupMemberUpdateStatus(entry, context);
      });
    };
    var de_NodeGroupNotFoundFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_NodeGroupsPerReplicationGroupQuotaExceededFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_NodeGroupUpdateStatus = (output, context) => {
      const contents = {};
      if (output["NodeGroupId"] !== void 0) {
        contents.NodeGroupId = (0, smithy_client_1.expectString)(output["NodeGroupId"]);
      }
      if (output.NodeGroupMemberUpdateStatus === "") {
        contents.NodeGroupMemberUpdateStatus = [];
      } else if (output["NodeGroupMemberUpdateStatus"] !== void 0 && output["NodeGroupMemberUpdateStatus"]["NodeGroupMemberUpdateStatus"] !== void 0) {
        contents.NodeGroupMemberUpdateStatus = de_NodeGroupMemberUpdateStatusList((0, smithy_client_1.getArrayIfSingleItem)(output["NodeGroupMemberUpdateStatus"]["NodeGroupMemberUpdateStatus"]), context);
      }
      return contents;
    };
    var de_NodeGroupUpdateStatusList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_NodeGroupUpdateStatus(entry, context);
      });
    };
    var de_NodeQuotaForClusterExceededFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_NodeQuotaForCustomerExceededFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_NodeSnapshot = (output, context) => {
      const contents = {};
      if (output["CacheClusterId"] !== void 0) {
        contents.CacheClusterId = (0, smithy_client_1.expectString)(output["CacheClusterId"]);
      }
      if (output["NodeGroupId"] !== void 0) {
        contents.NodeGroupId = (0, smithy_client_1.expectString)(output["NodeGroupId"]);
      }
      if (output["CacheNodeId"] !== void 0) {
        contents.CacheNodeId = (0, smithy_client_1.expectString)(output["CacheNodeId"]);
      }
      if (output["NodeGroupConfiguration"] !== void 0) {
        contents.NodeGroupConfiguration = de_NodeGroupConfiguration(output["NodeGroupConfiguration"], context);
      }
      if (output["CacheSize"] !== void 0) {
        contents.CacheSize = (0, smithy_client_1.expectString)(output["CacheSize"]);
      }
      if (output["CacheNodeCreateTime"] !== void 0) {
        contents.CacheNodeCreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CacheNodeCreateTime"]));
      }
      if (output["SnapshotCreateTime"] !== void 0) {
        contents.SnapshotCreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["SnapshotCreateTime"]));
      }
      return contents;
    };
    var de_NodeSnapshotList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_NodeSnapshot(entry, context);
      });
    };
    var de_NodeTypeList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var de_NoOperationFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_NotificationConfiguration = (output, context) => {
      const contents = {};
      if (output["TopicArn"] !== void 0) {
        contents.TopicArn = (0, smithy_client_1.expectString)(output["TopicArn"]);
      }
      if (output["TopicStatus"] !== void 0) {
        contents.TopicStatus = (0, smithy_client_1.expectString)(output["TopicStatus"]);
      }
      return contents;
    };
    var de_OutpostArnsList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var de_Parameter = (output, context) => {
      const contents = {};
      if (output["ParameterName"] !== void 0) {
        contents.ParameterName = (0, smithy_client_1.expectString)(output["ParameterName"]);
      }
      if (output["ParameterValue"] !== void 0) {
        contents.ParameterValue = (0, smithy_client_1.expectString)(output["ParameterValue"]);
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      if (output["Source"] !== void 0) {
        contents.Source = (0, smithy_client_1.expectString)(output["Source"]);
      }
      if (output["DataType"] !== void 0) {
        contents.DataType = (0, smithy_client_1.expectString)(output["DataType"]);
      }
      if (output["AllowedValues"] !== void 0) {
        contents.AllowedValues = (0, smithy_client_1.expectString)(output["AllowedValues"]);
      }
      if (output["IsModifiable"] !== void 0) {
        contents.IsModifiable = (0, smithy_client_1.parseBoolean)(output["IsModifiable"]);
      }
      if (output["MinimumEngineVersion"] !== void 0) {
        contents.MinimumEngineVersion = (0, smithy_client_1.expectString)(output["MinimumEngineVersion"]);
      }
      if (output["ChangeType"] !== void 0) {
        contents.ChangeType = (0, smithy_client_1.expectString)(output["ChangeType"]);
      }
      return contents;
    };
    var de_ParametersList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_Parameter(entry, context);
      });
    };
    var de_PendingLogDeliveryConfiguration = (output, context) => {
      const contents = {};
      if (output["LogType"] !== void 0) {
        contents.LogType = (0, smithy_client_1.expectString)(output["LogType"]);
      }
      if (output["DestinationType"] !== void 0) {
        contents.DestinationType = (0, smithy_client_1.expectString)(output["DestinationType"]);
      }
      if (output["DestinationDetails"] !== void 0) {
        contents.DestinationDetails = de_DestinationDetails(output["DestinationDetails"], context);
      }
      if (output["LogFormat"] !== void 0) {
        contents.LogFormat = (0, smithy_client_1.expectString)(output["LogFormat"]);
      }
      return contents;
    };
    var de_PendingLogDeliveryConfigurationList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_PendingLogDeliveryConfiguration(entry, context);
      });
    };
    var de_PendingModifiedValues = (output, context) => {
      const contents = {};
      if (output["NumCacheNodes"] !== void 0) {
        contents.NumCacheNodes = (0, smithy_client_1.strictParseInt32)(output["NumCacheNodes"]);
      }
      if (output.CacheNodeIdsToRemove === "") {
        contents.CacheNodeIdsToRemove = [];
      } else if (output["CacheNodeIdsToRemove"] !== void 0 && output["CacheNodeIdsToRemove"]["CacheNodeId"] !== void 0) {
        contents.CacheNodeIdsToRemove = de_CacheNodeIdsList((0, smithy_client_1.getArrayIfSingleItem)(output["CacheNodeIdsToRemove"]["CacheNodeId"]), context);
      }
      if (output["EngineVersion"] !== void 0) {
        contents.EngineVersion = (0, smithy_client_1.expectString)(output["EngineVersion"]);
      }
      if (output["CacheNodeType"] !== void 0) {
        contents.CacheNodeType = (0, smithy_client_1.expectString)(output["CacheNodeType"]);
      }
      if (output["AuthTokenStatus"] !== void 0) {
        contents.AuthTokenStatus = (0, smithy_client_1.expectString)(output["AuthTokenStatus"]);
      }
      if (output.LogDeliveryConfigurations === "") {
        contents.LogDeliveryConfigurations = [];
      } else if (output["LogDeliveryConfigurations"] !== void 0 && output["LogDeliveryConfigurations"]["member"] !== void 0) {
        contents.LogDeliveryConfigurations = de_PendingLogDeliveryConfigurationList((0, smithy_client_1.getArrayIfSingleItem)(output["LogDeliveryConfigurations"]["member"]), context);
      }
      if (output["TransitEncryptionEnabled"] !== void 0) {
        contents.TransitEncryptionEnabled = (0, smithy_client_1.parseBoolean)(output["TransitEncryptionEnabled"]);
      }
      if (output["TransitEncryptionMode"] !== void 0) {
        contents.TransitEncryptionMode = (0, smithy_client_1.expectString)(output["TransitEncryptionMode"]);
      }
      return contents;
    };
    var de_ProcessedUpdateAction = (output, context) => {
      const contents = {};
      if (output["ReplicationGroupId"] !== void 0) {
        contents.ReplicationGroupId = (0, smithy_client_1.expectString)(output["ReplicationGroupId"]);
      }
      if (output["CacheClusterId"] !== void 0) {
        contents.CacheClusterId = (0, smithy_client_1.expectString)(output["CacheClusterId"]);
      }
      if (output["ServiceUpdateName"] !== void 0) {
        contents.ServiceUpdateName = (0, smithy_client_1.expectString)(output["ServiceUpdateName"]);
      }
      if (output["UpdateActionStatus"] !== void 0) {
        contents.UpdateActionStatus = (0, smithy_client_1.expectString)(output["UpdateActionStatus"]);
      }
      return contents;
    };
    var de_ProcessedUpdateActionList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_ProcessedUpdateAction(entry, context);
      });
    };
    var de_PurchaseReservedCacheNodesOfferingResult = (output, context) => {
      const contents = {};
      if (output["ReservedCacheNode"] !== void 0) {
        contents.ReservedCacheNode = de_ReservedCacheNode(output["ReservedCacheNode"], context);
      }
      return contents;
    };
    var de_RebalanceSlotsInGlobalReplicationGroupResult = (output, context) => {
      const contents = {};
      if (output["GlobalReplicationGroup"] !== void 0) {
        contents.GlobalReplicationGroup = de_GlobalReplicationGroup(output["GlobalReplicationGroup"], context);
      }
      return contents;
    };
    var de_RebootCacheClusterResult = (output, context) => {
      const contents = {};
      if (output["CacheCluster"] !== void 0) {
        contents.CacheCluster = de_CacheCluster(output["CacheCluster"], context);
      }
      return contents;
    };
    var de_RecurringCharge = (output, context) => {
      const contents = {};
      if (output["RecurringChargeAmount"] !== void 0) {
        contents.RecurringChargeAmount = (0, smithy_client_1.strictParseFloat)(output["RecurringChargeAmount"]);
      }
      if (output["RecurringChargeFrequency"] !== void 0) {
        contents.RecurringChargeFrequency = (0, smithy_client_1.expectString)(output["RecurringChargeFrequency"]);
      }
      return contents;
    };
    var de_RecurringChargeList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_RecurringCharge(entry, context);
      });
    };
    var de_ReplicationGroup = (output, context) => {
      const contents = {};
      if (output["ReplicationGroupId"] !== void 0) {
        contents.ReplicationGroupId = (0, smithy_client_1.expectString)(output["ReplicationGroupId"]);
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      if (output["GlobalReplicationGroupInfo"] !== void 0) {
        contents.GlobalReplicationGroupInfo = de_GlobalReplicationGroupInfo(output["GlobalReplicationGroupInfo"], context);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["PendingModifiedValues"] !== void 0) {
        contents.PendingModifiedValues = de_ReplicationGroupPendingModifiedValues(output["PendingModifiedValues"], context);
      }
      if (output.MemberClusters === "") {
        contents.MemberClusters = [];
      } else if (output["MemberClusters"] !== void 0 && output["MemberClusters"]["ClusterId"] !== void 0) {
        contents.MemberClusters = de_ClusterIdList((0, smithy_client_1.getArrayIfSingleItem)(output["MemberClusters"]["ClusterId"]), context);
      }
      if (output.NodeGroups === "") {
        contents.NodeGroups = [];
      } else if (output["NodeGroups"] !== void 0 && output["NodeGroups"]["NodeGroup"] !== void 0) {
        contents.NodeGroups = de_NodeGroupList((0, smithy_client_1.getArrayIfSingleItem)(output["NodeGroups"]["NodeGroup"]), context);
      }
      if (output["SnapshottingClusterId"] !== void 0) {
        contents.SnapshottingClusterId = (0, smithy_client_1.expectString)(output["SnapshottingClusterId"]);
      }
      if (output["AutomaticFailover"] !== void 0) {
        contents.AutomaticFailover = (0, smithy_client_1.expectString)(output["AutomaticFailover"]);
      }
      if (output["MultiAZ"] !== void 0) {
        contents.MultiAZ = (0, smithy_client_1.expectString)(output["MultiAZ"]);
      }
      if (output["ConfigurationEndpoint"] !== void 0) {
        contents.ConfigurationEndpoint = de_Endpoint(output["ConfigurationEndpoint"], context);
      }
      if (output["SnapshotRetentionLimit"] !== void 0) {
        contents.SnapshotRetentionLimit = (0, smithy_client_1.strictParseInt32)(output["SnapshotRetentionLimit"]);
      }
      if (output["SnapshotWindow"] !== void 0) {
        contents.SnapshotWindow = (0, smithy_client_1.expectString)(output["SnapshotWindow"]);
      }
      if (output["ClusterEnabled"] !== void 0) {
        contents.ClusterEnabled = (0, smithy_client_1.parseBoolean)(output["ClusterEnabled"]);
      }
      if (output["CacheNodeType"] !== void 0) {
        contents.CacheNodeType = (0, smithy_client_1.expectString)(output["CacheNodeType"]);
      }
      if (output["AuthTokenEnabled"] !== void 0) {
        contents.AuthTokenEnabled = (0, smithy_client_1.parseBoolean)(output["AuthTokenEnabled"]);
      }
      if (output["AuthTokenLastModifiedDate"] !== void 0) {
        contents.AuthTokenLastModifiedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["AuthTokenLastModifiedDate"]));
      }
      if (output["TransitEncryptionEnabled"] !== void 0) {
        contents.TransitEncryptionEnabled = (0, smithy_client_1.parseBoolean)(output["TransitEncryptionEnabled"]);
      }
      if (output["AtRestEncryptionEnabled"] !== void 0) {
        contents.AtRestEncryptionEnabled = (0, smithy_client_1.parseBoolean)(output["AtRestEncryptionEnabled"]);
      }
      if (output.MemberClustersOutpostArns === "") {
        contents.MemberClustersOutpostArns = [];
      } else if (output["MemberClustersOutpostArns"] !== void 0 && output["MemberClustersOutpostArns"]["ReplicationGroupOutpostArn"] !== void 0) {
        contents.MemberClustersOutpostArns = de_ReplicationGroupOutpostArnList((0, smithy_client_1.getArrayIfSingleItem)(output["MemberClustersOutpostArns"]["ReplicationGroupOutpostArn"]), context);
      }
      if (output["KmsKeyId"] !== void 0) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["KmsKeyId"]);
      }
      if (output["ARN"] !== void 0) {
        contents.ARN = (0, smithy_client_1.expectString)(output["ARN"]);
      }
      if (output.UserGroupIds === "") {
        contents.UserGroupIds = [];
      } else if (output["UserGroupIds"] !== void 0 && output["UserGroupIds"]["member"] !== void 0) {
        contents.UserGroupIds = de_UserGroupIdList((0, smithy_client_1.getArrayIfSingleItem)(output["UserGroupIds"]["member"]), context);
      }
      if (output.LogDeliveryConfigurations === "") {
        contents.LogDeliveryConfigurations = [];
      } else if (output["LogDeliveryConfigurations"] !== void 0 && output["LogDeliveryConfigurations"]["LogDeliveryConfiguration"] !== void 0) {
        contents.LogDeliveryConfigurations = de_LogDeliveryConfigurationList((0, smithy_client_1.getArrayIfSingleItem)(output["LogDeliveryConfigurations"]["LogDeliveryConfiguration"]), context);
      }
      if (output["ReplicationGroupCreateTime"] !== void 0) {
        contents.ReplicationGroupCreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["ReplicationGroupCreateTime"]));
      }
      if (output["DataTiering"] !== void 0) {
        contents.DataTiering = (0, smithy_client_1.expectString)(output["DataTiering"]);
      }
      if (output["AutoMinorVersionUpgrade"] !== void 0) {
        contents.AutoMinorVersionUpgrade = (0, smithy_client_1.parseBoolean)(output["AutoMinorVersionUpgrade"]);
      }
      if (output["NetworkType"] !== void 0) {
        contents.NetworkType = (0, smithy_client_1.expectString)(output["NetworkType"]);
      }
      if (output["IpDiscovery"] !== void 0) {
        contents.IpDiscovery = (0, smithy_client_1.expectString)(output["IpDiscovery"]);
      }
      if (output["TransitEncryptionMode"] !== void 0) {
        contents.TransitEncryptionMode = (0, smithy_client_1.expectString)(output["TransitEncryptionMode"]);
      }
      if (output["ClusterMode"] !== void 0) {
        contents.ClusterMode = (0, smithy_client_1.expectString)(output["ClusterMode"]);
      }
      return contents;
    };
    var de_ReplicationGroupAlreadyExistsFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_ReplicationGroupAlreadyUnderMigrationFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_ReplicationGroupList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_ReplicationGroup(entry, context);
      });
    };
    var de_ReplicationGroupMessage = (output, context) => {
      const contents = {};
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.ReplicationGroups === "") {
        contents.ReplicationGroups = [];
      } else if (output["ReplicationGroups"] !== void 0 && output["ReplicationGroups"]["ReplicationGroup"] !== void 0) {
        contents.ReplicationGroups = de_ReplicationGroupList((0, smithy_client_1.getArrayIfSingleItem)(output["ReplicationGroups"]["ReplicationGroup"]), context);
      }
      return contents;
    };
    var de_ReplicationGroupNotFoundFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_ReplicationGroupNotUnderMigrationFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_ReplicationGroupOutpostArnList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var de_ReplicationGroupPendingModifiedValues = (output, context) => {
      const contents = {};
      if (output["PrimaryClusterId"] !== void 0) {
        contents.PrimaryClusterId = (0, smithy_client_1.expectString)(output["PrimaryClusterId"]);
      }
      if (output["AutomaticFailoverStatus"] !== void 0) {
        contents.AutomaticFailoverStatus = (0, smithy_client_1.expectString)(output["AutomaticFailoverStatus"]);
      }
      if (output["Resharding"] !== void 0) {
        contents.Resharding = de_ReshardingStatus(output["Resharding"], context);
      }
      if (output["AuthTokenStatus"] !== void 0) {
        contents.AuthTokenStatus = (0, smithy_client_1.expectString)(output["AuthTokenStatus"]);
      }
      if (output["UserGroups"] !== void 0) {
        contents.UserGroups = de_UserGroupsUpdateStatus(output["UserGroups"], context);
      }
      if (output.LogDeliveryConfigurations === "") {
        contents.LogDeliveryConfigurations = [];
      } else if (output["LogDeliveryConfigurations"] !== void 0 && output["LogDeliveryConfigurations"]["member"] !== void 0) {
        contents.LogDeliveryConfigurations = de_PendingLogDeliveryConfigurationList((0, smithy_client_1.getArrayIfSingleItem)(output["LogDeliveryConfigurations"]["member"]), context);
      }
      if (output["TransitEncryptionEnabled"] !== void 0) {
        contents.TransitEncryptionEnabled = (0, smithy_client_1.parseBoolean)(output["TransitEncryptionEnabled"]);
      }
      if (output["TransitEncryptionMode"] !== void 0) {
        contents.TransitEncryptionMode = (0, smithy_client_1.expectString)(output["TransitEncryptionMode"]);
      }
      if (output["ClusterMode"] !== void 0) {
        contents.ClusterMode = (0, smithy_client_1.expectString)(output["ClusterMode"]);
      }
      return contents;
    };
    var de_ReservedCacheNode = (output, context) => {
      const contents = {};
      if (output["ReservedCacheNodeId"] !== void 0) {
        contents.ReservedCacheNodeId = (0, smithy_client_1.expectString)(output["ReservedCacheNodeId"]);
      }
      if (output["ReservedCacheNodesOfferingId"] !== void 0) {
        contents.ReservedCacheNodesOfferingId = (0, smithy_client_1.expectString)(output["ReservedCacheNodesOfferingId"]);
      }
      if (output["CacheNodeType"] !== void 0) {
        contents.CacheNodeType = (0, smithy_client_1.expectString)(output["CacheNodeType"]);
      }
      if (output["StartTime"] !== void 0) {
        contents.StartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["StartTime"]));
      }
      if (output["Duration"] !== void 0) {
        contents.Duration = (0, smithy_client_1.strictParseInt32)(output["Duration"]);
      }
      if (output["FixedPrice"] !== void 0) {
        contents.FixedPrice = (0, smithy_client_1.strictParseFloat)(output["FixedPrice"]);
      }
      if (output["UsagePrice"] !== void 0) {
        contents.UsagePrice = (0, smithy_client_1.strictParseFloat)(output["UsagePrice"]);
      }
      if (output["CacheNodeCount"] !== void 0) {
        contents.CacheNodeCount = (0, smithy_client_1.strictParseInt32)(output["CacheNodeCount"]);
      }
      if (output["ProductDescription"] !== void 0) {
        contents.ProductDescription = (0, smithy_client_1.expectString)(output["ProductDescription"]);
      }
      if (output["OfferingType"] !== void 0) {
        contents.OfferingType = (0, smithy_client_1.expectString)(output["OfferingType"]);
      }
      if (output["State"] !== void 0) {
        contents.State = (0, smithy_client_1.expectString)(output["State"]);
      }
      if (output.RecurringCharges === "") {
        contents.RecurringCharges = [];
      } else if (output["RecurringCharges"] !== void 0 && output["RecurringCharges"]["RecurringCharge"] !== void 0) {
        contents.RecurringCharges = de_RecurringChargeList((0, smithy_client_1.getArrayIfSingleItem)(output["RecurringCharges"]["RecurringCharge"]), context);
      }
      if (output["ReservationARN"] !== void 0) {
        contents.ReservationARN = (0, smithy_client_1.expectString)(output["ReservationARN"]);
      }
      return contents;
    };
    var de_ReservedCacheNodeAlreadyExistsFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_ReservedCacheNodeList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_ReservedCacheNode(entry, context);
      });
    };
    var de_ReservedCacheNodeMessage = (output, context) => {
      const contents = {};
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.ReservedCacheNodes === "") {
        contents.ReservedCacheNodes = [];
      } else if (output["ReservedCacheNodes"] !== void 0 && output["ReservedCacheNodes"]["ReservedCacheNode"] !== void 0) {
        contents.ReservedCacheNodes = de_ReservedCacheNodeList((0, smithy_client_1.getArrayIfSingleItem)(output["ReservedCacheNodes"]["ReservedCacheNode"]), context);
      }
      return contents;
    };
    var de_ReservedCacheNodeNotFoundFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_ReservedCacheNodeQuotaExceededFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_ReservedCacheNodesOffering = (output, context) => {
      const contents = {};
      if (output["ReservedCacheNodesOfferingId"] !== void 0) {
        contents.ReservedCacheNodesOfferingId = (0, smithy_client_1.expectString)(output["ReservedCacheNodesOfferingId"]);
      }
      if (output["CacheNodeType"] !== void 0) {
        contents.CacheNodeType = (0, smithy_client_1.expectString)(output["CacheNodeType"]);
      }
      if (output["Duration"] !== void 0) {
        contents.Duration = (0, smithy_client_1.strictParseInt32)(output["Duration"]);
      }
      if (output["FixedPrice"] !== void 0) {
        contents.FixedPrice = (0, smithy_client_1.strictParseFloat)(output["FixedPrice"]);
      }
      if (output["UsagePrice"] !== void 0) {
        contents.UsagePrice = (0, smithy_client_1.strictParseFloat)(output["UsagePrice"]);
      }
      if (output["ProductDescription"] !== void 0) {
        contents.ProductDescription = (0, smithy_client_1.expectString)(output["ProductDescription"]);
      }
      if (output["OfferingType"] !== void 0) {
        contents.OfferingType = (0, smithy_client_1.expectString)(output["OfferingType"]);
      }
      if (output.RecurringCharges === "") {
        contents.RecurringCharges = [];
      } else if (output["RecurringCharges"] !== void 0 && output["RecurringCharges"]["RecurringCharge"] !== void 0) {
        contents.RecurringCharges = de_RecurringChargeList((0, smithy_client_1.getArrayIfSingleItem)(output["RecurringCharges"]["RecurringCharge"]), context);
      }
      return contents;
    };
    var de_ReservedCacheNodesOfferingList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_ReservedCacheNodesOffering(entry, context);
      });
    };
    var de_ReservedCacheNodesOfferingMessage = (output, context) => {
      const contents = {};
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.ReservedCacheNodesOfferings === "") {
        contents.ReservedCacheNodesOfferings = [];
      } else if (output["ReservedCacheNodesOfferings"] !== void 0 && output["ReservedCacheNodesOfferings"]["ReservedCacheNodesOffering"] !== void 0) {
        contents.ReservedCacheNodesOfferings = de_ReservedCacheNodesOfferingList((0, smithy_client_1.getArrayIfSingleItem)(output["ReservedCacheNodesOfferings"]["ReservedCacheNodesOffering"]), context);
      }
      return contents;
    };
    var de_ReservedCacheNodesOfferingNotFoundFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_ReshardingStatus = (output, context) => {
      const contents = {};
      if (output["SlotMigration"] !== void 0) {
        contents.SlotMigration = de_SlotMigration(output["SlotMigration"], context);
      }
      return contents;
    };
    var de_RevokeCacheSecurityGroupIngressResult = (output, context) => {
      const contents = {};
      if (output["CacheSecurityGroup"] !== void 0) {
        contents.CacheSecurityGroup = de_CacheSecurityGroup(output["CacheSecurityGroup"], context);
      }
      return contents;
    };
    var de_SecurityGroupMembership = (output, context) => {
      const contents = {};
      if (output["SecurityGroupId"] !== void 0) {
        contents.SecurityGroupId = (0, smithy_client_1.expectString)(output["SecurityGroupId"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      return contents;
    };
    var de_SecurityGroupMembershipList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_SecurityGroupMembership(entry, context);
      });
    };
    var de_ServiceLinkedRoleNotFoundFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_ServiceUpdate = (output, context) => {
      const contents = {};
      if (output["ServiceUpdateName"] !== void 0) {
        contents.ServiceUpdateName = (0, smithy_client_1.expectString)(output["ServiceUpdateName"]);
      }
      if (output["ServiceUpdateReleaseDate"] !== void 0) {
        contents.ServiceUpdateReleaseDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["ServiceUpdateReleaseDate"]));
      }
      if (output["ServiceUpdateEndDate"] !== void 0) {
        contents.ServiceUpdateEndDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["ServiceUpdateEndDate"]));
      }
      if (output["ServiceUpdateSeverity"] !== void 0) {
        contents.ServiceUpdateSeverity = (0, smithy_client_1.expectString)(output["ServiceUpdateSeverity"]);
      }
      if (output["ServiceUpdateRecommendedApplyByDate"] !== void 0) {
        contents.ServiceUpdateRecommendedApplyByDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["ServiceUpdateRecommendedApplyByDate"]));
      }
      if (output["ServiceUpdateStatus"] !== void 0) {
        contents.ServiceUpdateStatus = (0, smithy_client_1.expectString)(output["ServiceUpdateStatus"]);
      }
      if (output["ServiceUpdateDescription"] !== void 0) {
        contents.ServiceUpdateDescription = (0, smithy_client_1.expectString)(output["ServiceUpdateDescription"]);
      }
      if (output["ServiceUpdateType"] !== void 0) {
        contents.ServiceUpdateType = (0, smithy_client_1.expectString)(output["ServiceUpdateType"]);
      }
      if (output["Engine"] !== void 0) {
        contents.Engine = (0, smithy_client_1.expectString)(output["Engine"]);
      }
      if (output["EngineVersion"] !== void 0) {
        contents.EngineVersion = (0, smithy_client_1.expectString)(output["EngineVersion"]);
      }
      if (output["AutoUpdateAfterRecommendedApplyByDate"] !== void 0) {
        contents.AutoUpdateAfterRecommendedApplyByDate = (0, smithy_client_1.parseBoolean)(output["AutoUpdateAfterRecommendedApplyByDate"]);
      }
      if (output["EstimatedUpdateTime"] !== void 0) {
        contents.EstimatedUpdateTime = (0, smithy_client_1.expectString)(output["EstimatedUpdateTime"]);
      }
      return contents;
    };
    var de_ServiceUpdateList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_ServiceUpdate(entry, context);
      });
    };
    var de_ServiceUpdateNotFoundFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_ServiceUpdatesMessage = (output, context) => {
      const contents = {};
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.ServiceUpdates === "") {
        contents.ServiceUpdates = [];
      } else if (output["ServiceUpdates"] !== void 0 && output["ServiceUpdates"]["ServiceUpdate"] !== void 0) {
        contents.ServiceUpdates = de_ServiceUpdateList((0, smithy_client_1.getArrayIfSingleItem)(output["ServiceUpdates"]["ServiceUpdate"]), context);
      }
      return contents;
    };
    var de_SlotMigration = (output, context) => {
      const contents = {};
      if (output["ProgressPercentage"] !== void 0) {
        contents.ProgressPercentage = (0, smithy_client_1.strictParseFloat)(output["ProgressPercentage"]);
      }
      return contents;
    };
    var de_Snapshot = (output, context) => {
      const contents = {};
      if (output["SnapshotName"] !== void 0) {
        contents.SnapshotName = (0, smithy_client_1.expectString)(output["SnapshotName"]);
      }
      if (output["ReplicationGroupId"] !== void 0) {
        contents.ReplicationGroupId = (0, smithy_client_1.expectString)(output["ReplicationGroupId"]);
      }
      if (output["ReplicationGroupDescription"] !== void 0) {
        contents.ReplicationGroupDescription = (0, smithy_client_1.expectString)(output["ReplicationGroupDescription"]);
      }
      if (output["CacheClusterId"] !== void 0) {
        contents.CacheClusterId = (0, smithy_client_1.expectString)(output["CacheClusterId"]);
      }
      if (output["SnapshotStatus"] !== void 0) {
        contents.SnapshotStatus = (0, smithy_client_1.expectString)(output["SnapshotStatus"]);
      }
      if (output["SnapshotSource"] !== void 0) {
        contents.SnapshotSource = (0, smithy_client_1.expectString)(output["SnapshotSource"]);
      }
      if (output["CacheNodeType"] !== void 0) {
        contents.CacheNodeType = (0, smithy_client_1.expectString)(output["CacheNodeType"]);
      }
      if (output["Engine"] !== void 0) {
        contents.Engine = (0, smithy_client_1.expectString)(output["Engine"]);
      }
      if (output["EngineVersion"] !== void 0) {
        contents.EngineVersion = (0, smithy_client_1.expectString)(output["EngineVersion"]);
      }
      if (output["NumCacheNodes"] !== void 0) {
        contents.NumCacheNodes = (0, smithy_client_1.strictParseInt32)(output["NumCacheNodes"]);
      }
      if (output["PreferredAvailabilityZone"] !== void 0) {
        contents.PreferredAvailabilityZone = (0, smithy_client_1.expectString)(output["PreferredAvailabilityZone"]);
      }
      if (output["PreferredOutpostArn"] !== void 0) {
        contents.PreferredOutpostArn = (0, smithy_client_1.expectString)(output["PreferredOutpostArn"]);
      }
      if (output["CacheClusterCreateTime"] !== void 0) {
        contents.CacheClusterCreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CacheClusterCreateTime"]));
      }
      if (output["PreferredMaintenanceWindow"] !== void 0) {
        contents.PreferredMaintenanceWindow = (0, smithy_client_1.expectString)(output["PreferredMaintenanceWindow"]);
      }
      if (output["TopicArn"] !== void 0) {
        contents.TopicArn = (0, smithy_client_1.expectString)(output["TopicArn"]);
      }
      if (output["Port"] !== void 0) {
        contents.Port = (0, smithy_client_1.strictParseInt32)(output["Port"]);
      }
      if (output["CacheParameterGroupName"] !== void 0) {
        contents.CacheParameterGroupName = (0, smithy_client_1.expectString)(output["CacheParameterGroupName"]);
      }
      if (output["CacheSubnetGroupName"] !== void 0) {
        contents.CacheSubnetGroupName = (0, smithy_client_1.expectString)(output["CacheSubnetGroupName"]);
      }
      if (output["VpcId"] !== void 0) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["VpcId"]);
      }
      if (output["AutoMinorVersionUpgrade"] !== void 0) {
        contents.AutoMinorVersionUpgrade = (0, smithy_client_1.parseBoolean)(output["AutoMinorVersionUpgrade"]);
      }
      if (output["SnapshotRetentionLimit"] !== void 0) {
        contents.SnapshotRetentionLimit = (0, smithy_client_1.strictParseInt32)(output["SnapshotRetentionLimit"]);
      }
      if (output["SnapshotWindow"] !== void 0) {
        contents.SnapshotWindow = (0, smithy_client_1.expectString)(output["SnapshotWindow"]);
      }
      if (output["NumNodeGroups"] !== void 0) {
        contents.NumNodeGroups = (0, smithy_client_1.strictParseInt32)(output["NumNodeGroups"]);
      }
      if (output["AutomaticFailover"] !== void 0) {
        contents.AutomaticFailover = (0, smithy_client_1.expectString)(output["AutomaticFailover"]);
      }
      if (output.NodeSnapshots === "") {
        contents.NodeSnapshots = [];
      } else if (output["NodeSnapshots"] !== void 0 && output["NodeSnapshots"]["NodeSnapshot"] !== void 0) {
        contents.NodeSnapshots = de_NodeSnapshotList((0, smithy_client_1.getArrayIfSingleItem)(output["NodeSnapshots"]["NodeSnapshot"]), context);
      }
      if (output["KmsKeyId"] !== void 0) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["KmsKeyId"]);
      }
      if (output["ARN"] !== void 0) {
        contents.ARN = (0, smithy_client_1.expectString)(output["ARN"]);
      }
      if (output["DataTiering"] !== void 0) {
        contents.DataTiering = (0, smithy_client_1.expectString)(output["DataTiering"]);
      }
      return contents;
    };
    var de_SnapshotAlreadyExistsFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_SnapshotFeatureNotSupportedFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_SnapshotList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_Snapshot(entry, context);
      });
    };
    var de_SnapshotNotFoundFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_SnapshotQuotaExceededFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_StartMigrationResponse = (output, context) => {
      const contents = {};
      if (output["ReplicationGroup"] !== void 0) {
        contents.ReplicationGroup = de_ReplicationGroup(output["ReplicationGroup"], context);
      }
      return contents;
    };
    var de_Subnet = (output, context) => {
      const contents = {};
      if (output["SubnetIdentifier"] !== void 0) {
        contents.SubnetIdentifier = (0, smithy_client_1.expectString)(output["SubnetIdentifier"]);
      }
      if (output["SubnetAvailabilityZone"] !== void 0) {
        contents.SubnetAvailabilityZone = de_AvailabilityZone(output["SubnetAvailabilityZone"], context);
      }
      if (output["SubnetOutpost"] !== void 0) {
        contents.SubnetOutpost = de_SubnetOutpost(output["SubnetOutpost"], context);
      }
      if (output.SupportedNetworkTypes === "") {
        contents.SupportedNetworkTypes = [];
      } else if (output["SupportedNetworkTypes"] !== void 0 && output["SupportedNetworkTypes"]["member"] !== void 0) {
        contents.SupportedNetworkTypes = de_NetworkTypeList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedNetworkTypes"]["member"]), context);
      }
      return contents;
    };
    var de_SubnetInUse = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_SubnetList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_Subnet(entry, context);
      });
    };
    var de_SubnetNotAllowedFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_SubnetOutpost = (output, context) => {
      const contents = {};
      if (output["SubnetOutpostArn"] !== void 0) {
        contents.SubnetOutpostArn = (0, smithy_client_1.expectString)(output["SubnetOutpostArn"]);
      }
      return contents;
    };
    var de_Tag = (output, context) => {
      const contents = {};
      if (output["Key"] !== void 0) {
        contents.Key = (0, smithy_client_1.expectString)(output["Key"]);
      }
      if (output["Value"] !== void 0) {
        contents.Value = (0, smithy_client_1.expectString)(output["Value"]);
      }
      return contents;
    };
    var de_TagList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_Tag(entry, context);
      });
    };
    var de_TagListMessage = (output, context) => {
      const contents = {};
      if (output.TagList === "") {
        contents.TagList = [];
      } else if (output["TagList"] !== void 0 && output["TagList"]["Tag"] !== void 0) {
        contents.TagList = de_TagList((0, smithy_client_1.getArrayIfSingleItem)(output["TagList"]["Tag"]), context);
      }
      return contents;
    };
    var de_TagNotFoundFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_TagQuotaPerResourceExceeded = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_TestFailoverNotAvailableFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_TestFailoverResult = (output, context) => {
      const contents = {};
      if (output["ReplicationGroup"] !== void 0) {
        contents.ReplicationGroup = de_ReplicationGroup(output["ReplicationGroup"], context);
      }
      return contents;
    };
    var de_TestMigrationResponse = (output, context) => {
      const contents = {};
      if (output["ReplicationGroup"] !== void 0) {
        contents.ReplicationGroup = de_ReplicationGroup(output["ReplicationGroup"], context);
      }
      return contents;
    };
    var de_UGReplicationGroupIdList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var de_UnprocessedUpdateAction = (output, context) => {
      const contents = {};
      if (output["ReplicationGroupId"] !== void 0) {
        contents.ReplicationGroupId = (0, smithy_client_1.expectString)(output["ReplicationGroupId"]);
      }
      if (output["CacheClusterId"] !== void 0) {
        contents.CacheClusterId = (0, smithy_client_1.expectString)(output["CacheClusterId"]);
      }
      if (output["ServiceUpdateName"] !== void 0) {
        contents.ServiceUpdateName = (0, smithy_client_1.expectString)(output["ServiceUpdateName"]);
      }
      if (output["ErrorType"] !== void 0) {
        contents.ErrorType = (0, smithy_client_1.expectString)(output["ErrorType"]);
      }
      if (output["ErrorMessage"] !== void 0) {
        contents.ErrorMessage = (0, smithy_client_1.expectString)(output["ErrorMessage"]);
      }
      return contents;
    };
    var de_UnprocessedUpdateActionList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_UnprocessedUpdateAction(entry, context);
      });
    };
    var de_UpdateAction = (output, context) => {
      const contents = {};
      if (output["ReplicationGroupId"] !== void 0) {
        contents.ReplicationGroupId = (0, smithy_client_1.expectString)(output["ReplicationGroupId"]);
      }
      if (output["CacheClusterId"] !== void 0) {
        contents.CacheClusterId = (0, smithy_client_1.expectString)(output["CacheClusterId"]);
      }
      if (output["ServiceUpdateName"] !== void 0) {
        contents.ServiceUpdateName = (0, smithy_client_1.expectString)(output["ServiceUpdateName"]);
      }
      if (output["ServiceUpdateReleaseDate"] !== void 0) {
        contents.ServiceUpdateReleaseDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["ServiceUpdateReleaseDate"]));
      }
      if (output["ServiceUpdateSeverity"] !== void 0) {
        contents.ServiceUpdateSeverity = (0, smithy_client_1.expectString)(output["ServiceUpdateSeverity"]);
      }
      if (output["ServiceUpdateStatus"] !== void 0) {
        contents.ServiceUpdateStatus = (0, smithy_client_1.expectString)(output["ServiceUpdateStatus"]);
      }
      if (output["ServiceUpdateRecommendedApplyByDate"] !== void 0) {
        contents.ServiceUpdateRecommendedApplyByDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["ServiceUpdateRecommendedApplyByDate"]));
      }
      if (output["ServiceUpdateType"] !== void 0) {
        contents.ServiceUpdateType = (0, smithy_client_1.expectString)(output["ServiceUpdateType"]);
      }
      if (output["UpdateActionAvailableDate"] !== void 0) {
        contents.UpdateActionAvailableDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["UpdateActionAvailableDate"]));
      }
      if (output["UpdateActionStatus"] !== void 0) {
        contents.UpdateActionStatus = (0, smithy_client_1.expectString)(output["UpdateActionStatus"]);
      }
      if (output["NodesUpdated"] !== void 0) {
        contents.NodesUpdated = (0, smithy_client_1.expectString)(output["NodesUpdated"]);
      }
      if (output["UpdateActionStatusModifiedDate"] !== void 0) {
        contents.UpdateActionStatusModifiedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["UpdateActionStatusModifiedDate"]));
      }
      if (output["SlaMet"] !== void 0) {
        contents.SlaMet = (0, smithy_client_1.expectString)(output["SlaMet"]);
      }
      if (output.NodeGroupUpdateStatus === "") {
        contents.NodeGroupUpdateStatus = [];
      } else if (output["NodeGroupUpdateStatus"] !== void 0 && output["NodeGroupUpdateStatus"]["NodeGroupUpdateStatus"] !== void 0) {
        contents.NodeGroupUpdateStatus = de_NodeGroupUpdateStatusList((0, smithy_client_1.getArrayIfSingleItem)(output["NodeGroupUpdateStatus"]["NodeGroupUpdateStatus"]), context);
      }
      if (output.CacheNodeUpdateStatus === "") {
        contents.CacheNodeUpdateStatus = [];
      } else if (output["CacheNodeUpdateStatus"] !== void 0 && output["CacheNodeUpdateStatus"]["CacheNodeUpdateStatus"] !== void 0) {
        contents.CacheNodeUpdateStatus = de_CacheNodeUpdateStatusList((0, smithy_client_1.getArrayIfSingleItem)(output["CacheNodeUpdateStatus"]["CacheNodeUpdateStatus"]), context);
      }
      if (output["EstimatedUpdateTime"] !== void 0) {
        contents.EstimatedUpdateTime = (0, smithy_client_1.expectString)(output["EstimatedUpdateTime"]);
      }
      if (output["Engine"] !== void 0) {
        contents.Engine = (0, smithy_client_1.expectString)(output["Engine"]);
      }
      return contents;
    };
    var de_UpdateActionList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_UpdateAction(entry, context);
      });
    };
    var de_UpdateActionResultsMessage = (output, context) => {
      const contents = {};
      if (output.ProcessedUpdateActions === "") {
        contents.ProcessedUpdateActions = [];
      } else if (output["ProcessedUpdateActions"] !== void 0 && output["ProcessedUpdateActions"]["ProcessedUpdateAction"] !== void 0) {
        contents.ProcessedUpdateActions = de_ProcessedUpdateActionList((0, smithy_client_1.getArrayIfSingleItem)(output["ProcessedUpdateActions"]["ProcessedUpdateAction"]), context);
      }
      if (output.UnprocessedUpdateActions === "") {
        contents.UnprocessedUpdateActions = [];
      } else if (output["UnprocessedUpdateActions"] !== void 0 && output["UnprocessedUpdateActions"]["UnprocessedUpdateAction"] !== void 0) {
        contents.UnprocessedUpdateActions = de_UnprocessedUpdateActionList((0, smithy_client_1.getArrayIfSingleItem)(output["UnprocessedUpdateActions"]["UnprocessedUpdateAction"]), context);
      }
      return contents;
    };
    var de_UpdateActionsMessage = (output, context) => {
      const contents = {};
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output.UpdateActions === "") {
        contents.UpdateActions = [];
      } else if (output["UpdateActions"] !== void 0 && output["UpdateActions"]["UpdateAction"] !== void 0) {
        contents.UpdateActions = de_UpdateActionList((0, smithy_client_1.getArrayIfSingleItem)(output["UpdateActions"]["UpdateAction"]), context);
      }
      return contents;
    };
    var de_User = (output, context) => {
      const contents = {};
      if (output["UserId"] !== void 0) {
        contents.UserId = (0, smithy_client_1.expectString)(output["UserId"]);
      }
      if (output["UserName"] !== void 0) {
        contents.UserName = (0, smithy_client_1.expectString)(output["UserName"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["Engine"] !== void 0) {
        contents.Engine = (0, smithy_client_1.expectString)(output["Engine"]);
      }
      if (output["MinimumEngineVersion"] !== void 0) {
        contents.MinimumEngineVersion = (0, smithy_client_1.expectString)(output["MinimumEngineVersion"]);
      }
      if (output["AccessString"] !== void 0) {
        contents.AccessString = (0, smithy_client_1.expectString)(output["AccessString"]);
      }
      if (output.UserGroupIds === "") {
        contents.UserGroupIds = [];
      } else if (output["UserGroupIds"] !== void 0 && output["UserGroupIds"]["member"] !== void 0) {
        contents.UserGroupIds = de_UserGroupIdList((0, smithy_client_1.getArrayIfSingleItem)(output["UserGroupIds"]["member"]), context);
      }
      if (output["Authentication"] !== void 0) {
        contents.Authentication = de_Authentication(output["Authentication"], context);
      }
      if (output["ARN"] !== void 0) {
        contents.ARN = (0, smithy_client_1.expectString)(output["ARN"]);
      }
      return contents;
    };
    var de_UserAlreadyExistsFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_UserGroup = (output, context) => {
      const contents = {};
      if (output["UserGroupId"] !== void 0) {
        contents.UserGroupId = (0, smithy_client_1.expectString)(output["UserGroupId"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["Engine"] !== void 0) {
        contents.Engine = (0, smithy_client_1.expectString)(output["Engine"]);
      }
      if (output.UserIds === "") {
        contents.UserIds = [];
      } else if (output["UserIds"] !== void 0 && output["UserIds"]["member"] !== void 0) {
        contents.UserIds = de_UserIdList((0, smithy_client_1.getArrayIfSingleItem)(output["UserIds"]["member"]), context);
      }
      if (output["MinimumEngineVersion"] !== void 0) {
        contents.MinimumEngineVersion = (0, smithy_client_1.expectString)(output["MinimumEngineVersion"]);
      }
      if (output["PendingChanges"] !== void 0) {
        contents.PendingChanges = de_UserGroupPendingChanges(output["PendingChanges"], context);
      }
      if (output.ReplicationGroups === "") {
        contents.ReplicationGroups = [];
      } else if (output["ReplicationGroups"] !== void 0 && output["ReplicationGroups"]["member"] !== void 0) {
        contents.ReplicationGroups = de_UGReplicationGroupIdList((0, smithy_client_1.getArrayIfSingleItem)(output["ReplicationGroups"]["member"]), context);
      }
      if (output["ARN"] !== void 0) {
        contents.ARN = (0, smithy_client_1.expectString)(output["ARN"]);
      }
      return contents;
    };
    var de_UserGroupAlreadyExistsFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_UserGroupIdList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var de_UserGroupList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_UserGroup(entry, context);
      });
    };
    var de_UserGroupNotFoundFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_UserGroupPendingChanges = (output, context) => {
      const contents = {};
      if (output.UserIdsToRemove === "") {
        contents.UserIdsToRemove = [];
      } else if (output["UserIdsToRemove"] !== void 0 && output["UserIdsToRemove"]["member"] !== void 0) {
        contents.UserIdsToRemove = de_UserIdList((0, smithy_client_1.getArrayIfSingleItem)(output["UserIdsToRemove"]["member"]), context);
      }
      if (output.UserIdsToAdd === "") {
        contents.UserIdsToAdd = [];
      } else if (output["UserIdsToAdd"] !== void 0 && output["UserIdsToAdd"]["member"] !== void 0) {
        contents.UserIdsToAdd = de_UserIdList((0, smithy_client_1.getArrayIfSingleItem)(output["UserIdsToAdd"]["member"]), context);
      }
      return contents;
    };
    var de_UserGroupQuotaExceededFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_UserGroupsUpdateStatus = (output, context) => {
      const contents = {};
      if (output.UserGroupIdsToAdd === "") {
        contents.UserGroupIdsToAdd = [];
      } else if (output["UserGroupIdsToAdd"] !== void 0 && output["UserGroupIdsToAdd"]["member"] !== void 0) {
        contents.UserGroupIdsToAdd = de_UserGroupIdList((0, smithy_client_1.getArrayIfSingleItem)(output["UserGroupIdsToAdd"]["member"]), context);
      }
      if (output.UserGroupIdsToRemove === "") {
        contents.UserGroupIdsToRemove = [];
      } else if (output["UserGroupIdsToRemove"] !== void 0 && output["UserGroupIdsToRemove"]["member"] !== void 0) {
        contents.UserGroupIdsToRemove = de_UserGroupIdList((0, smithy_client_1.getArrayIfSingleItem)(output["UserGroupIdsToRemove"]["member"]), context);
      }
      return contents;
    };
    var de_UserIdList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var de_UserList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_User(entry, context);
      });
    };
    var de_UserNotFoundFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_UserQuotaExceededFault = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
    var throwDefaultError = (0, smithy_client_1.withBaseException)(ElastiCacheServiceException_1.ElastiCacheServiceException);
    var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    var SHARED_HEADERS = {
      "content-type": "application/x-www-form-urlencoded"
    };
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parser = new fast_xml_parser_1.XMLParser({
          attributeNamePrefix: "",
          htmlEntities: true,
          ignoreAttributes: false,
          ignoreDeclaration: true,
          parseTagValue: false,
          trimValues: false,
          tagValueProcessor: (_, val2) => val2.trim() === "" && val2.includes("\n") ? "" : void 0
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        const parsedObj = parser.parse(encoded);
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
      }
      return value;
    };
    var buildFormUrlencodedString = (formEntries) => Object.entries(formEntries).map(([key, value]) => (0, smithy_client_1.extendedEncodeURIComponent)(key) + "=" + (0, smithy_client_1.extendedEncodeURIComponent)(value)).join("&");
    var loadQueryErrorCode = (output, data) => {
      if (data.Error?.Code !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    };
  }
});

var require_AddTagsToResourceCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/AddTagsToResourceCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AddTagsToResourceCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var AddTagsToResourceCommand = class _AddTagsToResourceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _AddTagsToResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "AddTagsToResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_AddTagsToResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_AddTagsToResourceCommand)(output, context);
      }
    };
    exports2.AddTagsToResourceCommand = AddTagsToResourceCommand;
  }
});

var require_AuthorizeCacheSecurityGroupIngressCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/AuthorizeCacheSecurityGroupIngressCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AuthorizeCacheSecurityGroupIngressCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var AuthorizeCacheSecurityGroupIngressCommand = class _AuthorizeCacheSecurityGroupIngressCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _AuthorizeCacheSecurityGroupIngressCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "AuthorizeCacheSecurityGroupIngressCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_AuthorizeCacheSecurityGroupIngressCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_AuthorizeCacheSecurityGroupIngressCommand)(output, context);
      }
    };
    exports2.AuthorizeCacheSecurityGroupIngressCommand = AuthorizeCacheSecurityGroupIngressCommand;
  }
});

var require_BatchApplyUpdateActionCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/BatchApplyUpdateActionCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BatchApplyUpdateActionCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var BatchApplyUpdateActionCommand = class _BatchApplyUpdateActionCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _BatchApplyUpdateActionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "BatchApplyUpdateActionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_BatchApplyUpdateActionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_BatchApplyUpdateActionCommand)(output, context);
      }
    };
    exports2.BatchApplyUpdateActionCommand = BatchApplyUpdateActionCommand;
  }
});

var require_BatchStopUpdateActionCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/BatchStopUpdateActionCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BatchStopUpdateActionCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var BatchStopUpdateActionCommand = class _BatchStopUpdateActionCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _BatchStopUpdateActionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "BatchStopUpdateActionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_BatchStopUpdateActionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_BatchStopUpdateActionCommand)(output, context);
      }
    };
    exports2.BatchStopUpdateActionCommand = BatchStopUpdateActionCommand;
  }
});

var require_CompleteMigrationCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/CompleteMigrationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CompleteMigrationCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var CompleteMigrationCommand = class _CompleteMigrationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CompleteMigrationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "CompleteMigrationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_CompleteMigrationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_CompleteMigrationCommand)(output, context);
      }
    };
    exports2.CompleteMigrationCommand = CompleteMigrationCommand;
  }
});

var require_CopySnapshotCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/CopySnapshotCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CopySnapshotCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var CopySnapshotCommand = class _CopySnapshotCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CopySnapshotCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "CopySnapshotCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_CopySnapshotCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_CopySnapshotCommand)(output, context);
      }
    };
    exports2.CopySnapshotCommand = CopySnapshotCommand;
  }
});

var require_CreateCacheClusterCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/CreateCacheClusterCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateCacheClusterCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var CreateCacheClusterCommand = class _CreateCacheClusterCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateCacheClusterCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "CreateCacheClusterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_CreateCacheClusterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_CreateCacheClusterCommand)(output, context);
      }
    };
    exports2.CreateCacheClusterCommand = CreateCacheClusterCommand;
  }
});

var require_CreateCacheParameterGroupCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/CreateCacheParameterGroupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateCacheParameterGroupCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var CreateCacheParameterGroupCommand = class _CreateCacheParameterGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateCacheParameterGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "CreateCacheParameterGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_CreateCacheParameterGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_CreateCacheParameterGroupCommand)(output, context);
      }
    };
    exports2.CreateCacheParameterGroupCommand = CreateCacheParameterGroupCommand;
  }
});

var require_CreateCacheSecurityGroupCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/CreateCacheSecurityGroupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateCacheSecurityGroupCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var CreateCacheSecurityGroupCommand = class _CreateCacheSecurityGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateCacheSecurityGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "CreateCacheSecurityGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_CreateCacheSecurityGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_CreateCacheSecurityGroupCommand)(output, context);
      }
    };
    exports2.CreateCacheSecurityGroupCommand = CreateCacheSecurityGroupCommand;
  }
});

var require_CreateCacheSubnetGroupCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/CreateCacheSubnetGroupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateCacheSubnetGroupCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var CreateCacheSubnetGroupCommand = class _CreateCacheSubnetGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateCacheSubnetGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "CreateCacheSubnetGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_CreateCacheSubnetGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_CreateCacheSubnetGroupCommand)(output, context);
      }
    };
    exports2.CreateCacheSubnetGroupCommand = CreateCacheSubnetGroupCommand;
  }
});

var require_CreateGlobalReplicationGroupCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/CreateGlobalReplicationGroupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateGlobalReplicationGroupCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var CreateGlobalReplicationGroupCommand = class _CreateGlobalReplicationGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateGlobalReplicationGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "CreateGlobalReplicationGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_CreateGlobalReplicationGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_CreateGlobalReplicationGroupCommand)(output, context);
      }
    };
    exports2.CreateGlobalReplicationGroupCommand = CreateGlobalReplicationGroupCommand;
  }
});

var require_CreateReplicationGroupCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/CreateReplicationGroupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateReplicationGroupCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var CreateReplicationGroupCommand = class _CreateReplicationGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateReplicationGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "CreateReplicationGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_CreateReplicationGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_CreateReplicationGroupCommand)(output, context);
      }
    };
    exports2.CreateReplicationGroupCommand = CreateReplicationGroupCommand;
  }
});

var require_CreateSnapshotCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/CreateSnapshotCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateSnapshotCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var CreateSnapshotCommand = class _CreateSnapshotCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateSnapshotCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "CreateSnapshotCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_CreateSnapshotCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_CreateSnapshotCommand)(output, context);
      }
    };
    exports2.CreateSnapshotCommand = CreateSnapshotCommand;
  }
});

var require_CreateUserCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/CreateUserCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateUserCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var CreateUserCommand = class _CreateUserCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "CreateUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_CreateUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_CreateUserCommand)(output, context);
      }
    };
    exports2.CreateUserCommand = CreateUserCommand;
  }
});

var require_CreateUserGroupCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/CreateUserGroupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateUserGroupCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var CreateUserGroupCommand = class _CreateUserGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateUserGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "CreateUserGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_CreateUserGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_CreateUserGroupCommand)(output, context);
      }
    };
    exports2.CreateUserGroupCommand = CreateUserGroupCommand;
  }
});

var require_DecreaseNodeGroupsInGlobalReplicationGroupCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/DecreaseNodeGroupsInGlobalReplicationGroupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DecreaseNodeGroupsInGlobalReplicationGroupCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var DecreaseNodeGroupsInGlobalReplicationGroupCommand = class _DecreaseNodeGroupsInGlobalReplicationGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DecreaseNodeGroupsInGlobalReplicationGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "DecreaseNodeGroupsInGlobalReplicationGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DecreaseNodeGroupsInGlobalReplicationGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DecreaseNodeGroupsInGlobalReplicationGroupCommand)(output, context);
      }
    };
    exports2.DecreaseNodeGroupsInGlobalReplicationGroupCommand = DecreaseNodeGroupsInGlobalReplicationGroupCommand;
  }
});

var require_DecreaseReplicaCountCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/DecreaseReplicaCountCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DecreaseReplicaCountCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var DecreaseReplicaCountCommand = class _DecreaseReplicaCountCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DecreaseReplicaCountCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "DecreaseReplicaCountCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DecreaseReplicaCountCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DecreaseReplicaCountCommand)(output, context);
      }
    };
    exports2.DecreaseReplicaCountCommand = DecreaseReplicaCountCommand;
  }
});

var require_DeleteCacheClusterCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/DeleteCacheClusterCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteCacheClusterCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var DeleteCacheClusterCommand = class _DeleteCacheClusterCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteCacheClusterCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "DeleteCacheClusterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DeleteCacheClusterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DeleteCacheClusterCommand)(output, context);
      }
    };
    exports2.DeleteCacheClusterCommand = DeleteCacheClusterCommand;
  }
});

var require_DeleteCacheParameterGroupCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/DeleteCacheParameterGroupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteCacheParameterGroupCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var DeleteCacheParameterGroupCommand = class _DeleteCacheParameterGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteCacheParameterGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "DeleteCacheParameterGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DeleteCacheParameterGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DeleteCacheParameterGroupCommand)(output, context);
      }
    };
    exports2.DeleteCacheParameterGroupCommand = DeleteCacheParameterGroupCommand;
  }
});

var require_DeleteCacheSecurityGroupCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/DeleteCacheSecurityGroupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteCacheSecurityGroupCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var DeleteCacheSecurityGroupCommand = class _DeleteCacheSecurityGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteCacheSecurityGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "DeleteCacheSecurityGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DeleteCacheSecurityGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DeleteCacheSecurityGroupCommand)(output, context);
      }
    };
    exports2.DeleteCacheSecurityGroupCommand = DeleteCacheSecurityGroupCommand;
  }
});

var require_DeleteCacheSubnetGroupCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/DeleteCacheSubnetGroupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteCacheSubnetGroupCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var DeleteCacheSubnetGroupCommand = class _DeleteCacheSubnetGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteCacheSubnetGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "DeleteCacheSubnetGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DeleteCacheSubnetGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DeleteCacheSubnetGroupCommand)(output, context);
      }
    };
    exports2.DeleteCacheSubnetGroupCommand = DeleteCacheSubnetGroupCommand;
  }
});

var require_DeleteGlobalReplicationGroupCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/DeleteGlobalReplicationGroupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteGlobalReplicationGroupCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var DeleteGlobalReplicationGroupCommand = class _DeleteGlobalReplicationGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteGlobalReplicationGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "DeleteGlobalReplicationGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DeleteGlobalReplicationGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DeleteGlobalReplicationGroupCommand)(output, context);
      }
    };
    exports2.DeleteGlobalReplicationGroupCommand = DeleteGlobalReplicationGroupCommand;
  }
});

var require_DeleteReplicationGroupCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/DeleteReplicationGroupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteReplicationGroupCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var DeleteReplicationGroupCommand = class _DeleteReplicationGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteReplicationGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "DeleteReplicationGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DeleteReplicationGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DeleteReplicationGroupCommand)(output, context);
      }
    };
    exports2.DeleteReplicationGroupCommand = DeleteReplicationGroupCommand;
  }
});

var require_DeleteSnapshotCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/DeleteSnapshotCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteSnapshotCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var DeleteSnapshotCommand = class _DeleteSnapshotCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteSnapshotCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "DeleteSnapshotCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DeleteSnapshotCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DeleteSnapshotCommand)(output, context);
      }
    };
    exports2.DeleteSnapshotCommand = DeleteSnapshotCommand;
  }
});

var require_DeleteUserCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/DeleteUserCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteUserCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var DeleteUserCommand = class _DeleteUserCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "DeleteUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DeleteUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DeleteUserCommand)(output, context);
      }
    };
    exports2.DeleteUserCommand = DeleteUserCommand;
  }
});

var require_DeleteUserGroupCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/DeleteUserGroupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteUserGroupCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var DeleteUserGroupCommand = class _DeleteUserGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteUserGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "DeleteUserGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DeleteUserGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DeleteUserGroupCommand)(output, context);
      }
    };
    exports2.DeleteUserGroupCommand = DeleteUserGroupCommand;
  }
});

var require_DescribeCacheClustersCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/DescribeCacheClustersCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeCacheClustersCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var DescribeCacheClustersCommand = class _DescribeCacheClustersCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeCacheClustersCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "DescribeCacheClustersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DescribeCacheClustersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DescribeCacheClustersCommand)(output, context);
      }
    };
    exports2.DescribeCacheClustersCommand = DescribeCacheClustersCommand;
  }
});

var require_DescribeCacheEngineVersionsCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/DescribeCacheEngineVersionsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeCacheEngineVersionsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var DescribeCacheEngineVersionsCommand = class _DescribeCacheEngineVersionsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeCacheEngineVersionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "DescribeCacheEngineVersionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DescribeCacheEngineVersionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DescribeCacheEngineVersionsCommand)(output, context);
      }
    };
    exports2.DescribeCacheEngineVersionsCommand = DescribeCacheEngineVersionsCommand;
  }
});

var require_DescribeCacheParameterGroupsCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/DescribeCacheParameterGroupsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeCacheParameterGroupsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var DescribeCacheParameterGroupsCommand = class _DescribeCacheParameterGroupsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeCacheParameterGroupsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "DescribeCacheParameterGroupsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DescribeCacheParameterGroupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DescribeCacheParameterGroupsCommand)(output, context);
      }
    };
    exports2.DescribeCacheParameterGroupsCommand = DescribeCacheParameterGroupsCommand;
  }
});

var require_DescribeCacheParametersCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/DescribeCacheParametersCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeCacheParametersCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var DescribeCacheParametersCommand = class _DescribeCacheParametersCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeCacheParametersCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "DescribeCacheParametersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DescribeCacheParametersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DescribeCacheParametersCommand)(output, context);
      }
    };
    exports2.DescribeCacheParametersCommand = DescribeCacheParametersCommand;
  }
});

var require_DescribeCacheSecurityGroupsCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/DescribeCacheSecurityGroupsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeCacheSecurityGroupsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var DescribeCacheSecurityGroupsCommand = class _DescribeCacheSecurityGroupsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeCacheSecurityGroupsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "DescribeCacheSecurityGroupsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DescribeCacheSecurityGroupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DescribeCacheSecurityGroupsCommand)(output, context);
      }
    };
    exports2.DescribeCacheSecurityGroupsCommand = DescribeCacheSecurityGroupsCommand;
  }
});

var require_DescribeCacheSubnetGroupsCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/DescribeCacheSubnetGroupsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeCacheSubnetGroupsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var DescribeCacheSubnetGroupsCommand = class _DescribeCacheSubnetGroupsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeCacheSubnetGroupsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "DescribeCacheSubnetGroupsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DescribeCacheSubnetGroupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DescribeCacheSubnetGroupsCommand)(output, context);
      }
    };
    exports2.DescribeCacheSubnetGroupsCommand = DescribeCacheSubnetGroupsCommand;
  }
});

var require_DescribeEngineDefaultParametersCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/DescribeEngineDefaultParametersCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeEngineDefaultParametersCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var DescribeEngineDefaultParametersCommand = class _DescribeEngineDefaultParametersCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeEngineDefaultParametersCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "DescribeEngineDefaultParametersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DescribeEngineDefaultParametersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DescribeEngineDefaultParametersCommand)(output, context);
      }
    };
    exports2.DescribeEngineDefaultParametersCommand = DescribeEngineDefaultParametersCommand;
  }
});

var require_DescribeEventsCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/DescribeEventsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeEventsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var DescribeEventsCommand = class _DescribeEventsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeEventsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "DescribeEventsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DescribeEventsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DescribeEventsCommand)(output, context);
      }
    };
    exports2.DescribeEventsCommand = DescribeEventsCommand;
  }
});

var require_DescribeGlobalReplicationGroupsCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/DescribeGlobalReplicationGroupsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeGlobalReplicationGroupsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var DescribeGlobalReplicationGroupsCommand = class _DescribeGlobalReplicationGroupsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeGlobalReplicationGroupsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "DescribeGlobalReplicationGroupsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DescribeGlobalReplicationGroupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DescribeGlobalReplicationGroupsCommand)(output, context);
      }
    };
    exports2.DescribeGlobalReplicationGroupsCommand = DescribeGlobalReplicationGroupsCommand;
  }
});

var require_DescribeReplicationGroupsCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/DescribeReplicationGroupsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeReplicationGroupsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var DescribeReplicationGroupsCommand = class _DescribeReplicationGroupsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeReplicationGroupsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "DescribeReplicationGroupsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DescribeReplicationGroupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DescribeReplicationGroupsCommand)(output, context);
      }
    };
    exports2.DescribeReplicationGroupsCommand = DescribeReplicationGroupsCommand;
  }
});

var require_DescribeReservedCacheNodesCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/DescribeReservedCacheNodesCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeReservedCacheNodesCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var DescribeReservedCacheNodesCommand = class _DescribeReservedCacheNodesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeReservedCacheNodesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "DescribeReservedCacheNodesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DescribeReservedCacheNodesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DescribeReservedCacheNodesCommand)(output, context);
      }
    };
    exports2.DescribeReservedCacheNodesCommand = DescribeReservedCacheNodesCommand;
  }
});

var require_DescribeReservedCacheNodesOfferingsCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/DescribeReservedCacheNodesOfferingsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeReservedCacheNodesOfferingsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var DescribeReservedCacheNodesOfferingsCommand = class _DescribeReservedCacheNodesOfferingsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeReservedCacheNodesOfferingsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "DescribeReservedCacheNodesOfferingsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DescribeReservedCacheNodesOfferingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DescribeReservedCacheNodesOfferingsCommand)(output, context);
      }
    };
    exports2.DescribeReservedCacheNodesOfferingsCommand = DescribeReservedCacheNodesOfferingsCommand;
  }
});

var require_DescribeServiceUpdatesCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/DescribeServiceUpdatesCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeServiceUpdatesCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var DescribeServiceUpdatesCommand = class _DescribeServiceUpdatesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeServiceUpdatesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "DescribeServiceUpdatesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DescribeServiceUpdatesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DescribeServiceUpdatesCommand)(output, context);
      }
    };
    exports2.DescribeServiceUpdatesCommand = DescribeServiceUpdatesCommand;
  }
});

var require_DescribeSnapshotsCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/DescribeSnapshotsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeSnapshotsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var DescribeSnapshotsCommand = class _DescribeSnapshotsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeSnapshotsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "DescribeSnapshotsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DescribeSnapshotsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DescribeSnapshotsCommand)(output, context);
      }
    };
    exports2.DescribeSnapshotsCommand = DescribeSnapshotsCommand;
  }
});

var require_DescribeUpdateActionsCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/DescribeUpdateActionsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeUpdateActionsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var DescribeUpdateActionsCommand = class _DescribeUpdateActionsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeUpdateActionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "DescribeUpdateActionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DescribeUpdateActionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DescribeUpdateActionsCommand)(output, context);
      }
    };
    exports2.DescribeUpdateActionsCommand = DescribeUpdateActionsCommand;
  }
});

var require_DescribeUserGroupsCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/DescribeUserGroupsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeUserGroupsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var DescribeUserGroupsCommand = class _DescribeUserGroupsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeUserGroupsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "DescribeUserGroupsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DescribeUserGroupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DescribeUserGroupsCommand)(output, context);
      }
    };
    exports2.DescribeUserGroupsCommand = DescribeUserGroupsCommand;
  }
});

var require_DescribeUsersCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/DescribeUsersCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DescribeUsersCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var DescribeUsersCommand = class _DescribeUsersCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeUsersCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "DescribeUsersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DescribeUsersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DescribeUsersCommand)(output, context);
      }
    };
    exports2.DescribeUsersCommand = DescribeUsersCommand;
  }
});

var require_DisassociateGlobalReplicationGroupCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/DisassociateGlobalReplicationGroupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DisassociateGlobalReplicationGroupCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var DisassociateGlobalReplicationGroupCommand = class _DisassociateGlobalReplicationGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DisassociateGlobalReplicationGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "DisassociateGlobalReplicationGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DisassociateGlobalReplicationGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DisassociateGlobalReplicationGroupCommand)(output, context);
      }
    };
    exports2.DisassociateGlobalReplicationGroupCommand = DisassociateGlobalReplicationGroupCommand;
  }
});

var require_FailoverGlobalReplicationGroupCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/FailoverGlobalReplicationGroupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FailoverGlobalReplicationGroupCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var FailoverGlobalReplicationGroupCommand = class _FailoverGlobalReplicationGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _FailoverGlobalReplicationGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "FailoverGlobalReplicationGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_FailoverGlobalReplicationGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_FailoverGlobalReplicationGroupCommand)(output, context);
      }
    };
    exports2.FailoverGlobalReplicationGroupCommand = FailoverGlobalReplicationGroupCommand;
  }
});

var require_IncreaseNodeGroupsInGlobalReplicationGroupCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/IncreaseNodeGroupsInGlobalReplicationGroupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IncreaseNodeGroupsInGlobalReplicationGroupCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var IncreaseNodeGroupsInGlobalReplicationGroupCommand = class _IncreaseNodeGroupsInGlobalReplicationGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _IncreaseNodeGroupsInGlobalReplicationGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "IncreaseNodeGroupsInGlobalReplicationGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_IncreaseNodeGroupsInGlobalReplicationGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_IncreaseNodeGroupsInGlobalReplicationGroupCommand)(output, context);
      }
    };
    exports2.IncreaseNodeGroupsInGlobalReplicationGroupCommand = IncreaseNodeGroupsInGlobalReplicationGroupCommand;
  }
});

var require_IncreaseReplicaCountCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/IncreaseReplicaCountCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IncreaseReplicaCountCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var IncreaseReplicaCountCommand = class _IncreaseReplicaCountCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _IncreaseReplicaCountCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "IncreaseReplicaCountCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_IncreaseReplicaCountCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_IncreaseReplicaCountCommand)(output, context);
      }
    };
    exports2.IncreaseReplicaCountCommand = IncreaseReplicaCountCommand;
  }
});

var require_ListAllowedNodeTypeModificationsCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/ListAllowedNodeTypeModificationsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListAllowedNodeTypeModificationsCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var ListAllowedNodeTypeModificationsCommand = class _ListAllowedNodeTypeModificationsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListAllowedNodeTypeModificationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "ListAllowedNodeTypeModificationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_ListAllowedNodeTypeModificationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_ListAllowedNodeTypeModificationsCommand)(output, context);
      }
    };
    exports2.ListAllowedNodeTypeModificationsCommand = ListAllowedNodeTypeModificationsCommand;
  }
});

var require_ListTagsForResourceCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/ListTagsForResourceCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListTagsForResourceCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var ListTagsForResourceCommand = class _ListTagsForResourceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListTagsForResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "ListTagsForResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_ListTagsForResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_ListTagsForResourceCommand)(output, context);
      }
    };
    exports2.ListTagsForResourceCommand = ListTagsForResourceCommand;
  }
});

var require_ModifyCacheClusterCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/ModifyCacheClusterCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ModifyCacheClusterCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var ModifyCacheClusterCommand = class _ModifyCacheClusterCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ModifyCacheClusterCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "ModifyCacheClusterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_ModifyCacheClusterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_ModifyCacheClusterCommand)(output, context);
      }
    };
    exports2.ModifyCacheClusterCommand = ModifyCacheClusterCommand;
  }
});

var require_ModifyCacheParameterGroupCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/ModifyCacheParameterGroupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ModifyCacheParameterGroupCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var ModifyCacheParameterGroupCommand = class _ModifyCacheParameterGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ModifyCacheParameterGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "ModifyCacheParameterGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_ModifyCacheParameterGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_ModifyCacheParameterGroupCommand)(output, context);
      }
    };
    exports2.ModifyCacheParameterGroupCommand = ModifyCacheParameterGroupCommand;
  }
});

var require_ModifyCacheSubnetGroupCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/ModifyCacheSubnetGroupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ModifyCacheSubnetGroupCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var ModifyCacheSubnetGroupCommand = class _ModifyCacheSubnetGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ModifyCacheSubnetGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "ModifyCacheSubnetGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_ModifyCacheSubnetGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_ModifyCacheSubnetGroupCommand)(output, context);
      }
    };
    exports2.ModifyCacheSubnetGroupCommand = ModifyCacheSubnetGroupCommand;
  }
});

var require_ModifyGlobalReplicationGroupCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/ModifyGlobalReplicationGroupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ModifyGlobalReplicationGroupCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var ModifyGlobalReplicationGroupCommand = class _ModifyGlobalReplicationGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ModifyGlobalReplicationGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "ModifyGlobalReplicationGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_ModifyGlobalReplicationGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_ModifyGlobalReplicationGroupCommand)(output, context);
      }
    };
    exports2.ModifyGlobalReplicationGroupCommand = ModifyGlobalReplicationGroupCommand;
  }
});

var require_ModifyReplicationGroupCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/ModifyReplicationGroupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ModifyReplicationGroupCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var ModifyReplicationGroupCommand = class _ModifyReplicationGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ModifyReplicationGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "ModifyReplicationGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_ModifyReplicationGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_ModifyReplicationGroupCommand)(output, context);
      }
    };
    exports2.ModifyReplicationGroupCommand = ModifyReplicationGroupCommand;
  }
});

var require_ModifyReplicationGroupShardConfigurationCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/ModifyReplicationGroupShardConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ModifyReplicationGroupShardConfigurationCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var ModifyReplicationGroupShardConfigurationCommand = class _ModifyReplicationGroupShardConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ModifyReplicationGroupShardConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "ModifyReplicationGroupShardConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_ModifyReplicationGroupShardConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_ModifyReplicationGroupShardConfigurationCommand)(output, context);
      }
    };
    exports2.ModifyReplicationGroupShardConfigurationCommand = ModifyReplicationGroupShardConfigurationCommand;
  }
});

var require_ModifyUserCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/ModifyUserCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ModifyUserCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var ModifyUserCommand = class _ModifyUserCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ModifyUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "ModifyUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_ModifyUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_ModifyUserCommand)(output, context);
      }
    };
    exports2.ModifyUserCommand = ModifyUserCommand;
  }
});

var require_ModifyUserGroupCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/ModifyUserGroupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ModifyUserGroupCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var ModifyUserGroupCommand = class _ModifyUserGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ModifyUserGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "ModifyUserGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_ModifyUserGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_ModifyUserGroupCommand)(output, context);
      }
    };
    exports2.ModifyUserGroupCommand = ModifyUserGroupCommand;
  }
});

var require_PurchaseReservedCacheNodesOfferingCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/PurchaseReservedCacheNodesOfferingCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PurchaseReservedCacheNodesOfferingCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var PurchaseReservedCacheNodesOfferingCommand = class _PurchaseReservedCacheNodesOfferingCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PurchaseReservedCacheNodesOfferingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "PurchaseReservedCacheNodesOfferingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_PurchaseReservedCacheNodesOfferingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_PurchaseReservedCacheNodesOfferingCommand)(output, context);
      }
    };
    exports2.PurchaseReservedCacheNodesOfferingCommand = PurchaseReservedCacheNodesOfferingCommand;
  }
});

var require_RebalanceSlotsInGlobalReplicationGroupCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/RebalanceSlotsInGlobalReplicationGroupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RebalanceSlotsInGlobalReplicationGroupCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var RebalanceSlotsInGlobalReplicationGroupCommand = class _RebalanceSlotsInGlobalReplicationGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _RebalanceSlotsInGlobalReplicationGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "RebalanceSlotsInGlobalReplicationGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_RebalanceSlotsInGlobalReplicationGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_RebalanceSlotsInGlobalReplicationGroupCommand)(output, context);
      }
    };
    exports2.RebalanceSlotsInGlobalReplicationGroupCommand = RebalanceSlotsInGlobalReplicationGroupCommand;
  }
});

var require_RebootCacheClusterCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/RebootCacheClusterCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RebootCacheClusterCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var RebootCacheClusterCommand = class _RebootCacheClusterCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _RebootCacheClusterCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "RebootCacheClusterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_RebootCacheClusterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_RebootCacheClusterCommand)(output, context);
      }
    };
    exports2.RebootCacheClusterCommand = RebootCacheClusterCommand;
  }
});

var require_RemoveTagsFromResourceCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/RemoveTagsFromResourceCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RemoveTagsFromResourceCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var RemoveTagsFromResourceCommand = class _RemoveTagsFromResourceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _RemoveTagsFromResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "RemoveTagsFromResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_RemoveTagsFromResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_RemoveTagsFromResourceCommand)(output, context);
      }
    };
    exports2.RemoveTagsFromResourceCommand = RemoveTagsFromResourceCommand;
  }
});

var require_ResetCacheParameterGroupCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/ResetCacheParameterGroupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ResetCacheParameterGroupCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var ResetCacheParameterGroupCommand = class _ResetCacheParameterGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ResetCacheParameterGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "ResetCacheParameterGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_ResetCacheParameterGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_ResetCacheParameterGroupCommand)(output, context);
      }
    };
    exports2.ResetCacheParameterGroupCommand = ResetCacheParameterGroupCommand;
  }
});

var require_RevokeCacheSecurityGroupIngressCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/RevokeCacheSecurityGroupIngressCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RevokeCacheSecurityGroupIngressCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var RevokeCacheSecurityGroupIngressCommand = class _RevokeCacheSecurityGroupIngressCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _RevokeCacheSecurityGroupIngressCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "RevokeCacheSecurityGroupIngressCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_RevokeCacheSecurityGroupIngressCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_RevokeCacheSecurityGroupIngressCommand)(output, context);
      }
    };
    exports2.RevokeCacheSecurityGroupIngressCommand = RevokeCacheSecurityGroupIngressCommand;
  }
});

var require_StartMigrationCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/StartMigrationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StartMigrationCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var StartMigrationCommand = class _StartMigrationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _StartMigrationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "StartMigrationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_StartMigrationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_StartMigrationCommand)(output, context);
      }
    };
    exports2.StartMigrationCommand = StartMigrationCommand;
  }
});

var require_TestFailoverCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/TestFailoverCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TestFailoverCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var TestFailoverCommand = class _TestFailoverCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _TestFailoverCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "TestFailoverCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_TestFailoverCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_TestFailoverCommand)(output, context);
      }
    };
    exports2.TestFailoverCommand = TestFailoverCommand;
  }
});

var require_TestMigrationCommand = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/TestMigrationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TestMigrationCommand = exports2.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports2, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query2();
    var TestMigrationCommand = class _TestMigrationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _TestMigrationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ElastiCacheClient";
        const commandName = "TestMigrationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_TestMigrationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_TestMigrationCommand)(output, context);
      }
    };
    exports2.TestMigrationCommand = TestMigrationCommand;
  }
});

var require_ElastiCache = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/ElastiCache.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ElastiCache = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var AddTagsToResourceCommand_1 = require_AddTagsToResourceCommand();
    var AuthorizeCacheSecurityGroupIngressCommand_1 = require_AuthorizeCacheSecurityGroupIngressCommand();
    var BatchApplyUpdateActionCommand_1 = require_BatchApplyUpdateActionCommand();
    var BatchStopUpdateActionCommand_1 = require_BatchStopUpdateActionCommand();
    var CompleteMigrationCommand_1 = require_CompleteMigrationCommand();
    var CopySnapshotCommand_1 = require_CopySnapshotCommand();
    var CreateCacheClusterCommand_1 = require_CreateCacheClusterCommand();
    var CreateCacheParameterGroupCommand_1 = require_CreateCacheParameterGroupCommand();
    var CreateCacheSecurityGroupCommand_1 = require_CreateCacheSecurityGroupCommand();
    var CreateCacheSubnetGroupCommand_1 = require_CreateCacheSubnetGroupCommand();
    var CreateGlobalReplicationGroupCommand_1 = require_CreateGlobalReplicationGroupCommand();
    var CreateReplicationGroupCommand_1 = require_CreateReplicationGroupCommand();
    var CreateSnapshotCommand_1 = require_CreateSnapshotCommand();
    var CreateUserCommand_1 = require_CreateUserCommand();
    var CreateUserGroupCommand_1 = require_CreateUserGroupCommand();
    var DecreaseNodeGroupsInGlobalReplicationGroupCommand_1 = require_DecreaseNodeGroupsInGlobalReplicationGroupCommand();
    var DecreaseReplicaCountCommand_1 = require_DecreaseReplicaCountCommand();
    var DeleteCacheClusterCommand_1 = require_DeleteCacheClusterCommand();
    var DeleteCacheParameterGroupCommand_1 = require_DeleteCacheParameterGroupCommand();
    var DeleteCacheSecurityGroupCommand_1 = require_DeleteCacheSecurityGroupCommand();
    var DeleteCacheSubnetGroupCommand_1 = require_DeleteCacheSubnetGroupCommand();
    var DeleteGlobalReplicationGroupCommand_1 = require_DeleteGlobalReplicationGroupCommand();
    var DeleteReplicationGroupCommand_1 = require_DeleteReplicationGroupCommand();
    var DeleteSnapshotCommand_1 = require_DeleteSnapshotCommand();
    var DeleteUserCommand_1 = require_DeleteUserCommand();
    var DeleteUserGroupCommand_1 = require_DeleteUserGroupCommand();
    var DescribeCacheClustersCommand_1 = require_DescribeCacheClustersCommand();
    var DescribeCacheEngineVersionsCommand_1 = require_DescribeCacheEngineVersionsCommand();
    var DescribeCacheParameterGroupsCommand_1 = require_DescribeCacheParameterGroupsCommand();
    var DescribeCacheParametersCommand_1 = require_DescribeCacheParametersCommand();
    var DescribeCacheSecurityGroupsCommand_1 = require_DescribeCacheSecurityGroupsCommand();
    var DescribeCacheSubnetGroupsCommand_1 = require_DescribeCacheSubnetGroupsCommand();
    var DescribeEngineDefaultParametersCommand_1 = require_DescribeEngineDefaultParametersCommand();
    var DescribeEventsCommand_1 = require_DescribeEventsCommand();
    var DescribeGlobalReplicationGroupsCommand_1 = require_DescribeGlobalReplicationGroupsCommand();
    var DescribeReplicationGroupsCommand_1 = require_DescribeReplicationGroupsCommand();
    var DescribeReservedCacheNodesCommand_1 = require_DescribeReservedCacheNodesCommand();
    var DescribeReservedCacheNodesOfferingsCommand_1 = require_DescribeReservedCacheNodesOfferingsCommand();
    var DescribeServiceUpdatesCommand_1 = require_DescribeServiceUpdatesCommand();
    var DescribeSnapshotsCommand_1 = require_DescribeSnapshotsCommand();
    var DescribeUpdateActionsCommand_1 = require_DescribeUpdateActionsCommand();
    var DescribeUserGroupsCommand_1 = require_DescribeUserGroupsCommand();
    var DescribeUsersCommand_1 = require_DescribeUsersCommand();
    var DisassociateGlobalReplicationGroupCommand_1 = require_DisassociateGlobalReplicationGroupCommand();
    var FailoverGlobalReplicationGroupCommand_1 = require_FailoverGlobalReplicationGroupCommand();
    var IncreaseNodeGroupsInGlobalReplicationGroupCommand_1 = require_IncreaseNodeGroupsInGlobalReplicationGroupCommand();
    var IncreaseReplicaCountCommand_1 = require_IncreaseReplicaCountCommand();
    var ListAllowedNodeTypeModificationsCommand_1 = require_ListAllowedNodeTypeModificationsCommand();
    var ListTagsForResourceCommand_1 = require_ListTagsForResourceCommand();
    var ModifyCacheClusterCommand_1 = require_ModifyCacheClusterCommand();
    var ModifyCacheParameterGroupCommand_1 = require_ModifyCacheParameterGroupCommand();
    var ModifyCacheSubnetGroupCommand_1 = require_ModifyCacheSubnetGroupCommand();
    var ModifyGlobalReplicationGroupCommand_1 = require_ModifyGlobalReplicationGroupCommand();
    var ModifyReplicationGroupCommand_1 = require_ModifyReplicationGroupCommand();
    var ModifyReplicationGroupShardConfigurationCommand_1 = require_ModifyReplicationGroupShardConfigurationCommand();
    var ModifyUserCommand_1 = require_ModifyUserCommand();
    var ModifyUserGroupCommand_1 = require_ModifyUserGroupCommand();
    var PurchaseReservedCacheNodesOfferingCommand_1 = require_PurchaseReservedCacheNodesOfferingCommand();
    var RebalanceSlotsInGlobalReplicationGroupCommand_1 = require_RebalanceSlotsInGlobalReplicationGroupCommand();
    var RebootCacheClusterCommand_1 = require_RebootCacheClusterCommand();
    var RemoveTagsFromResourceCommand_1 = require_RemoveTagsFromResourceCommand();
    var ResetCacheParameterGroupCommand_1 = require_ResetCacheParameterGroupCommand();
    var RevokeCacheSecurityGroupIngressCommand_1 = require_RevokeCacheSecurityGroupIngressCommand();
    var StartMigrationCommand_1 = require_StartMigrationCommand();
    var TestFailoverCommand_1 = require_TestFailoverCommand();
    var TestMigrationCommand_1 = require_TestMigrationCommand();
    var ElastiCacheClient_1 = require_ElastiCacheClient();
    var commands = {
      AddTagsToResourceCommand: AddTagsToResourceCommand_1.AddTagsToResourceCommand,
      AuthorizeCacheSecurityGroupIngressCommand: AuthorizeCacheSecurityGroupIngressCommand_1.AuthorizeCacheSecurityGroupIngressCommand,
      BatchApplyUpdateActionCommand: BatchApplyUpdateActionCommand_1.BatchApplyUpdateActionCommand,
      BatchStopUpdateActionCommand: BatchStopUpdateActionCommand_1.BatchStopUpdateActionCommand,
      CompleteMigrationCommand: CompleteMigrationCommand_1.CompleteMigrationCommand,
      CopySnapshotCommand: CopySnapshotCommand_1.CopySnapshotCommand,
      CreateCacheClusterCommand: CreateCacheClusterCommand_1.CreateCacheClusterCommand,
      CreateCacheParameterGroupCommand: CreateCacheParameterGroupCommand_1.CreateCacheParameterGroupCommand,
      CreateCacheSecurityGroupCommand: CreateCacheSecurityGroupCommand_1.CreateCacheSecurityGroupCommand,
      CreateCacheSubnetGroupCommand: CreateCacheSubnetGroupCommand_1.CreateCacheSubnetGroupCommand,
      CreateGlobalReplicationGroupCommand: CreateGlobalReplicationGroupCommand_1.CreateGlobalReplicationGroupCommand,
      CreateReplicationGroupCommand: CreateReplicationGroupCommand_1.CreateReplicationGroupCommand,
      CreateSnapshotCommand: CreateSnapshotCommand_1.CreateSnapshotCommand,
      CreateUserCommand: CreateUserCommand_1.CreateUserCommand,
      CreateUserGroupCommand: CreateUserGroupCommand_1.CreateUserGroupCommand,
      DecreaseNodeGroupsInGlobalReplicationGroupCommand: DecreaseNodeGroupsInGlobalReplicationGroupCommand_1.DecreaseNodeGroupsInGlobalReplicationGroupCommand,
      DecreaseReplicaCountCommand: DecreaseReplicaCountCommand_1.DecreaseReplicaCountCommand,
      DeleteCacheClusterCommand: DeleteCacheClusterCommand_1.DeleteCacheClusterCommand,
      DeleteCacheParameterGroupCommand: DeleteCacheParameterGroupCommand_1.DeleteCacheParameterGroupCommand,
      DeleteCacheSecurityGroupCommand: DeleteCacheSecurityGroupCommand_1.DeleteCacheSecurityGroupCommand,
      DeleteCacheSubnetGroupCommand: DeleteCacheSubnetGroupCommand_1.DeleteCacheSubnetGroupCommand,
      DeleteGlobalReplicationGroupCommand: DeleteGlobalReplicationGroupCommand_1.DeleteGlobalReplicationGroupCommand,
      DeleteReplicationGroupCommand: DeleteReplicationGroupCommand_1.DeleteReplicationGroupCommand,
      DeleteSnapshotCommand: DeleteSnapshotCommand_1.DeleteSnapshotCommand,
      DeleteUserCommand: DeleteUserCommand_1.DeleteUserCommand,
      DeleteUserGroupCommand: DeleteUserGroupCommand_1.DeleteUserGroupCommand,
      DescribeCacheClustersCommand: DescribeCacheClustersCommand_1.DescribeCacheClustersCommand,
      DescribeCacheEngineVersionsCommand: DescribeCacheEngineVersionsCommand_1.DescribeCacheEngineVersionsCommand,
      DescribeCacheParameterGroupsCommand: DescribeCacheParameterGroupsCommand_1.DescribeCacheParameterGroupsCommand,
      DescribeCacheParametersCommand: DescribeCacheParametersCommand_1.DescribeCacheParametersCommand,
      DescribeCacheSecurityGroupsCommand: DescribeCacheSecurityGroupsCommand_1.DescribeCacheSecurityGroupsCommand,
      DescribeCacheSubnetGroupsCommand: DescribeCacheSubnetGroupsCommand_1.DescribeCacheSubnetGroupsCommand,
      DescribeEngineDefaultParametersCommand: DescribeEngineDefaultParametersCommand_1.DescribeEngineDefaultParametersCommand,
      DescribeEventsCommand: DescribeEventsCommand_1.DescribeEventsCommand,
      DescribeGlobalReplicationGroupsCommand: DescribeGlobalReplicationGroupsCommand_1.DescribeGlobalReplicationGroupsCommand,
      DescribeReplicationGroupsCommand: DescribeReplicationGroupsCommand_1.DescribeReplicationGroupsCommand,
      DescribeReservedCacheNodesCommand: DescribeReservedCacheNodesCommand_1.DescribeReservedCacheNodesCommand,
      DescribeReservedCacheNodesOfferingsCommand: DescribeReservedCacheNodesOfferingsCommand_1.DescribeReservedCacheNodesOfferingsCommand,
      DescribeServiceUpdatesCommand: DescribeServiceUpdatesCommand_1.DescribeServiceUpdatesCommand,
      DescribeSnapshotsCommand: DescribeSnapshotsCommand_1.DescribeSnapshotsCommand,
      DescribeUpdateActionsCommand: DescribeUpdateActionsCommand_1.DescribeUpdateActionsCommand,
      DescribeUserGroupsCommand: DescribeUserGroupsCommand_1.DescribeUserGroupsCommand,
      DescribeUsersCommand: DescribeUsersCommand_1.DescribeUsersCommand,
      DisassociateGlobalReplicationGroupCommand: DisassociateGlobalReplicationGroupCommand_1.DisassociateGlobalReplicationGroupCommand,
      FailoverGlobalReplicationGroupCommand: FailoverGlobalReplicationGroupCommand_1.FailoverGlobalReplicationGroupCommand,
      IncreaseNodeGroupsInGlobalReplicationGroupCommand: IncreaseNodeGroupsInGlobalReplicationGroupCommand_1.IncreaseNodeGroupsInGlobalReplicationGroupCommand,
      IncreaseReplicaCountCommand: IncreaseReplicaCountCommand_1.IncreaseReplicaCountCommand,
      ListAllowedNodeTypeModificationsCommand: ListAllowedNodeTypeModificationsCommand_1.ListAllowedNodeTypeModificationsCommand,
      ListTagsForResourceCommand: ListTagsForResourceCommand_1.ListTagsForResourceCommand,
      ModifyCacheClusterCommand: ModifyCacheClusterCommand_1.ModifyCacheClusterCommand,
      ModifyCacheParameterGroupCommand: ModifyCacheParameterGroupCommand_1.ModifyCacheParameterGroupCommand,
      ModifyCacheSubnetGroupCommand: ModifyCacheSubnetGroupCommand_1.ModifyCacheSubnetGroupCommand,
      ModifyGlobalReplicationGroupCommand: ModifyGlobalReplicationGroupCommand_1.ModifyGlobalReplicationGroupCommand,
      ModifyReplicationGroupCommand: ModifyReplicationGroupCommand_1.ModifyReplicationGroupCommand,
      ModifyReplicationGroupShardConfigurationCommand: ModifyReplicationGroupShardConfigurationCommand_1.ModifyReplicationGroupShardConfigurationCommand,
      ModifyUserCommand: ModifyUserCommand_1.ModifyUserCommand,
      ModifyUserGroupCommand: ModifyUserGroupCommand_1.ModifyUserGroupCommand,
      PurchaseReservedCacheNodesOfferingCommand: PurchaseReservedCacheNodesOfferingCommand_1.PurchaseReservedCacheNodesOfferingCommand,
      RebalanceSlotsInGlobalReplicationGroupCommand: RebalanceSlotsInGlobalReplicationGroupCommand_1.RebalanceSlotsInGlobalReplicationGroupCommand,
      RebootCacheClusterCommand: RebootCacheClusterCommand_1.RebootCacheClusterCommand,
      RemoveTagsFromResourceCommand: RemoveTagsFromResourceCommand_1.RemoveTagsFromResourceCommand,
      ResetCacheParameterGroupCommand: ResetCacheParameterGroupCommand_1.ResetCacheParameterGroupCommand,
      RevokeCacheSecurityGroupIngressCommand: RevokeCacheSecurityGroupIngressCommand_1.RevokeCacheSecurityGroupIngressCommand,
      StartMigrationCommand: StartMigrationCommand_1.StartMigrationCommand,
      TestFailoverCommand: TestFailoverCommand_1.TestFailoverCommand,
      TestMigrationCommand: TestMigrationCommand_1.TestMigrationCommand
    };
    var ElastiCache = class extends ElastiCacheClient_1.ElastiCacheClient {
    };
    exports2.ElastiCache = ElastiCache;
    (0, smithy_client_1.createAggregatedClient)(commands, ElastiCache);
  }
});

var require_commands3 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/commands/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AddTagsToResourceCommand(), exports2);
    tslib_1.__exportStar(require_AuthorizeCacheSecurityGroupIngressCommand(), exports2);
    tslib_1.__exportStar(require_BatchApplyUpdateActionCommand(), exports2);
    tslib_1.__exportStar(require_BatchStopUpdateActionCommand(), exports2);
    tslib_1.__exportStar(require_CompleteMigrationCommand(), exports2);
    tslib_1.__exportStar(require_CopySnapshotCommand(), exports2);
    tslib_1.__exportStar(require_CreateCacheClusterCommand(), exports2);
    tslib_1.__exportStar(require_CreateCacheParameterGroupCommand(), exports2);
    tslib_1.__exportStar(require_CreateCacheSecurityGroupCommand(), exports2);
    tslib_1.__exportStar(require_CreateCacheSubnetGroupCommand(), exports2);
    tslib_1.__exportStar(require_CreateGlobalReplicationGroupCommand(), exports2);
    tslib_1.__exportStar(require_CreateReplicationGroupCommand(), exports2);
    tslib_1.__exportStar(require_CreateSnapshotCommand(), exports2);
    tslib_1.__exportStar(require_CreateUserCommand(), exports2);
    tslib_1.__exportStar(require_CreateUserGroupCommand(), exports2);
    tslib_1.__exportStar(require_DecreaseNodeGroupsInGlobalReplicationGroupCommand(), exports2);
    tslib_1.__exportStar(require_DecreaseReplicaCountCommand(), exports2);
    tslib_1.__exportStar(require_DeleteCacheClusterCommand(), exports2);
    tslib_1.__exportStar(require_DeleteCacheParameterGroupCommand(), exports2);
    tslib_1.__exportStar(require_DeleteCacheSecurityGroupCommand(), exports2);
    tslib_1.__exportStar(require_DeleteCacheSubnetGroupCommand(), exports2);
    tslib_1.__exportStar(require_DeleteGlobalReplicationGroupCommand(), exports2);
    tslib_1.__exportStar(require_DeleteReplicationGroupCommand(), exports2);
    tslib_1.__exportStar(require_DeleteSnapshotCommand(), exports2);
    tslib_1.__exportStar(require_DeleteUserCommand(), exports2);
    tslib_1.__exportStar(require_DeleteUserGroupCommand(), exports2);
    tslib_1.__exportStar(require_DescribeCacheClustersCommand(), exports2);
    tslib_1.__exportStar(require_DescribeCacheEngineVersionsCommand(), exports2);
    tslib_1.__exportStar(require_DescribeCacheParameterGroupsCommand(), exports2);
    tslib_1.__exportStar(require_DescribeCacheParametersCommand(), exports2);
    tslib_1.__exportStar(require_DescribeCacheSecurityGroupsCommand(), exports2);
    tslib_1.__exportStar(require_DescribeCacheSubnetGroupsCommand(), exports2);
    tslib_1.__exportStar(require_DescribeEngineDefaultParametersCommand(), exports2);
    tslib_1.__exportStar(require_DescribeEventsCommand(), exports2);
    tslib_1.__exportStar(require_DescribeGlobalReplicationGroupsCommand(), exports2);
    tslib_1.__exportStar(require_DescribeReplicationGroupsCommand(), exports2);
    tslib_1.__exportStar(require_DescribeReservedCacheNodesCommand(), exports2);
    tslib_1.__exportStar(require_DescribeReservedCacheNodesOfferingsCommand(), exports2);
    tslib_1.__exportStar(require_DescribeServiceUpdatesCommand(), exports2);
    tslib_1.__exportStar(require_DescribeSnapshotsCommand(), exports2);
    tslib_1.__exportStar(require_DescribeUpdateActionsCommand(), exports2);
    tslib_1.__exportStar(require_DescribeUserGroupsCommand(), exports2);
    tslib_1.__exportStar(require_DescribeUsersCommand(), exports2);
    tslib_1.__exportStar(require_DisassociateGlobalReplicationGroupCommand(), exports2);
    tslib_1.__exportStar(require_FailoverGlobalReplicationGroupCommand(), exports2);
    tslib_1.__exportStar(require_IncreaseNodeGroupsInGlobalReplicationGroupCommand(), exports2);
    tslib_1.__exportStar(require_IncreaseReplicaCountCommand(), exports2);
    tslib_1.__exportStar(require_ListAllowedNodeTypeModificationsCommand(), exports2);
    tslib_1.__exportStar(require_ListTagsForResourceCommand(), exports2);
    tslib_1.__exportStar(require_ModifyCacheClusterCommand(), exports2);
    tslib_1.__exportStar(require_ModifyCacheParameterGroupCommand(), exports2);
    tslib_1.__exportStar(require_ModifyCacheSubnetGroupCommand(), exports2);
    tslib_1.__exportStar(require_ModifyGlobalReplicationGroupCommand(), exports2);
    tslib_1.__exportStar(require_ModifyReplicationGroupCommand(), exports2);
    tslib_1.__exportStar(require_ModifyReplicationGroupShardConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_ModifyUserCommand(), exports2);
    tslib_1.__exportStar(require_ModifyUserGroupCommand(), exports2);
    tslib_1.__exportStar(require_PurchaseReservedCacheNodesOfferingCommand(), exports2);
    tslib_1.__exportStar(require_RebalanceSlotsInGlobalReplicationGroupCommand(), exports2);
    tslib_1.__exportStar(require_RebootCacheClusterCommand(), exports2);
    tslib_1.__exportStar(require_RemoveTagsFromResourceCommand(), exports2);
    tslib_1.__exportStar(require_ResetCacheParameterGroupCommand(), exports2);
    tslib_1.__exportStar(require_RevokeCacheSecurityGroupIngressCommand(), exports2);
    tslib_1.__exportStar(require_StartMigrationCommand(), exports2);
    tslib_1.__exportStar(require_TestFailoverCommand(), exports2);
    tslib_1.__exportStar(require_TestMigrationCommand(), exports2);
  }
});

var require_DescribeCacheClustersPaginator = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/pagination/DescribeCacheClustersPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateDescribeCacheClusters = void 0;
    var DescribeCacheClustersCommand_1 = require_DescribeCacheClustersCommand();
    var ElastiCacheClient_1 = require_ElastiCacheClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeCacheClustersCommand_1.DescribeCacheClustersCommand(input), ...args);
    };
    async function* paginateDescribeCacheClusters(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof ElastiCacheClient_1.ElastiCacheClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ElastiCache | ElastiCacheClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateDescribeCacheClusters = paginateDescribeCacheClusters;
  }
});

var require_DescribeCacheEngineVersionsPaginator = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/pagination/DescribeCacheEngineVersionsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateDescribeCacheEngineVersions = void 0;
    var DescribeCacheEngineVersionsCommand_1 = require_DescribeCacheEngineVersionsCommand();
    var ElastiCacheClient_1 = require_ElastiCacheClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeCacheEngineVersionsCommand_1.DescribeCacheEngineVersionsCommand(input), ...args);
    };
    async function* paginateDescribeCacheEngineVersions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof ElastiCacheClient_1.ElastiCacheClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ElastiCache | ElastiCacheClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateDescribeCacheEngineVersions = paginateDescribeCacheEngineVersions;
  }
});

var require_DescribeCacheParameterGroupsPaginator = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/pagination/DescribeCacheParameterGroupsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateDescribeCacheParameterGroups = void 0;
    var DescribeCacheParameterGroupsCommand_1 = require_DescribeCacheParameterGroupsCommand();
    var ElastiCacheClient_1 = require_ElastiCacheClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeCacheParameterGroupsCommand_1.DescribeCacheParameterGroupsCommand(input), ...args);
    };
    async function* paginateDescribeCacheParameterGroups(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof ElastiCacheClient_1.ElastiCacheClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ElastiCache | ElastiCacheClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateDescribeCacheParameterGroups = paginateDescribeCacheParameterGroups;
  }
});

var require_DescribeCacheParametersPaginator = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/pagination/DescribeCacheParametersPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateDescribeCacheParameters = void 0;
    var DescribeCacheParametersCommand_1 = require_DescribeCacheParametersCommand();
    var ElastiCacheClient_1 = require_ElastiCacheClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeCacheParametersCommand_1.DescribeCacheParametersCommand(input), ...args);
    };
    async function* paginateDescribeCacheParameters(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof ElastiCacheClient_1.ElastiCacheClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ElastiCache | ElastiCacheClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateDescribeCacheParameters = paginateDescribeCacheParameters;
  }
});

var require_DescribeCacheSecurityGroupsPaginator = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/pagination/DescribeCacheSecurityGroupsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateDescribeCacheSecurityGroups = void 0;
    var DescribeCacheSecurityGroupsCommand_1 = require_DescribeCacheSecurityGroupsCommand();
    var ElastiCacheClient_1 = require_ElastiCacheClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeCacheSecurityGroupsCommand_1.DescribeCacheSecurityGroupsCommand(input), ...args);
    };
    async function* paginateDescribeCacheSecurityGroups(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof ElastiCacheClient_1.ElastiCacheClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ElastiCache | ElastiCacheClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateDescribeCacheSecurityGroups = paginateDescribeCacheSecurityGroups;
  }
});

var require_DescribeCacheSubnetGroupsPaginator = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/pagination/DescribeCacheSubnetGroupsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateDescribeCacheSubnetGroups = void 0;
    var DescribeCacheSubnetGroupsCommand_1 = require_DescribeCacheSubnetGroupsCommand();
    var ElastiCacheClient_1 = require_ElastiCacheClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeCacheSubnetGroupsCommand_1.DescribeCacheSubnetGroupsCommand(input), ...args);
    };
    async function* paginateDescribeCacheSubnetGroups(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof ElastiCacheClient_1.ElastiCacheClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ElastiCache | ElastiCacheClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateDescribeCacheSubnetGroups = paginateDescribeCacheSubnetGroups;
  }
});

var require_DescribeEngineDefaultParametersPaginator = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/pagination/DescribeEngineDefaultParametersPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateDescribeEngineDefaultParameters = void 0;
    var DescribeEngineDefaultParametersCommand_1 = require_DescribeEngineDefaultParametersCommand();
    var ElastiCacheClient_1 = require_ElastiCacheClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeEngineDefaultParametersCommand_1.DescribeEngineDefaultParametersCommand(input), ...args);
    };
    async function* paginateDescribeEngineDefaultParameters(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof ElastiCacheClient_1.ElastiCacheClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ElastiCache | ElastiCacheClient");
        }
        yield page;
        const prevToken = token;
        token = page.EngineDefaults.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateDescribeEngineDefaultParameters = paginateDescribeEngineDefaultParameters;
  }
});

var require_DescribeEventsPaginator = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/pagination/DescribeEventsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateDescribeEvents = void 0;
    var DescribeEventsCommand_1 = require_DescribeEventsCommand();
    var ElastiCacheClient_1 = require_ElastiCacheClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeEventsCommand_1.DescribeEventsCommand(input), ...args);
    };
    async function* paginateDescribeEvents(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof ElastiCacheClient_1.ElastiCacheClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ElastiCache | ElastiCacheClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateDescribeEvents = paginateDescribeEvents;
  }
});

var require_DescribeGlobalReplicationGroupsPaginator = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/pagination/DescribeGlobalReplicationGroupsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateDescribeGlobalReplicationGroups = void 0;
    var DescribeGlobalReplicationGroupsCommand_1 = require_DescribeGlobalReplicationGroupsCommand();
    var ElastiCacheClient_1 = require_ElastiCacheClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeGlobalReplicationGroupsCommand_1.DescribeGlobalReplicationGroupsCommand(input), ...args);
    };
    async function* paginateDescribeGlobalReplicationGroups(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof ElastiCacheClient_1.ElastiCacheClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ElastiCache | ElastiCacheClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateDescribeGlobalReplicationGroups = paginateDescribeGlobalReplicationGroups;
  }
});

var require_DescribeReplicationGroupsPaginator = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/pagination/DescribeReplicationGroupsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateDescribeReplicationGroups = void 0;
    var DescribeReplicationGroupsCommand_1 = require_DescribeReplicationGroupsCommand();
    var ElastiCacheClient_1 = require_ElastiCacheClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeReplicationGroupsCommand_1.DescribeReplicationGroupsCommand(input), ...args);
    };
    async function* paginateDescribeReplicationGroups(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof ElastiCacheClient_1.ElastiCacheClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ElastiCache | ElastiCacheClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateDescribeReplicationGroups = paginateDescribeReplicationGroups;
  }
});

var require_Interfaces2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/pagination/Interfaces.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_DescribeReservedCacheNodesOfferingsPaginator = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/pagination/DescribeReservedCacheNodesOfferingsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateDescribeReservedCacheNodesOfferings = void 0;
    var DescribeReservedCacheNodesOfferingsCommand_1 = require_DescribeReservedCacheNodesOfferingsCommand();
    var ElastiCacheClient_1 = require_ElastiCacheClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeReservedCacheNodesOfferingsCommand_1.DescribeReservedCacheNodesOfferingsCommand(input), ...args);
    };
    async function* paginateDescribeReservedCacheNodesOfferings(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof ElastiCacheClient_1.ElastiCacheClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ElastiCache | ElastiCacheClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateDescribeReservedCacheNodesOfferings = paginateDescribeReservedCacheNodesOfferings;
  }
});

var require_DescribeReservedCacheNodesPaginator = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/pagination/DescribeReservedCacheNodesPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateDescribeReservedCacheNodes = void 0;
    var DescribeReservedCacheNodesCommand_1 = require_DescribeReservedCacheNodesCommand();
    var ElastiCacheClient_1 = require_ElastiCacheClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeReservedCacheNodesCommand_1.DescribeReservedCacheNodesCommand(input), ...args);
    };
    async function* paginateDescribeReservedCacheNodes(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof ElastiCacheClient_1.ElastiCacheClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ElastiCache | ElastiCacheClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateDescribeReservedCacheNodes = paginateDescribeReservedCacheNodes;
  }
});

var require_DescribeServiceUpdatesPaginator = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/pagination/DescribeServiceUpdatesPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateDescribeServiceUpdates = void 0;
    var DescribeServiceUpdatesCommand_1 = require_DescribeServiceUpdatesCommand();
    var ElastiCacheClient_1 = require_ElastiCacheClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeServiceUpdatesCommand_1.DescribeServiceUpdatesCommand(input), ...args);
    };
    async function* paginateDescribeServiceUpdates(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof ElastiCacheClient_1.ElastiCacheClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ElastiCache | ElastiCacheClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateDescribeServiceUpdates = paginateDescribeServiceUpdates;
  }
});

var require_DescribeSnapshotsPaginator = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/pagination/DescribeSnapshotsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateDescribeSnapshots = void 0;
    var DescribeSnapshotsCommand_1 = require_DescribeSnapshotsCommand();
    var ElastiCacheClient_1 = require_ElastiCacheClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeSnapshotsCommand_1.DescribeSnapshotsCommand(input), ...args);
    };
    async function* paginateDescribeSnapshots(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof ElastiCacheClient_1.ElastiCacheClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ElastiCache | ElastiCacheClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateDescribeSnapshots = paginateDescribeSnapshots;
  }
});

var require_DescribeUpdateActionsPaginator = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/pagination/DescribeUpdateActionsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateDescribeUpdateActions = void 0;
    var DescribeUpdateActionsCommand_1 = require_DescribeUpdateActionsCommand();
    var ElastiCacheClient_1 = require_ElastiCacheClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeUpdateActionsCommand_1.DescribeUpdateActionsCommand(input), ...args);
    };
    async function* paginateDescribeUpdateActions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof ElastiCacheClient_1.ElastiCacheClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ElastiCache | ElastiCacheClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateDescribeUpdateActions = paginateDescribeUpdateActions;
  }
});

var require_DescribeUserGroupsPaginator = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/pagination/DescribeUserGroupsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateDescribeUserGroups = void 0;
    var DescribeUserGroupsCommand_1 = require_DescribeUserGroupsCommand();
    var ElastiCacheClient_1 = require_ElastiCacheClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeUserGroupsCommand_1.DescribeUserGroupsCommand(input), ...args);
    };
    async function* paginateDescribeUserGroups(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof ElastiCacheClient_1.ElastiCacheClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ElastiCache | ElastiCacheClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateDescribeUserGroups = paginateDescribeUserGroups;
  }
});

var require_DescribeUsersPaginator = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/pagination/DescribeUsersPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateDescribeUsers = void 0;
    var DescribeUsersCommand_1 = require_DescribeUsersCommand();
    var ElastiCacheClient_1 = require_ElastiCacheClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeUsersCommand_1.DescribeUsersCommand(input), ...args);
    };
    async function* paginateDescribeUsers(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxRecords"] = config.pageSize;
        if (config.client instanceof ElastiCacheClient_1.ElastiCacheClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ElastiCache | ElastiCacheClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateDescribeUsers = paginateDescribeUsers;
  }
});

var require_pagination4 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/pagination/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_DescribeCacheClustersPaginator(), exports2);
    tslib_1.__exportStar(require_DescribeCacheEngineVersionsPaginator(), exports2);
    tslib_1.__exportStar(require_DescribeCacheParameterGroupsPaginator(), exports2);
    tslib_1.__exportStar(require_DescribeCacheParametersPaginator(), exports2);
    tslib_1.__exportStar(require_DescribeCacheSecurityGroupsPaginator(), exports2);
    tslib_1.__exportStar(require_DescribeCacheSubnetGroupsPaginator(), exports2);
    tslib_1.__exportStar(require_DescribeEngineDefaultParametersPaginator(), exports2);
    tslib_1.__exportStar(require_DescribeEventsPaginator(), exports2);
    tslib_1.__exportStar(require_DescribeGlobalReplicationGroupsPaginator(), exports2);
    tslib_1.__exportStar(require_DescribeReplicationGroupsPaginator(), exports2);
    tslib_1.__exportStar(require_Interfaces2(), exports2);
    tslib_1.__exportStar(require_DescribeReservedCacheNodesOfferingsPaginator(), exports2);
    tslib_1.__exportStar(require_DescribeReservedCacheNodesPaginator(), exports2);
    tslib_1.__exportStar(require_DescribeServiceUpdatesPaginator(), exports2);
    tslib_1.__exportStar(require_DescribeSnapshotsPaginator(), exports2);
    tslib_1.__exportStar(require_DescribeUpdateActionsPaginator(), exports2);
    tslib_1.__exportStar(require_DescribeUserGroupsPaginator(), exports2);
    tslib_1.__exportStar(require_DescribeUsersPaginator(), exports2);
  }
});

var require_sleep = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-waiter/dist-cjs/utils/sleep.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sleep = void 0;
    var sleep = (seconds) => {
      return new Promise((resolve) => setTimeout(resolve, seconds * 1e3));
    };
    exports2.sleep = sleep;
  }
});

var require_waiter3 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-waiter/dist-cjs/waiter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.checkExceptions = exports2.WaiterState = exports2.waiterServiceDefaults = void 0;
    exports2.waiterServiceDefaults = {
      minDelay: 2,
      maxDelay: 120
    };
    var WaiterState;
    (function(WaiterState2) {
      WaiterState2["ABORTED"] = "ABORTED";
      WaiterState2["FAILURE"] = "FAILURE";
      WaiterState2["SUCCESS"] = "SUCCESS";
      WaiterState2["RETRY"] = "RETRY";
      WaiterState2["TIMEOUT"] = "TIMEOUT";
    })(WaiterState = exports2.WaiterState || (exports2.WaiterState = {}));
    var checkExceptions = (result) => {
      if (result.state === WaiterState.ABORTED) {
        const abortError = new Error(`${JSON.stringify({
          ...result,
          reason: "Request was aborted"
        })}`);
        abortError.name = "AbortError";
        throw abortError;
      } else if (result.state === WaiterState.TIMEOUT) {
        const timeoutError = new Error(`${JSON.stringify({
          ...result,
          reason: "Waiter has timed out"
        })}`);
        timeoutError.name = "TimeoutError";
        throw timeoutError;
      } else if (result.state !== WaiterState.SUCCESS) {
        throw new Error(`${JSON.stringify({ result })}`);
      }
      return result;
    };
    exports2.checkExceptions = checkExceptions;
  }
});

var require_poller = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-waiter/dist-cjs/poller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.runPolling = void 0;
    var sleep_1 = require_sleep();
    var waiter_1 = require_waiter3();
    var exponentialBackoffWithJitter = (minDelay, maxDelay, attemptCeiling, attempt) => {
      if (attempt > attemptCeiling)
        return maxDelay;
      const delay = minDelay * 2 ** (attempt - 1);
      return randomInRange(minDelay, delay);
    };
    var randomInRange = (min, max) => min + Math.random() * (max - min);
    var runPolling = async ({ minDelay, maxDelay, maxWaitTime, abortController, client, abortSignal }, input, acceptorChecks) => {
      var _a;
      const { state, reason } = await acceptorChecks(client, input);
      if (state !== waiter_1.WaiterState.RETRY) {
        return { state, reason };
      }
      let currentAttempt = 1;
      const waitUntil = Date.now() + maxWaitTime * 1e3;
      const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;
      while (true) {
        if (((_a = abortController === null || abortController === void 0 ? void 0 : abortController.signal) === null || _a === void 0 ? void 0 : _a.aborted) || (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted)) {
          return { state: waiter_1.WaiterState.ABORTED };
        }
        const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);
        if (Date.now() + delay * 1e3 > waitUntil) {
          return { state: waiter_1.WaiterState.TIMEOUT };
        }
        await (0, sleep_1.sleep)(delay);
        const { state: state2, reason: reason2 } = await acceptorChecks(client, input);
        if (state2 !== waiter_1.WaiterState.RETRY) {
          return { state: state2, reason: reason2 };
        }
        currentAttempt += 1;
      }
    };
    exports2.runPolling = runPolling;
  }
});

var require_validate = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-waiter/dist-cjs/utils/validate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateWaiterOptions = void 0;
    var validateWaiterOptions = (options) => {
      if (options.maxWaitTime < 1) {
        throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);
      } else if (options.minDelay < 1) {
        throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);
      } else if (options.maxDelay < 1) {
        throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);
      } else if (options.maxWaitTime <= options.minDelay) {
        throw new Error(`WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
      } else if (options.maxDelay < options.minDelay) {
        throw new Error(`WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
      }
    };
    exports2.validateWaiterOptions = validateWaiterOptions;
  }
});

var require_utils2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-waiter/dist-cjs/utils/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_sleep(), exports2);
    tslib_1.__exportStar(require_validate(), exports2);
  }
});

var require_createWaiter = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-waiter/dist-cjs/createWaiter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createWaiter = void 0;
    var poller_1 = require_poller();
    var utils_1 = require_utils2();
    var waiter_1 = require_waiter3();
    var abortTimeout = async (abortSignal) => {
      return new Promise((resolve) => {
        abortSignal.onabort = () => resolve({ state: waiter_1.WaiterState.ABORTED });
      });
    };
    var createWaiter = async (options, input, acceptorChecks) => {
      const params = {
        ...waiter_1.waiterServiceDefaults,
        ...options
      };
      (0, utils_1.validateWaiterOptions)(params);
      const exitConditions = [(0, poller_1.runPolling)(params, input, acceptorChecks)];
      if (options.abortController) {
        exitConditions.push(abortTimeout(options.abortController.signal));
      }
      if (options.abortSignal) {
        exitConditions.push(abortTimeout(options.abortSignal));
      }
      return Promise.race(exitConditions);
    };
    exports2.createWaiter = createWaiter;
  }
});

var require_dist_cjs53 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@smithy/util-waiter/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_createWaiter(), exports2);
    tslib_1.__exportStar(require_waiter3(), exports2);
  }
});

var require_waitForCacheClusterAvailable = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/waiters/waitForCacheClusterAvailable.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.waitUntilCacheClusterAvailable = exports2.waitForCacheClusterAvailable = void 0;
    var util_waiter_1 = require_dist_cjs53();
    var DescribeCacheClustersCommand_1 = require_DescribeCacheClustersCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeCacheClustersCommand_1.DescribeCacheClustersCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.CacheClusters);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.CacheClusterStatus;
            });
            return projection_3;
          };
          let allStringEq_5 = returnComparator().length > 0;
          for (const element_4 of returnComparator()) {
            allStringEq_5 = allStringEq_5 && element_4 == "available";
          }
          if (allStringEq_5) {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.CacheClusters);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.CacheClusterStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "deleted") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.CacheClusters);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.CacheClusterStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "deleting") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.CacheClusters);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.CacheClusterStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "incompatible-network") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.CacheClusters);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.CacheClusterStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "restore-failed") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForCacheClusterAvailable = async (params, input) => {
      const serviceDefaults = { minDelay: 15, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports2.waitForCacheClusterAvailable = waitForCacheClusterAvailable;
    var waitUntilCacheClusterAvailable = async (params, input) => {
      const serviceDefaults = { minDelay: 15, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports2.waitUntilCacheClusterAvailable = waitUntilCacheClusterAvailable;
  }
});

var require_waitForCacheClusterDeleted = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/waiters/waitForCacheClusterDeleted.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.waitUntilCacheClusterDeleted = exports2.waitForCacheClusterDeleted = void 0;
    var util_waiter_1 = require_dist_cjs53();
    var DescribeCacheClustersCommand_1 = require_DescribeCacheClustersCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeCacheClustersCommand_1.DescribeCacheClustersCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.CacheClusters);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.CacheClusterStatus;
            });
            return projection_3;
          };
          let allStringEq_5 = returnComparator().length > 0;
          for (const element_4 of returnComparator()) {
            allStringEq_5 = allStringEq_5 && element_4 == "deleted";
          }
          if (allStringEq_5) {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.CacheClusters);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.CacheClusterStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "available") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.CacheClusters);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.CacheClusterStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "creating") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.CacheClusters);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.CacheClusterStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "incompatible-network") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.CacheClusters);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.CacheClusterStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "modifying") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.CacheClusters);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.CacheClusterStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "restore-failed") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.CacheClusters);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.CacheClusterStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "snapshotting") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "CacheClusterNotFound") {
          return { state: util_waiter_1.WaiterState.SUCCESS, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForCacheClusterDeleted = async (params, input) => {
      const serviceDefaults = { minDelay: 15, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports2.waitForCacheClusterDeleted = waitForCacheClusterDeleted;
    var waitUntilCacheClusterDeleted = async (params, input) => {
      const serviceDefaults = { minDelay: 15, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports2.waitUntilCacheClusterDeleted = waitUntilCacheClusterDeleted;
  }
});

var require_waitForReplicationGroupAvailable = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/waiters/waitForReplicationGroupAvailable.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.waitUntilReplicationGroupAvailable = exports2.waitForReplicationGroupAvailable = void 0;
    var util_waiter_1 = require_dist_cjs53();
    var DescribeReplicationGroupsCommand_1 = require_DescribeReplicationGroupsCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeReplicationGroupsCommand_1.DescribeReplicationGroupsCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.ReplicationGroups);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          let allStringEq_5 = returnComparator().length > 0;
          for (const element_4 of returnComparator()) {
            allStringEq_5 = allStringEq_5 && element_4 == "available";
          }
          if (allStringEq_5) {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.ReplicationGroups);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "deleted") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForReplicationGroupAvailable = async (params, input) => {
      const serviceDefaults = { minDelay: 15, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports2.waitForReplicationGroupAvailable = waitForReplicationGroupAvailable;
    var waitUntilReplicationGroupAvailable = async (params, input) => {
      const serviceDefaults = { minDelay: 15, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports2.waitUntilReplicationGroupAvailable = waitUntilReplicationGroupAvailable;
  }
});

var require_waitForReplicationGroupDeleted = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/waiters/waitForReplicationGroupDeleted.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.waitUntilReplicationGroupDeleted = exports2.waitForReplicationGroupDeleted = void 0;
    var util_waiter_1 = require_dist_cjs53();
    var DescribeReplicationGroupsCommand_1 = require_DescribeReplicationGroupsCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeReplicationGroupsCommand_1.DescribeReplicationGroupsCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.ReplicationGroups);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          let allStringEq_5 = returnComparator().length > 0;
          for (const element_4 of returnComparator()) {
            allStringEq_5 = allStringEq_5 && element_4 == "deleted";
          }
          if (allStringEq_5) {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.ReplicationGroups);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.Status;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "available") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ReplicationGroupNotFoundFault") {
          return { state: util_waiter_1.WaiterState.SUCCESS, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForReplicationGroupDeleted = async (params, input) => {
      const serviceDefaults = { minDelay: 15, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports2.waitForReplicationGroupDeleted = waitForReplicationGroupDeleted;
    var waitUntilReplicationGroupDeleted = async (params, input) => {
      const serviceDefaults = { minDelay: 15, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports2.waitUntilReplicationGroupDeleted = waitUntilReplicationGroupDeleted;
  }
});

var require_waiters = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/waiters/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_waitForCacheClusterAvailable(), exports2);
    tslib_1.__exportStar(require_waitForCacheClusterDeleted(), exports2);
    tslib_1.__exportStar(require_waitForReplicationGroupAvailable(), exports2);
    tslib_1.__exportStar(require_waitForReplicationGroupDeleted(), exports2);
  }
});

var require_models3 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/models/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_03(), exports2);
  }
});

var require_dist_cjs54 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-elasticache/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ElastiCacheServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_ElastiCacheClient(), exports2);
    tslib_1.__exportStar(require_ElastiCache(), exports2);
    tslib_1.__exportStar(require_commands3(), exports2);
    tslib_1.__exportStar(require_pagination4(), exports2);
    tslib_1.__exportStar(require_waiters(), exports2);
    tslib_1.__exportStar(require_models3(), exports2);
    var ElastiCacheServiceException_1 = require_ElastiCacheServiceException();
    Object.defineProperty(exports2, "ElastiCacheServiceException", { enumerable: true, get: function() {
      return ElastiCacheServiceException_1.ElastiCacheServiceException;
    } });
  }
});

var require_redis = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/ex/redis.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RedisClientBase = exports2.RedisInflightMethods = exports2.Redis = exports2.REDIS_FQN = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var constants_1 = require_constants();
    var core_1 = require_core();
    var std_1 = require_std();
    exports2.REDIS_FQN = (0, constants_1.fqnForType)("ex.Redis");
    var Redis = class extends std_1.Resource {
      /**
       * Create a new redis.
       * @internal
       */
      static _newRedis(scope, id) {
        return core_1.App.of(scope).newAbstract(exports2.REDIS_FQN, scope, id);
      }
      constructor(scope, id) {
        super(scope, id);
        std_1.Node.of(this).title = "Redis";
        std_1.Node.of(this).description = "A Redis server";
      }
      /** @internal */
      _getInflightOps() {
        return [
          RedisInflightMethods.RAW_CLIENT,
          RedisInflightMethods.URL,
          RedisInflightMethods.SET,
          RedisInflightMethods.GET,
          RedisInflightMethods.HSET,
          RedisInflightMethods.HGET,
          RedisInflightMethods.SADD,
          RedisInflightMethods.SMEMBERS,
          RedisInflightMethods.DEL
        ];
      }
    };
    _a = JSII_RTTI_SYMBOL_1;
    Redis[_a] = { fqn: "@winglang/sdk.ex.Redis", version: "0.0.0" };
    exports2.Redis = Redis;
    var RedisInflightMethods;
    (function(RedisInflightMethods2) {
      RedisInflightMethods2["RAW_CLIENT"] = "rawClient";
      RedisInflightMethods2["URL"] = "url";
      RedisInflightMethods2["SET"] = "set";
      RedisInflightMethods2["GET"] = "get";
      RedisInflightMethods2["HSET"] = "hset";
      RedisInflightMethods2["HGET"] = "hget";
      RedisInflightMethods2["SADD"] = "sadd";
      RedisInflightMethods2["SMEMBERS"] = "smembers";
      RedisInflightMethods2["DEL"] = "del";
    })(RedisInflightMethods = exports2.RedisInflightMethods || (exports2.RedisInflightMethods = {}));
    var RedisClientBase = class {
      async set(key, value) {
        let redis = await this.rawClient();
        await redis.set(key, value);
      }
      async get(key) {
        let redis = await this.rawClient();
        let result = await redis.get(key) ?? void 0;
        return result;
      }
      async hset(key, field, value) {
        const redis = await this.rawClient();
        const result = await redis.hset(key, field, value);
        return result;
      }
      async hget(key, field) {
        const redis = await this.rawClient();
        const result = await redis.hget(key, field);
        return result;
      }
      async sadd(key, value) {
        const redis = await this.rawClient();
        const result = await redis.sadd(key, value);
        return result;
      }
      async smembers(key) {
        const redis = await this.rawClient();
        const result = await redis.smembers(key);
        return result ?? [];
      }
      async del(key) {
        const redis = await this.rawClient();
        const result = await redis.del(key);
        return result;
      }
    };
    _b = JSII_RTTI_SYMBOL_1;
    RedisClientBase[_b] = { fqn: "@winglang/sdk.ex.RedisClientBase", version: "0.0.0" };
    exports2.RedisClientBase = RedisClientBase;
  }
});

var require_table = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/ex/table.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TableInflightMethods = exports2.Table = exports2.ColumnType = exports2.TABLE_FQN = void 0;
    var JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
    var constants_1 = require_constants();
    var core_1 = require_core();
    var std_1 = require_std();
    exports2.TABLE_FQN = (0, constants_1.fqnForType)("ex.Table");
    var ColumnType;
    (function(ColumnType2) {
      ColumnType2[ColumnType2["STRING"] = 0] = "STRING";
      ColumnType2[ColumnType2["NUMBER"] = 1] = "NUMBER";
      ColumnType2[ColumnType2["BOOLEAN"] = 2] = "BOOLEAN";
      ColumnType2[ColumnType2["DATE"] = 3] = "DATE";
      ColumnType2[ColumnType2["JSON"] = 4] = "JSON";
    })(ColumnType = exports2.ColumnType || (exports2.ColumnType = {}));
    var Table = class extends std_1.Resource {
      /**
       * Create a new `Table` instance.
       * @internal
       */
      static _newTable(scope, id, props = {}) {
        return core_1.App.of(scope).newAbstract(exports2.TABLE_FQN, scope, id, props);
      }
      constructor(scope, id, props) {
        super(scope, id);
        std_1.Node.of(this).title = "Table";
        std_1.Node.of(this).description = "A cloud NoSQL database table that can be used to store and query data";
        if (!props.name) {
          throw new Error("Table name is not defined");
        }
        this.name = props.name;
        if (!props.primaryKey) {
          throw new Error("Primary Key is not defined");
        }
        this.primaryKey = props.primaryKey;
        if (!props.columns) {
          throw new Error("No column is defined");
        }
        this.columns = props.columns;
      }
      /** @internal */
      _getInflightOps() {
        return [
          TableInflightMethods.INSERT,
          TableInflightMethods.UPSERT,
          TableInflightMethods.UPDATE,
          TableInflightMethods.DELETE,
          TableInflightMethods.GET,
          TableInflightMethods.TRYGET,
          TableInflightMethods.LIST
        ];
      }
    };
    _a = JSII_RTTI_SYMBOL_1;
    Table[_a] = { fqn: "@winglang/sdk.ex.Table", version: "0.0.0" };
    exports2.Table = Table;
    var TableInflightMethods;
    (function(TableInflightMethods2) {
      TableInflightMethods2["INSERT"] = "insert";
      TableInflightMethods2["UPSERT"] = "upsert";
      TableInflightMethods2["UPDATE"] = "update";
      TableInflightMethods2["DELETE"] = "delete";
      TableInflightMethods2["GET"] = "get";
      TableInflightMethods2["TRYGET"] = "tryGet";
      TableInflightMethods2["LIST"] = "list";
    })(TableInflightMethods = exports2.TableInflightMethods || (exports2.TableInflightMethods = {}));
  }
});

var require_ex = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/ex/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding2(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_redis(), exports2);
    __exportStar2(require_table(), exports2);
  }
});

var require_commands4 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@ioredis/commands/built/commands.json"(exports2, module2) {
    module2.exports = {
      acl: {
        arity: -2,
        flags: [],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      append: {
        arity: 3,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      asking: {
        arity: 1,
        flags: [
          "fast"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      auth: {
        arity: -2,
        flags: [
          "noscript",
          "loading",
          "stale",
          "fast",
          "no_auth",
          "allow_busy"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      bgrewriteaof: {
        arity: 1,
        flags: [
          "admin",
          "noscript",
          "no_async_loading"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      bgsave: {
        arity: -1,
        flags: [
          "admin",
          "noscript",
          "no_async_loading"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      bitcount: {
        arity: -2,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      bitfield: {
        arity: -2,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      bitfield_ro: {
        arity: -2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      bitop: {
        arity: -4,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 2,
        keyStop: -1,
        step: 1
      },
      bitpos: {
        arity: -3,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      blmove: {
        arity: 6,
        flags: [
          "write",
          "denyoom",
          "noscript",
          "blocking"
        ],
        keyStart: 1,
        keyStop: 2,
        step: 1
      },
      blmpop: {
        arity: -5,
        flags: [
          "write",
          "blocking",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      blpop: {
        arity: -3,
        flags: [
          "write",
          "noscript",
          "blocking"
        ],
        keyStart: 1,
        keyStop: -2,
        step: 1
      },
      brpop: {
        arity: -3,
        flags: [
          "write",
          "noscript",
          "blocking"
        ],
        keyStart: 1,
        keyStop: -2,
        step: 1
      },
      brpoplpush: {
        arity: 4,
        flags: [
          "write",
          "denyoom",
          "noscript",
          "blocking"
        ],
        keyStart: 1,
        keyStop: 2,
        step: 1
      },
      bzmpop: {
        arity: -5,
        flags: [
          "write",
          "blocking",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      bzpopmax: {
        arity: -3,
        flags: [
          "write",
          "noscript",
          "blocking",
          "fast"
        ],
        keyStart: 1,
        keyStop: -2,
        step: 1
      },
      bzpopmin: {
        arity: -3,
        flags: [
          "write",
          "noscript",
          "blocking",
          "fast"
        ],
        keyStart: 1,
        keyStop: -2,
        step: 1
      },
      client: {
        arity: -2,
        flags: [],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      cluster: {
        arity: -2,
        flags: [],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      command: {
        arity: -1,
        flags: [
          "loading",
          "stale"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      config: {
        arity: -2,
        flags: [],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      copy: {
        arity: -3,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: 2,
        step: 1
      },
      dbsize: {
        arity: 1,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      debug: {
        arity: -2,
        flags: [
          "admin",
          "noscript",
          "loading",
          "stale"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      decr: {
        arity: 2,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      decrby: {
        arity: 3,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      del: {
        arity: -2,
        flags: [
          "write"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      discard: {
        arity: 1,
        flags: [
          "noscript",
          "loading",
          "stale",
          "fast",
          "allow_busy"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      dump: {
        arity: 2,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      echo: {
        arity: 2,
        flags: [
          "fast"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      eval: {
        arity: -3,
        flags: [
          "noscript",
          "stale",
          "skip_monitor",
          "no_mandatory_keys",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      eval_ro: {
        arity: -3,
        flags: [
          "readonly",
          "noscript",
          "stale",
          "skip_monitor",
          "no_mandatory_keys",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      evalsha: {
        arity: -3,
        flags: [
          "noscript",
          "stale",
          "skip_monitor",
          "no_mandatory_keys",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      evalsha_ro: {
        arity: -3,
        flags: [
          "readonly",
          "noscript",
          "stale",
          "skip_monitor",
          "no_mandatory_keys",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      exec: {
        arity: 1,
        flags: [
          "noscript",
          "loading",
          "stale",
          "skip_slowlog"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      exists: {
        arity: -2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      expire: {
        arity: -3,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      expireat: {
        arity: -3,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      expiretime: {
        arity: 2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      failover: {
        arity: -1,
        flags: [
          "admin",
          "noscript",
          "stale"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      fcall: {
        arity: -3,
        flags: [
          "noscript",
          "stale",
          "skip_monitor",
          "no_mandatory_keys",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      fcall_ro: {
        arity: -3,
        flags: [
          "readonly",
          "noscript",
          "stale",
          "skip_monitor",
          "no_mandatory_keys",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      flushall: {
        arity: -1,
        flags: [
          "write"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      flushdb: {
        arity: -1,
        flags: [
          "write"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      function: {
        arity: -2,
        flags: [],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      geoadd: {
        arity: -5,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      geodist: {
        arity: -4,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      geohash: {
        arity: -2,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      geopos: {
        arity: -2,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      georadius: {
        arity: -6,
        flags: [
          "write",
          "denyoom",
          "movablekeys"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      georadius_ro: {
        arity: -6,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      georadiusbymember: {
        arity: -5,
        flags: [
          "write",
          "denyoom",
          "movablekeys"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      georadiusbymember_ro: {
        arity: -5,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      geosearch: {
        arity: -7,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      geosearchstore: {
        arity: -8,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: 2,
        step: 1
      },
      get: {
        arity: 2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      getbit: {
        arity: 3,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      getdel: {
        arity: 2,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      getex: {
        arity: -2,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      getrange: {
        arity: 4,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      getset: {
        arity: 3,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hdel: {
        arity: -3,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hello: {
        arity: -1,
        flags: [
          "noscript",
          "loading",
          "stale",
          "fast",
          "no_auth",
          "allow_busy"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      hexists: {
        arity: 3,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hget: {
        arity: 3,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hgetall: {
        arity: 2,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hincrby: {
        arity: 4,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hincrbyfloat: {
        arity: 4,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hkeys: {
        arity: 2,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hlen: {
        arity: 2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hmget: {
        arity: -3,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hmset: {
        arity: -4,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hrandfield: {
        arity: -2,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hscan: {
        arity: -3,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hset: {
        arity: -4,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hsetnx: {
        arity: 4,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hstrlen: {
        arity: 3,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      hvals: {
        arity: 2,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      incr: {
        arity: 2,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      incrby: {
        arity: 3,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      incrbyfloat: {
        arity: 3,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      info: {
        arity: -1,
        flags: [
          "loading",
          "stale"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      keys: {
        arity: 2,
        flags: [
          "readonly"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      lastsave: {
        arity: 1,
        flags: [
          "loading",
          "stale",
          "fast"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      latency: {
        arity: -2,
        flags: [],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      lcs: {
        arity: -3,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 2,
        step: 1
      },
      lindex: {
        arity: 3,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      linsert: {
        arity: 5,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      llen: {
        arity: 2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      lmove: {
        arity: 5,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: 2,
        step: 1
      },
      lmpop: {
        arity: -4,
        flags: [
          "write",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      lolwut: {
        arity: -1,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      lpop: {
        arity: -2,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      lpos: {
        arity: -3,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      lpush: {
        arity: -3,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      lpushx: {
        arity: -3,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      lrange: {
        arity: 4,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      lrem: {
        arity: 4,
        flags: [
          "write"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      lset: {
        arity: 4,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      ltrim: {
        arity: 4,
        flags: [
          "write"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      memory: {
        arity: -2,
        flags: [],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      mget: {
        arity: -2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      migrate: {
        arity: -6,
        flags: [
          "write",
          "movablekeys"
        ],
        keyStart: 3,
        keyStop: 3,
        step: 1
      },
      module: {
        arity: -2,
        flags: [],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      monitor: {
        arity: 1,
        flags: [
          "admin",
          "noscript",
          "loading",
          "stale"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      move: {
        arity: 3,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      mset: {
        arity: -3,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 2
      },
      msetnx: {
        arity: -3,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 2
      },
      multi: {
        arity: 1,
        flags: [
          "noscript",
          "loading",
          "stale",
          "fast",
          "allow_busy"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      object: {
        arity: -2,
        flags: [],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      persist: {
        arity: 2,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      pexpire: {
        arity: -3,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      pexpireat: {
        arity: -3,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      pexpiretime: {
        arity: 2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      pfadd: {
        arity: -2,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      pfcount: {
        arity: -2,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      pfdebug: {
        arity: 3,
        flags: [
          "write",
          "denyoom",
          "admin"
        ],
        keyStart: 2,
        keyStop: 2,
        step: 1
      },
      pfmerge: {
        arity: -2,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      pfselftest: {
        arity: 1,
        flags: [
          "admin"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      ping: {
        arity: -1,
        flags: [
          "fast"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      psetex: {
        arity: 4,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      psubscribe: {
        arity: -2,
        flags: [
          "pubsub",
          "noscript",
          "loading",
          "stale"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      psync: {
        arity: -3,
        flags: [
          "admin",
          "noscript",
          "no_async_loading",
          "no_multi"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      pttl: {
        arity: 2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      publish: {
        arity: 3,
        flags: [
          "pubsub",
          "loading",
          "stale",
          "fast"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      pubsub: {
        arity: -2,
        flags: [],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      punsubscribe: {
        arity: -1,
        flags: [
          "pubsub",
          "noscript",
          "loading",
          "stale"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      quit: {
        arity: -1,
        flags: [
          "noscript",
          "loading",
          "stale",
          "fast",
          "no_auth",
          "allow_busy"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      randomkey: {
        arity: 1,
        flags: [
          "readonly"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      readonly: {
        arity: 1,
        flags: [
          "loading",
          "stale",
          "fast"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      readwrite: {
        arity: 1,
        flags: [
          "loading",
          "stale",
          "fast"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      rename: {
        arity: 3,
        flags: [
          "write"
        ],
        keyStart: 1,
        keyStop: 2,
        step: 1
      },
      renamenx: {
        arity: 3,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 2,
        step: 1
      },
      replconf: {
        arity: -1,
        flags: [
          "admin",
          "noscript",
          "loading",
          "stale",
          "allow_busy"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      replicaof: {
        arity: 3,
        flags: [
          "admin",
          "noscript",
          "stale",
          "no_async_loading"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      reset: {
        arity: 1,
        flags: [
          "noscript",
          "loading",
          "stale",
          "fast",
          "no_auth",
          "allow_busy"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      restore: {
        arity: -4,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      "restore-asking": {
        arity: -4,
        flags: [
          "write",
          "denyoom",
          "asking"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      role: {
        arity: 1,
        flags: [
          "noscript",
          "loading",
          "stale",
          "fast"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      rpop: {
        arity: -2,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      rpoplpush: {
        arity: 3,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: 2,
        step: 1
      },
      rpush: {
        arity: -3,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      rpushx: {
        arity: -3,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      sadd: {
        arity: -3,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      save: {
        arity: 1,
        flags: [
          "admin",
          "noscript",
          "no_async_loading",
          "no_multi"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      scan: {
        arity: -2,
        flags: [
          "readonly"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      scard: {
        arity: 2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      script: {
        arity: -2,
        flags: [],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      sdiff: {
        arity: -2,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      sdiffstore: {
        arity: -3,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      select: {
        arity: 2,
        flags: [
          "loading",
          "stale",
          "fast"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      set: {
        arity: -3,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      setbit: {
        arity: 4,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      setex: {
        arity: 4,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      setnx: {
        arity: 3,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      setrange: {
        arity: 4,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      shutdown: {
        arity: -1,
        flags: [
          "admin",
          "noscript",
          "loading",
          "stale",
          "no_multi",
          "allow_busy"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      sinter: {
        arity: -2,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      sintercard: {
        arity: -3,
        flags: [
          "readonly",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      sinterstore: {
        arity: -3,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      sismember: {
        arity: 3,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      slaveof: {
        arity: 3,
        flags: [
          "admin",
          "noscript",
          "stale",
          "no_async_loading"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      slowlog: {
        arity: -2,
        flags: [],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      smembers: {
        arity: 2,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      smismember: {
        arity: -3,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      smove: {
        arity: 4,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 2,
        step: 1
      },
      sort: {
        arity: -2,
        flags: [
          "write",
          "denyoom",
          "movablekeys"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      sort_ro: {
        arity: -2,
        flags: [
          "readonly",
          "movablekeys"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      spop: {
        arity: -2,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      spublish: {
        arity: 3,
        flags: [
          "pubsub",
          "loading",
          "stale",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      srandmember: {
        arity: -2,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      srem: {
        arity: -3,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      sscan: {
        arity: -3,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      ssubscribe: {
        arity: -2,
        flags: [
          "pubsub",
          "noscript",
          "loading",
          "stale"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      strlen: {
        arity: 2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      subscribe: {
        arity: -2,
        flags: [
          "pubsub",
          "noscript",
          "loading",
          "stale"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      substr: {
        arity: 4,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      sunion: {
        arity: -2,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      sunionstore: {
        arity: -3,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      sunsubscribe: {
        arity: -1,
        flags: [
          "pubsub",
          "noscript",
          "loading",
          "stale"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      swapdb: {
        arity: 3,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      sync: {
        arity: 1,
        flags: [
          "admin",
          "noscript",
          "no_async_loading",
          "no_multi"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      time: {
        arity: 1,
        flags: [
          "loading",
          "stale",
          "fast"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      touch: {
        arity: -2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      ttl: {
        arity: 2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      type: {
        arity: 2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      unlink: {
        arity: -2,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      unsubscribe: {
        arity: -1,
        flags: [
          "pubsub",
          "noscript",
          "loading",
          "stale"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      unwatch: {
        arity: 1,
        flags: [
          "noscript",
          "loading",
          "stale",
          "fast",
          "allow_busy"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      wait: {
        arity: 3,
        flags: [
          "noscript"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      watch: {
        arity: -2,
        flags: [
          "noscript",
          "loading",
          "stale",
          "fast",
          "allow_busy"
        ],
        keyStart: 1,
        keyStop: -1,
        step: 1
      },
      xack: {
        arity: -4,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      xadd: {
        arity: -5,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      xautoclaim: {
        arity: -6,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      xclaim: {
        arity: -6,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      xdel: {
        arity: -3,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      xgroup: {
        arity: -2,
        flags: [],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      xinfo: {
        arity: -2,
        flags: [],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      xlen: {
        arity: 2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      xpending: {
        arity: -3,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      xrange: {
        arity: -4,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      xread: {
        arity: -4,
        flags: [
          "readonly",
          "blocking",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      xreadgroup: {
        arity: -7,
        flags: [
          "write",
          "blocking",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      xrevrange: {
        arity: -4,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      xsetid: {
        arity: -3,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      xtrim: {
        arity: -4,
        flags: [
          "write"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zadd: {
        arity: -4,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zcard: {
        arity: 2,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zcount: {
        arity: 4,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zdiff: {
        arity: -3,
        flags: [
          "readonly",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      zdiffstore: {
        arity: -4,
        flags: [
          "write",
          "denyoom",
          "movablekeys"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zincrby: {
        arity: 4,
        flags: [
          "write",
          "denyoom",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zinter: {
        arity: -3,
        flags: [
          "readonly",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      zintercard: {
        arity: -3,
        flags: [
          "readonly",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      zinterstore: {
        arity: -4,
        flags: [
          "write",
          "denyoom",
          "movablekeys"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zlexcount: {
        arity: 4,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zmpop: {
        arity: -4,
        flags: [
          "write",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      zmscore: {
        arity: -3,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zpopmax: {
        arity: -2,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zpopmin: {
        arity: -2,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zrandmember: {
        arity: -2,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zrange: {
        arity: -4,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zrangebylex: {
        arity: -4,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zrangebyscore: {
        arity: -4,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zrangestore: {
        arity: -5,
        flags: [
          "write",
          "denyoom"
        ],
        keyStart: 1,
        keyStop: 2,
        step: 1
      },
      zrank: {
        arity: 3,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zrem: {
        arity: -3,
        flags: [
          "write",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zremrangebylex: {
        arity: 4,
        flags: [
          "write"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zremrangebyrank: {
        arity: 4,
        flags: [
          "write"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zremrangebyscore: {
        arity: 4,
        flags: [
          "write"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zrevrange: {
        arity: -4,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zrevrangebylex: {
        arity: -4,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zrevrangebyscore: {
        arity: -4,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zrevrank: {
        arity: 3,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zscan: {
        arity: -3,
        flags: [
          "readonly"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zscore: {
        arity: 3,
        flags: [
          "readonly",
          "fast"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      },
      zunion: {
        arity: -3,
        flags: [
          "readonly",
          "movablekeys"
        ],
        keyStart: 0,
        keyStop: 0,
        step: 0
      },
      zunionstore: {
        arity: -4,
        flags: [
          "write",
          "denyoom",
          "movablekeys"
        ],
        keyStart: 1,
        keyStop: 1,
        step: 1
      }
    };
  }
});

var require_built = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@ioredis/commands/built/index.js"(exports2) {
    "use strict";
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getKeyIndexes = exports2.hasFlag = exports2.exists = exports2.list = void 0;
    var commands_json_1 = __importDefault2(require_commands4());
    exports2.list = Object.keys(commands_json_1.default);
    var flags = {};
    exports2.list.forEach((commandName) => {
      flags[commandName] = commands_json_1.default[commandName].flags.reduce(function(flags2, flag) {
        flags2[flag] = true;
        return flags2;
      }, {});
    });
    function exists(commandName) {
      return Boolean(commands_json_1.default[commandName]);
    }
    exports2.exists = exists;
    function hasFlag(commandName, flag) {
      if (!flags[commandName]) {
        throw new Error("Unknown command " + commandName);
      }
      return Boolean(flags[commandName][flag]);
    }
    exports2.hasFlag = hasFlag;
    function getKeyIndexes(commandName, args, options) {
      const command = commands_json_1.default[commandName];
      if (!command) {
        throw new Error("Unknown command " + commandName);
      }
      if (!Array.isArray(args)) {
        throw new Error("Expect args to be an array");
      }
      const keys = [];
      const parseExternalKey = Boolean(options && options.parseExternalKey);
      const takeDynamicKeys = (args2, startIndex) => {
        const keys2 = [];
        const keyStop = Number(args2[startIndex]);
        for (let i = 0; i < keyStop; i++) {
          keys2.push(i + startIndex + 1);
        }
        return keys2;
      };
      const takeKeyAfterToken = (args2, startIndex, token) => {
        for (let i = startIndex; i < args2.length - 1; i += 1) {
          if (String(args2[i]).toLowerCase() === token.toLowerCase()) {
            return i + 1;
          }
        }
        return null;
      };
      switch (commandName) {
        case "zunionstore":
        case "zinterstore":
        case "zdiffstore":
          keys.push(0, ...takeDynamicKeys(args, 1));
          break;
        case "eval":
        case "evalsha":
        case "eval_ro":
        case "evalsha_ro":
        case "fcall":
        case "fcall_ro":
        case "blmpop":
        case "bzmpop":
          keys.push(...takeDynamicKeys(args, 1));
          break;
        case "sintercard":
        case "lmpop":
        case "zunion":
        case "zinter":
        case "zmpop":
        case "zintercard":
        case "zdiff": {
          keys.push(...takeDynamicKeys(args, 0));
          break;
        }
        case "georadius": {
          keys.push(0);
          const storeKey = takeKeyAfterToken(args, 5, "STORE");
          if (storeKey)
            keys.push(storeKey);
          const distKey = takeKeyAfterToken(args, 5, "STOREDIST");
          if (distKey)
            keys.push(distKey);
          break;
        }
        case "georadiusbymember": {
          keys.push(0);
          const storeKey = takeKeyAfterToken(args, 4, "STORE");
          if (storeKey)
            keys.push(storeKey);
          const distKey = takeKeyAfterToken(args, 4, "STOREDIST");
          if (distKey)
            keys.push(distKey);
          break;
        }
        case "sort":
        case "sort_ro":
          keys.push(0);
          for (let i = 1; i < args.length - 1; i++) {
            let arg = args[i];
            if (typeof arg !== "string") {
              continue;
            }
            const directive = arg.toUpperCase();
            if (directive === "GET") {
              i += 1;
              arg = args[i];
              if (arg !== "#") {
                if (parseExternalKey) {
                  keys.push([i, getExternalKeyNameLength(arg)]);
                } else {
                  keys.push(i);
                }
              }
            } else if (directive === "BY") {
              i += 1;
              if (parseExternalKey) {
                keys.push([i, getExternalKeyNameLength(args[i])]);
              } else {
                keys.push(i);
              }
            } else if (directive === "STORE") {
              i += 1;
              keys.push(i);
            }
          }
          break;
        case "migrate":
          if (args[2] === "") {
            for (let i = 5; i < args.length - 1; i++) {
              const arg = args[i];
              if (typeof arg === "string" && arg.toUpperCase() === "KEYS") {
                for (let j = i + 1; j < args.length; j++) {
                  keys.push(j);
                }
                break;
              }
            }
          } else {
            keys.push(2);
          }
          break;
        case "xreadgroup":
        case "xread":
          for (let i = commandName === "xread" ? 0 : 3; i < args.length - 1; i++) {
            if (String(args[i]).toUpperCase() === "STREAMS") {
              for (let j = i + 1; j <= i + (args.length - 1 - i) / 2; j++) {
                keys.push(j);
              }
              break;
            }
          }
          break;
        default:
          if (command.step > 0) {
            const keyStart = command.keyStart - 1;
            const keyStop = command.keyStop > 0 ? command.keyStop : args.length + command.keyStop + 1;
            for (let i = keyStart; i < keyStop; i += command.step) {
              keys.push(i);
            }
          }
          break;
      }
      return keys;
    }
    exports2.getKeyIndexes = getKeyIndexes;
    function getExternalKeyNameLength(key) {
      if (typeof key !== "string") {
        key = String(key);
      }
      const hashPos = key.indexOf("->");
      return hashPos === -1 ? key.length : hashPos;
    }
  }
});

var require_utils3 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/standard-as-callback/built/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.tryCatch = exports2.errorObj = void 0;
    exports2.errorObj = { e: {} };
    var tryCatchTarget;
    function tryCatcher(err, val2) {
      try {
        const target = tryCatchTarget;
        tryCatchTarget = null;
        return target.apply(this, arguments);
      } catch (e) {
        exports2.errorObj.e = e;
        return exports2.errorObj;
      }
    }
    function tryCatch(fn) {
      tryCatchTarget = fn;
      return tryCatcher;
    }
    exports2.tryCatch = tryCatch;
  }
});

var require_built2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/standard-as-callback/built/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var utils_1 = require_utils3();
    function throwLater(e) {
      setTimeout(function() {
        throw e;
      }, 0);
    }
    function asCallback(promise, nodeback, options) {
      if (typeof nodeback === "function") {
        promise.then((val2) => {
          let ret;
          if (options !== void 0 && Object(options).spread && Array.isArray(val2)) {
            ret = utils_1.tryCatch(nodeback).apply(void 0, [null].concat(val2));
          } else {
            ret = val2 === void 0 ? utils_1.tryCatch(nodeback)(null) : utils_1.tryCatch(nodeback)(null, val2);
          }
          if (ret === utils_1.errorObj) {
            throwLater(ret.e);
          }
        }, (cause) => {
          if (!cause) {
            const newReason = new Error(cause + "");
            Object.assign(newReason, { cause });
            cause = newReason;
          }
          const ret = utils_1.tryCatch(nodeback)(cause);
          if (ret === utils_1.errorObj) {
            throwLater(ret.e);
          }
        });
      }
      return promise;
    }
    exports2.default = asCallback;
  }
});

var require_old = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/redis-errors/lib/old.js"(exports2, module2) {
    "use strict";
    var assert = require("assert");
    var util = require("util");
    function RedisError(message) {
      Object.defineProperty(this, "message", {
        value: message || "",
        configurable: true,
        writable: true
      });
      Error.captureStackTrace(this, this.constructor);
    }
    util.inherits(RedisError, Error);
    Object.defineProperty(RedisError.prototype, "name", {
      value: "RedisError",
      configurable: true,
      writable: true
    });
    function ParserError(message, buffer, offset) {
      assert(buffer);
      assert.strictEqual(typeof offset, "number");
      Object.defineProperty(this, "message", {
        value: message || "",
        configurable: true,
        writable: true
      });
      const tmp = Error.stackTraceLimit;
      Error.stackTraceLimit = 2;
      Error.captureStackTrace(this, this.constructor);
      Error.stackTraceLimit = tmp;
      this.offset = offset;
      this.buffer = buffer;
    }
    util.inherits(ParserError, RedisError);
    Object.defineProperty(ParserError.prototype, "name", {
      value: "ParserError",
      configurable: true,
      writable: true
    });
    function ReplyError(message) {
      Object.defineProperty(this, "message", {
        value: message || "",
        configurable: true,
        writable: true
      });
      const tmp = Error.stackTraceLimit;
      Error.stackTraceLimit = 2;
      Error.captureStackTrace(this, this.constructor);
      Error.stackTraceLimit = tmp;
    }
    util.inherits(ReplyError, RedisError);
    Object.defineProperty(ReplyError.prototype, "name", {
      value: "ReplyError",
      configurable: true,
      writable: true
    });
    function AbortError(message) {
      Object.defineProperty(this, "message", {
        value: message || "",
        configurable: true,
        writable: true
      });
      Error.captureStackTrace(this, this.constructor);
    }
    util.inherits(AbortError, RedisError);
    Object.defineProperty(AbortError.prototype, "name", {
      value: "AbortError",
      configurable: true,
      writable: true
    });
    function InterruptError(message) {
      Object.defineProperty(this, "message", {
        value: message || "",
        configurable: true,
        writable: true
      });
      Error.captureStackTrace(this, this.constructor);
    }
    util.inherits(InterruptError, AbortError);
    Object.defineProperty(InterruptError.prototype, "name", {
      value: "InterruptError",
      configurable: true,
      writable: true
    });
    module2.exports = {
      RedisError,
      ParserError,
      ReplyError,
      AbortError,
      InterruptError
    };
  }
});

var require_modern = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/redis-errors/lib/modern.js"(exports2, module2) {
    "use strict";
    var assert = require("assert");
    var RedisError = class extends Error {
      get name() {
        return this.constructor.name;
      }
    };
    var ParserError = class extends RedisError {
      constructor(message, buffer, offset) {
        assert(buffer);
        assert.strictEqual(typeof offset, "number");
        const tmp = Error.stackTraceLimit;
        Error.stackTraceLimit = 2;
        super(message);
        Error.stackTraceLimit = tmp;
        this.offset = offset;
        this.buffer = buffer;
      }
      get name() {
        return this.constructor.name;
      }
    };
    var ReplyError = class extends RedisError {
      constructor(message) {
        const tmp = Error.stackTraceLimit;
        Error.stackTraceLimit = 2;
        super(message);
        Error.stackTraceLimit = tmp;
      }
      get name() {
        return this.constructor.name;
      }
    };
    var AbortError = class extends RedisError {
      get name() {
        return this.constructor.name;
      }
    };
    var InterruptError = class extends AbortError {
      get name() {
        return this.constructor.name;
      }
    };
    module2.exports = {
      RedisError,
      ParserError,
      ReplyError,
      AbortError,
      InterruptError
    };
  }
});

var require_redis_errors = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/redis-errors/index.js"(exports2, module2) {
    "use strict";
    var Errors = process.version.charCodeAt(1) < 55 && process.version.charCodeAt(2) === 46 ? require_old() : require_modern();
    module2.exports = Errors;
  }
});

var require_lib4 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/cluster-key-slot/lib/index.js"(exports2, module2) {
    var lookup = [
      0,
      4129,
      8258,
      12387,
      16516,
      20645,
      24774,
      28903,
      33032,
      37161,
      41290,
      45419,
      49548,
      53677,
      57806,
      61935,
      4657,
      528,
      12915,
      8786,
      21173,
      17044,
      29431,
      25302,
      37689,
      33560,
      45947,
      41818,
      54205,
      50076,
      62463,
      58334,
      9314,
      13379,
      1056,
      5121,
      25830,
      29895,
      17572,
      21637,
      42346,
      46411,
      34088,
      38153,
      58862,
      62927,
      50604,
      54669,
      13907,
      9842,
      5649,
      1584,
      30423,
      26358,
      22165,
      18100,
      46939,
      42874,
      38681,
      34616,
      63455,
      59390,
      55197,
      51132,
      18628,
      22757,
      26758,
      30887,
      2112,
      6241,
      10242,
      14371,
      51660,
      55789,
      59790,
      63919,
      35144,
      39273,
      43274,
      47403,
      23285,
      19156,
      31415,
      27286,
      6769,
      2640,
      14899,
      10770,
      56317,
      52188,
      64447,
      60318,
      39801,
      35672,
      47931,
      43802,
      27814,
      31879,
      19684,
      23749,
      11298,
      15363,
      3168,
      7233,
      60846,
      64911,
      52716,
      56781,
      44330,
      48395,
      36200,
      40265,
      32407,
      28342,
      24277,
      20212,
      15891,
      11826,
      7761,
      3696,
      65439,
      61374,
      57309,
      53244,
      48923,
      44858,
      40793,
      36728,
      37256,
      33193,
      45514,
      41451,
      53516,
      49453,
      61774,
      57711,
      4224,
      161,
      12482,
      8419,
      20484,
      16421,
      28742,
      24679,
      33721,
      37784,
      41979,
      46042,
      49981,
      54044,
      58239,
      62302,
      689,
      4752,
      8947,
      13010,
      16949,
      21012,
      25207,
      29270,
      46570,
      42443,
      38312,
      34185,
      62830,
      58703,
      54572,
      50445,
      13538,
      9411,
      5280,
      1153,
      29798,
      25671,
      21540,
      17413,
      42971,
      47098,
      34713,
      38840,
      59231,
      63358,
      50973,
      55100,
      9939,
      14066,
      1681,
      5808,
      26199,
      30326,
      17941,
      22068,
      55628,
      51565,
      63758,
      59695,
      39368,
      35305,
      47498,
      43435,
      22596,
      18533,
      30726,
      26663,
      6336,
      2273,
      14466,
      10403,
      52093,
      56156,
      60223,
      64286,
      35833,
      39896,
      43963,
      48026,
      19061,
      23124,
      27191,
      31254,
      2801,
      6864,
      10931,
      14994,
      64814,
      60687,
      56684,
      52557,
      48554,
      44427,
      40424,
      36297,
      31782,
      27655,
      23652,
      19525,
      15522,
      11395,
      7392,
      3265,
      61215,
      65342,
      53085,
      57212,
      44955,
      49082,
      36825,
      40952,
      28183,
      32310,
      20053,
      24180,
      11923,
      16050,
      3793,
      7920
    ];
    var toUTF8Array = function toUTF8Array2(str) {
      var char;
      var i = 0;
      var p = 0;
      var utf8 = [];
      var len = str.length;
      for (; i < len; i++) {
        char = str.charCodeAt(i);
        if (char < 128) {
          utf8[p++] = char;
        } else if (char < 2048) {
          utf8[p++] = char >> 6 | 192;
          utf8[p++] = char & 63 | 128;
        } else if ((char & 64512) === 55296 && i + 1 < str.length && (str.charCodeAt(i + 1) & 64512) === 56320) {
          char = 65536 + ((char & 1023) << 10) + (str.charCodeAt(++i) & 1023);
          utf8[p++] = char >> 18 | 240;
          utf8[p++] = char >> 12 & 63 | 128;
          utf8[p++] = char >> 6 & 63 | 128;
          utf8[p++] = char & 63 | 128;
        } else {
          utf8[p++] = char >> 12 | 224;
          utf8[p++] = char >> 6 & 63 | 128;
          utf8[p++] = char & 63 | 128;
        }
      }
      return utf8;
    };
    var generate = module2.exports = function generate2(str) {
      var char;
      var i = 0;
      var start = -1;
      var result = 0;
      var resultHash = 0;
      var utf8 = typeof str === "string" ? toUTF8Array(str) : str;
      var len = utf8.length;
      while (i < len) {
        char = utf8[i++];
        if (start === -1) {
          if (char === 123) {
            start = i;
          }
        } else if (char !== 125) {
          resultHash = lookup[(char ^ resultHash >> 8) & 255] ^ resultHash << 8;
        } else if (i - 1 !== start) {
          return resultHash & 16383;
        }
        result = lookup[(char ^ result >> 8) & 255] ^ result << 8;
      }
      return result & 16383;
    };
    module2.exports.generateMulti = function generateMulti(keys) {
      var i = 1;
      var len = keys.length;
      var base = generate(keys[0]);
      while (i < len) {
        if (generate(keys[i++]) !== base)
          return -1;
      }
      return base;
    };
  }
});

var require_lodash = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/lodash.defaults/index.js"(exports2, module2) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var nativeMax = Math.max;
    function arrayLikeKeys(value, inherited) {
      var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
      var length = result.length, skipIndexes = !!length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assignInDefaults(objValue, srcValue, key, object) {
      if (objValue === void 0 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
        return srcValue;
      }
      return objValue;
    }
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        object[key] = value;
      }
    }
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    function baseRest(func, start) {
      start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
      return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = array;
        return apply(func, this, otherArgs);
      };
    }
    function copyObject(source, props, object, customizer) {
      object || (object = {});
      var index = -1, length = props.length;
      while (++index < length) {
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        assignValue(object, key, newValue === void 0 ? source[key] : newValue);
      }
      return object;
    }
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
        return eq(object[index], value);
      }
      return false;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    function isFunction(value) {
      var tag = isObject(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });
    var defaults = baseRest(function(args) {
      args.push(void 0, assignInDefaults);
      return apply(assignInWith, void 0, args);
    });
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    module2.exports = defaults;
  }
});

var require_lodash2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/lodash.isarguments/index.js"(exports2, module2) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    function isFunction(value) {
      var tag = isObject(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    module2.exports = isArguments;
  }
});

var require_lodash3 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/utils/lodash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isArguments = exports2.defaults = exports2.noop = void 0;
    var defaults = require_lodash();
    exports2.defaults = defaults;
    var isArguments = require_lodash2();
    exports2.isArguments = isArguments;
    function noop() {
    }
    exports2.noop = noop;
  }
});

var require_ms = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ms/index.js"(exports2, module2) {
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module2.exports = function(val2, options) {
      options = options || {};
      var type = typeof val2;
      if (type === "string" && val2.length > 0) {
        return parse2(val2);
      } else if (type === "number" && isFinite(val2)) {
        return options.long ? fmtLong(val2) : fmtShort(val2);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val2)
      );
    };
    function parse2(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

var require_common = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/debug/src/common.js"(exports2, module2) {
    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms();
      createDebug.destroy = destroy;
      Object.keys(env).forEach((key) => {
        createDebug[key] = env[key];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i = 0; i < namespace.length; i++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i);
          hash |= 0;
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug(...args) {
          if (!debug.enabled) {
            return;
          }
          const self = debug;
          const curr = Number(/* @__PURE__ */ new Date());
          const ms = curr - (prevTime || curr);
          self.diff = ms;
          self.prev = prevTime;
          self.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            if (match === "%%") {
              return "%";
            }
            index++;
            const formatter = createDebug.formatters[format];
            if (typeof formatter === "function") {
              const val2 = args[index];
              match = formatter.call(self, val2);
              args.splice(index, 1);
              index--;
            }
            return match;
          });
          createDebug.formatArgs.call(self, args);
          const logFn = self.log || createDebug.log;
          logFn.apply(self, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy;
        Object.defineProperty(debug, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v) => {
            enableOverride = v;
          }
        });
        if (typeof createDebug.init === "function") {
          createDebug.init(debug);
        }
        return debug;
      }
      function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        const len = split.length;
        for (i = 0; i < len; i++) {
          if (!split[i]) {
            continue;
          }
          namespaces = split[i].replace(/\*/g, ".*?");
          if (namespaces[0] === "-") {
            createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
          } else {
            createDebug.names.push(new RegExp("^" + namespaces + "$"));
          }
        }
      }
      function disable() {
        const namespaces = [
          ...createDebug.names.map(toNamespace),
          ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
      }
      function enabled(name) {
        if (name[name.length - 1] === "*") {
          return true;
        }
        let i;
        let len;
        for (i = 0, len = createDebug.skips.length; i < len; i++) {
          if (createDebug.skips[i].test(name)) {
            return false;
          }
        }
        for (i = 0, len = createDebug.names.length; i < len; i++) {
          if (createDebug.names[i].test(name)) {
            return true;
          }
        }
        return false;
      }
      function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function coerce(val2) {
        if (val2 instanceof Error) {
          return val2.stack || val2.message;
        }
        return val2;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module2.exports = setup;
  }
});

var require_browser = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/debug/src/browser.js"(exports2, module2) {
    exports2.formatArgs = formatArgs;
    exports2.save = save;
    exports2.load = load;
    exports2.useColors = useColors;
    exports2.storage = localstorage();
    exports2.destroy = (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports2.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module2.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index++;
        if (match === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports2.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports2.storage.setItem("debug", namespaces);
        } else {
          exports2.storage.removeItem("debug");
        }
      } catch (error) {
      }
    }
    function load() {
      let r;
      try {
        r = exports2.storage.getItem("debug");
      } catch (error) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {
      }
    }
    module2.exports = require_common()(exports2);
    var { formatters } = module2.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  }
});

var require_has_flag = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/has-flag/index.js"(exports2, module2) {
    "use strict";
    module2.exports = (flag, argv = process.argv) => {
      const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
      const position = argv.indexOf(prefix + flag);
      const terminatorPosition = argv.indexOf("--");
      return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
    };
  }
});

var require_supports_color = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/supports-color/index.js"(exports2, module2) {
    "use strict";
    var os = require("os");
    var tty = require("tty");
    var hasFlag = require_has_flag();
    var { env } = process;
    var forceColor;
    if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
      forceColor = 0;
    } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
      forceColor = 1;
    }
    if ("FORCE_COLOR" in env) {
      if (env.FORCE_COLOR === "true") {
        forceColor = 1;
      } else if (env.FORCE_COLOR === "false") {
        forceColor = 0;
      } else {
        forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
      }
    }
    function translateLevel(level) {
      if (level === 0) {
        return false;
      }
      return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
      };
    }
    function supportsColor(haveStream, streamIsTTY) {
      if (forceColor === 0) {
        return 0;
      }
      if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
        return 3;
      }
      if (hasFlag("color=256")) {
        return 2;
      }
      if (haveStream && !streamIsTTY && forceColor === void 0) {
        return 0;
      }
      const min = forceColor || 0;
      if (env.TERM === "dumb") {
        return min;
      }
      if (process.platform === "win32") {
        const osRelease = os.release().split(".");
        if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
          return Number(osRelease[2]) >= 14931 ? 3 : 2;
        }
        return 1;
      }
      if ("CI" in env) {
        if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((sign) => sign in env) || env.CI_NAME === "codeship") {
          return 1;
        }
        return min;
      }
      if ("TEAMCITY_VERSION" in env) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
      }
      if (env.COLORTERM === "truecolor") {
        return 3;
      }
      if ("TERM_PROGRAM" in env) {
        const version2 = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (env.TERM_PROGRAM) {
          case "iTerm.app":
            return version2 >= 3 ? 3 : 2;
          case "Apple_Terminal":
            return 2;
        }
      }
      if (/-256(color)?$/i.test(env.TERM)) {
        return 2;
      }
      if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
        return 1;
      }
      if ("COLORTERM" in env) {
        return 1;
      }
      return min;
    }
    function getSupportLevel(stream) {
      const level = supportsColor(stream, stream && stream.isTTY);
      return translateLevel(level);
    }
    module2.exports = {
      supportsColor: getSupportLevel,
      stdout: translateLevel(supportsColor(true, tty.isatty(1))),
      stderr: translateLevel(supportsColor(true, tty.isatty(2)))
    };
  }
});

var require_node2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/debug/src/node.js"(exports2, module2) {
    var tty = require("tty");
    var util = require("util");
    exports2.init = init;
    exports2.log = log;
    exports2.formatArgs = formatArgs;
    exports2.save = save;
    exports2.load = load;
    exports2.useColors = useColors;
    exports2.destroy = util.deprecate(
      () => {
      },
      "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
    );
    exports2.colors = [6, 2, 3, 4, 5, 1];
    try {
      const supportsColor = require_supports_color();
      if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
        exports2.colors = [
          20,
          21,
          26,
          27,
          32,
          33,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          56,
          57,
          62,
          63,
          68,
          69,
          74,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          92,
          93,
          98,
          99,
          112,
          113,
          128,
          129,
          134,
          135,
          148,
          149,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          178,
          179,
          184,
          185,
          196,
          197,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          209,
          214,
          215,
          220,
          221
        ];
      }
    } catch (error) {
    }
    exports2.inspectOpts = Object.keys(process.env).filter((key) => {
      return /^debug_/i.test(key);
    }).reduce((obj, key) => {
      const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {
        return k.toUpperCase();
      });
      let val2 = process.env[key];
      if (/^(yes|on|true|enabled)$/i.test(val2)) {
        val2 = true;
      } else if (/^(no|off|false|disabled)$/i.test(val2)) {
        val2 = false;
      } else if (val2 === "null") {
        val2 = null;
      } else {
        val2 = Number(val2);
      }
      obj[prop] = val2;
      return obj;
    }, {});
    function useColors() {
      return "colors" in exports2.inspectOpts ? Boolean(exports2.inspectOpts.colors) : tty.isatty(process.stderr.fd);
    }
    function formatArgs(args) {
      const { namespace: name, useColors: useColors2 } = this;
      if (useColors2) {
        const c = this.color;
        const colorCode = "\x1B[3" + (c < 8 ? c : "8;5;" + c);
        const prefix = `  ${colorCode};1m${name} \x1B[0m`;
        args[0] = prefix + args[0].split("\n").join("\n" + prefix);
        args.push(colorCode + "m+" + module2.exports.humanize(this.diff) + "\x1B[0m");
      } else {
        args[0] = getDate() + name + " " + args[0];
      }
    }
    function getDate() {
      if (exports2.inspectOpts.hideDate) {
        return "";
      }
      return (/* @__PURE__ */ new Date()).toISOString() + " ";
    }
    function log(...args) {
      return process.stderr.write(util.format(...args) + "\n");
    }
    function save(namespaces) {
      if (namespaces) {
        process.env.DEBUG = namespaces;
      } else {
        delete process.env.DEBUG;
      }
    }
    function load() {
      return process.env.DEBUG;
    }
    function init(debug) {
      debug.inspectOpts = {};
      const keys = Object.keys(exports2.inspectOpts);
      for (let i = 0; i < keys.length; i++) {
        debug.inspectOpts[keys[i]] = exports2.inspectOpts[keys[i]];
      }
    }
    module2.exports = require_common()(exports2);
    var { formatters } = module2.exports;
    formatters.o = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts).split("\n").map((str) => str.trim()).join(" ");
    };
    formatters.O = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts);
    };
  }
});

var require_src = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/debug/src/index.js"(exports2, module2) {
    if (typeof process === "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs) {
      module2.exports = require_browser();
    } else {
      module2.exports = require_node2();
    }
  }
});

var require_debug2 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/utils/debug.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.genRedactedString = exports2.getStringValue = exports2.MAX_ARGUMENT_LENGTH = void 0;
    var debug_1 = require_src();
    var MAX_ARGUMENT_LENGTH = 200;
    exports2.MAX_ARGUMENT_LENGTH = MAX_ARGUMENT_LENGTH;
    var NAMESPACE_PREFIX = "ioredis";
    function getStringValue(v) {
      if (v === null) {
        return;
      }
      switch (typeof v) {
        case "boolean":
          return;
        case "number":
          return;
        case "object":
          if (Buffer.isBuffer(v)) {
            return v.toString("hex");
          }
          if (Array.isArray(v)) {
            return v.join(",");
          }
          try {
            return JSON.stringify(v);
          } catch (e) {
            return;
          }
        case "string":
          return v;
      }
    }
    exports2.getStringValue = getStringValue;
    function genRedactedString(str, maxLen) {
      const { length } = str;
      return length <= maxLen ? str : str.slice(0, maxLen) + ' ... <REDACTED full-length="' + length + '">';
    }
    exports2.genRedactedString = genRedactedString;
    function genDebugFunction(namespace) {
      const fn = (0, debug_1.default)(`${NAMESPACE_PREFIX}:${namespace}`);
      function wrappedDebug(...args) {
        if (!fn.enabled) {
          return;
        }
        for (let i = 1; i < args.length; i++) {
          const str = getStringValue(args[i]);
          if (typeof str === "string" && str.length > MAX_ARGUMENT_LENGTH) {
            args[i] = genRedactedString(str, MAX_ARGUMENT_LENGTH);
          }
        }
        return fn.apply(null, args);
      }
      Object.defineProperties(wrappedDebug, {
        namespace: {
          get() {
            return fn.namespace;
          }
        },
        enabled: {
          get() {
            return fn.enabled;
          }
        },
        destroy: {
          get() {
            return fn.destroy;
          }
        },
        log: {
          get() {
            return fn.log;
          },
          set(l) {
            fn.log = l;
          }
        }
      });
      return wrappedDebug;
    }
    exports2.default = genDebugFunction;
  }
});

var require_TLSProfiles = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/constants/TLSProfiles.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var RedisCloudCA = `-----BEGIN CERTIFICATE-----
MIIDTzCCAjegAwIBAgIJAKSVpiDswLcwMA0GCSqGSIb3DQEBBQUAMD4xFjAUBgNV
BAoMDUdhcmFudGlhIERhdGExJDAiBgNVBAMMG1NTTCBDZXJ0aWZpY2F0aW9uIEF1
dGhvcml0eTAeFw0xMzEwMDExMjE0NTVaFw0yMzA5MjkxMjE0NTVaMD4xFjAUBgNV
BAoMDUdhcmFudGlhIERhdGExJDAiBgNVBAMMG1NTTCBDZXJ0aWZpY2F0aW9uIEF1
dGhvcml0eTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALZqkh/DczWP
JnxnHLQ7QL0T4B4CDKWBKCcisriGbA6ZePWVNo4hfKQC6JrzfR+081NeD6VcWUiz
rmd+jtPhIY4c+WVQYm5PKaN6DT1imYdxQw7aqO5j2KUCEh/cznpLxeSHoTxlR34E
QwF28Wl3eg2vc5ct8LjU3eozWVk3gb7alx9mSA2SgmuX5lEQawl++rSjsBStemY2
BDwOpAMXIrdEyP/cVn8mkvi/BDs5M5G+09j0gfhyCzRWMQ7Hn71u1eolRxwVxgi3
TMn+/vTaFSqxKjgck6zuAYjBRPaHe7qLxHNr1So/Mc9nPy+3wHebFwbIcnUojwbp
4nctkWbjb2cCAwEAAaNQME4wHQYDVR0OBBYEFP1whtcrydmW3ZJeuSoKZIKjze3w
MB8GA1UdIwQYMBaAFP1whtcrydmW3ZJeuSoKZIKjze3wMAwGA1UdEwQFMAMBAf8w
DQYJKoZIhvcNAQEFBQADggEBAG2erXhwRAa7+ZOBs0B6X57Hwyd1R4kfmXcs0rta
lbPpvgULSiB+TCbf3EbhJnHGyvdCY1tvlffLjdA7HJ0PCOn+YYLBA0pTU/dyvrN6
Su8NuS5yubnt9mb13nDGYo1rnt0YRfxN+8DM3fXIVr038A30UlPX2Ou1ExFJT0MZ
uFKY6ZvLdI6/1cbgmguMlAhM+DhKyV6Sr5699LM3zqeI816pZmlREETYkGr91q7k
BpXJu/dtHaGxg1ZGu6w/PCsYGUcECWENYD4VQPd8N32JjOfu6vEgoEAwfPP+3oGp
Z4m3ewACcWOAenqflb+cQYC4PsF7qbXDmRaWrbKntOlZ3n0=
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIGMTCCBBmgAwIBAgICEAAwDQYJKoZIhvcNAQELBQAwajELMAkGA1UEBhMCVVMx
CzAJBgNVBAgMAkNBMQswCQYDVQQHDAJDQTESMBAGA1UECgwJUmVkaXNMYWJzMS0w
KwYDVQQDDCRSZWRpc0xhYnMgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcN
MTgwMjI1MTUzNzM3WhcNMjgwMjIzMTUzNzM3WjBfMQswCQYDVQQGEwJVUzELMAkG
A1UECAwCQ0ExEjAQBgNVBAoMCVJlZGlzTGFiczEvMC0GA1UEAwwmUkNQIEludGVy
bWVkaWF0ZSBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUA
A4ICDwAwggIKAoICAQDf9dqbxc8Bq7Ctq9rWcxrGNKKHivqLAFpPq02yLPx6fsOv
Tq7GsDChAYBBc4v7Y2Ap9RD5Vs3dIhEANcnolf27QwrG9RMnnvzk8pCvp1o6zSU4
VuOE1W66/O1/7e2rVxyrnTcP7UgK43zNIXu7+tiAqWsO92uSnuMoGPGpeaUm1jym
hjWKtkAwDFSqvHY+XL5qDVBEjeUe+WHkYUg40cAXjusAqgm2hZt29c2wnVrxW25W
P0meNlzHGFdA2AC5z54iRiqj57dTfBTkHoBczQxcyw6hhzxZQ4e5I5zOKjXXEhZN
r0tA3YC14CTabKRus/JmZieyZzRgEy2oti64tmLYTqSlAD78pRL40VNoaSYetXLw
hhNsXCHgWaY6d5bLOc/aIQMAV5oLvZQKvuXAF1IDmhPA+bZbpWipp0zagf1P1H3s
UzsMdn2KM0ejzgotbtNlj5TcrVwpmvE3ktvUAuA+hi3FkVx1US+2Gsp5x4YOzJ7u
P1WPk6ShF0JgnJH2ILdj6kttTWwFzH17keSFICWDfH/+kM+k7Y1v3EXMQXE7y0T9
MjvJskz6d/nv+sQhY04xt64xFMGTnZjlJMzfQNi7zWFLTZnDD0lPowq7l3YiPoTT
t5Xky83lu0KZsZBo0WlWaDG00gLVdtRgVbcuSWxpi5BdLb1kRab66JptWjxwXQID
AQABo4HrMIHoMDoGA1UdHwQzMDEwL6AtoCuGKWh0dHBzOi8vcmwtY2Etc2VydmVy
LnJlZGlzbGFicy5jb20vdjEvY3JsMEYGCCsGAQUFBwEBBDowODA2BggrBgEFBQcw
AYYqaHR0cHM6Ly9ybC1jYS1zZXJ2ZXIucmVkaXNsYWJzLmNvbS92MS9vY3NwMB0G
A1UdDgQWBBQHar5OKvQUpP2qWt6mckzToeCOHDAfBgNVHSMEGDAWgBQi42wH6hM4
L2sujEvLM0/u8lRXTzASBgNVHRMBAf8ECDAGAQH/AgEAMA4GA1UdDwEB/wQEAwIB
hjANBgkqhkiG9w0BAQsFAAOCAgEAirEn/iTsAKyhd+pu2W3Z5NjCko4NPU0EYUbr
AP7+POK2rzjIrJO3nFYQ/LLuC7KCXG+2qwan2SAOGmqWst13Y+WHp44Kae0kaChW
vcYLXXSoGQGC8QuFSNUdaeg3RbMDYFT04dOkqufeWVccoHVxyTSg9eD8LZuHn5jw
7QDLiEECBmIJHk5Eeo2TAZrx4Yx6ufSUX5HeVjlAzqwtAqdt99uCJ/EL8bgpWbe+
XoSpvUv0SEC1I1dCAhCKAvRlIOA6VBcmzg5Am12KzkqTul12/VEFIgzqu0Zy2Jbc
AUPrYVu/+tOGXQaijy7YgwH8P8n3s7ZeUa1VABJHcxrxYduDDJBLZi+MjheUDaZ1
jQRHYevI2tlqeSBqdPKG4zBY5lS0GiAlmuze5oENt0P3XboHoZPHiqcK3VECgTVh
/BkJcuudETSJcZDmQ8YfoKfBzRQNg2sv/hwvUv73Ss51Sco8GEt2lD8uEdib1Q6z
zDT5lXJowSzOD5ZA9OGDjnSRL+2riNtKWKEqvtEG3VBJoBzu9GoxbAc7wIZLxmli
iF5a/Zf5X+UXD3s4TMmy6C4QZJpAA2egsSQCnraWO2ULhh7iXMysSkF/nzVfZn43
iqpaB8++9a37hWq14ZmOv0TJIDz//b2+KC4VFXWQ5W5QC6whsjT+OlG4p5ZYG0jo
616pxqo=
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIFujCCA6KgAwIBAgIJAJ1aTT1lu2ScMA0GCSqGSIb3DQEBCwUAMGoxCzAJBgNV
BAYTAlVTMQswCQYDVQQIDAJDQTELMAkGA1UEBwwCQ0ExEjAQBgNVBAoMCVJlZGlz
TGFiczEtMCsGA1UEAwwkUmVkaXNMYWJzIFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9y
aXR5MB4XDTE4MDIyNTE1MjA0MloXDTM4MDIyMDE1MjA0MlowajELMAkGA1UEBhMC
VVMxCzAJBgNVBAgMAkNBMQswCQYDVQQHDAJDQTESMBAGA1UECgwJUmVkaXNMYWJz
MS0wKwYDVQQDDCRSZWRpc0xhYnMgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkw
ggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDLEjXy7YrbN5Waau5cd6g1
G5C2tMmeTpZ0duFAPxNU4oE3RHS5gGiok346fUXuUxbZ6QkuzeN2/2Z+RmRcJhQY
Dm0ZgdG4x59An1TJfnzKKoWj8ISmoHS/TGNBdFzXV7FYNLBuqZouqePI6ReC6Qhl
pp45huV32Q3a6IDrrvx7Wo5ZczEQeFNbCeCOQYNDdTmCyEkHqc2AGo8eoIlSTutT
ULOC7R5gzJVTS0e1hesQ7jmqHjbO+VQS1NAL4/5K6cuTEqUl+XhVhPdLWBXJQ5ag
54qhX4v+ojLzeU1R/Vc6NjMvVtptWY6JihpgplprN0Yh2556ewcXMeturcKgXfGJ
xeYzsjzXerEjrVocX5V8BNrg64NlifzTMKNOOv4fVZszq1SIHR8F9ROrqiOdh8iC
JpUbLpXH9hWCSEO6VRMB2xJoKu3cgl63kF30s77x7wLFMEHiwsQRKxooE1UhgS9K
2sO4TlQ1eWUvFvHSTVDQDlGQ6zu4qjbOpb3Q8bQwoK+ai2alkXVR4Ltxe9QlgYK3
StsnPhruzZGA0wbXdpw0bnM+YdlEm5ffSTpNIfgHeaa7Dtb801FtA71ZlH7A6TaI
SIQuUST9EKmv7xrJyx0W1pGoPOLw5T029aTjnICSLdtV9bLwysrLhIYG5bnPq78B
cS+jZHFGzD7PUVGQD01nOQIDAQABo2MwYTAdBgNVHQ4EFgQUIuNsB+oTOC9rLoxL
yzNP7vJUV08wHwYDVR0jBBgwFoAUIuNsB+oTOC9rLoxLyzNP7vJUV08wDwYDVR0T
AQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAYYwDQYJKoZIhvcNAQELBQADggIBAHfg
z5pMNUAKdMzK1aS1EDdK9yKz4qicILz5czSLj1mC7HKDRy8cVADUxEICis++CsCu
rYOvyCVergHQLREcxPq4rc5Nq1uj6J6649NEeh4WazOOjL4ZfQ1jVznMbGy+fJm3
3Hoelv6jWRG9iqeJZja7/1s6YC6bWymI/OY1e4wUKeNHAo+Vger7MlHV+RuabaX+
hSJ8bJAM59NCM7AgMTQpJCncrcdLeceYniGy5Q/qt2b5mJkQVkIdy4TPGGB+AXDJ
D0q3I/JDRkDUFNFdeW0js7fHdsvCR7O3tJy5zIgEV/o/BCkmJVtuwPYOrw/yOlKj
TY/U7ATAx9VFF6/vYEOMYSmrZlFX+98L6nJtwDqfLB5VTltqZ4H/KBxGE3IRSt9l
FXy40U+LnXzhhW+7VBAvyYX8GEXhHkKU8Gqk1xitrqfBXY74xKgyUSTolFSfFVgj
mcM/X4K45bka+qpkj7Kfv/8D4j6aZekwhN2ly6hhC1SmQ8qjMjpG/mrWOSSHZFmf
ybu9iD2AYHeIOkshIl6xYIa++Q/00/vs46IzAbQyriOi0XxlSMMVtPx0Q3isp+ji
n8Mq9eOuxYOEQ4of8twUkUDd528iwGtEdwf0Q01UyT84S62N8AySl1ZBKXJz6W4F
UhWfa/HQYOAPDdEjNgnVwLI23b8t0TozyCWw7q8h
-----END CERTIFICATE-----

-----BEGIN CERTIFICATE-----
MIIEjzCCA3egAwIBAgIQe55B/ALCKJDZtdNT8kD6hTANBgkqhkiG9w0BAQsFADBM
MSAwHgYDVQQLExdHbG9iYWxTaWduIFJvb3QgQ0EgLSBSMzETMBEGA1UEChMKR2xv
YmFsU2lnbjETMBEGA1UEAxMKR2xvYmFsU2lnbjAeFw0yMjAxMjYxMjAwMDBaFw0y
NTAxMjYwMDAwMDBaMFgxCzAJBgNVBAYTAkJFMRkwFwYDVQQKExBHbG9iYWxTaWdu
IG52LXNhMS4wLAYDVQQDEyVHbG9iYWxTaWduIEF0bGFzIFIzIE9WIFRMUyBDQSAy
MDIyIFEyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmGmg1LW9b7Lf
8zDD83yBDTEkt+FOxKJZqF4veWc5KZsQj9HfnUS2e5nj/E+JImlGPsQuoiosLuXD
BVBNAMcUFa11buFMGMeEMwiTmCXoXRrXQmH0qjpOfKgYc5gHG3BsRGaRrf7VR4eg
ofNMG9wUBw4/g/TT7+bQJdA4NfE7Y4d5gEryZiBGB/swaX6Jp/8MF4TgUmOWmalK
dZCKyb4sPGQFRTtElk67F7vU+wdGcrcOx1tDcIB0ncjLPMnaFicagl+daWGsKqTh
counQb6QJtYHa91KvCfKWocMxQ7OIbB5UARLPmC4CJ1/f8YFm35ebfzAeULYdGXu
jE9CLor0OwIDAQABo4IBXzCCAVswDgYDVR0PAQH/BAQDAgGGMB0GA1UdJQQWMBQG
CCsGAQUFBwMBBggrBgEFBQcDAjASBgNVHRMBAf8ECDAGAQH/AgEAMB0GA1UdDgQW
BBSH5Zq7a7B/t95GfJWkDBpA8HHqdjAfBgNVHSMEGDAWgBSP8Et/qC5FJK5NUPpj
move4t0bvDB7BggrBgEFBQcBAQRvMG0wLgYIKwYBBQUHMAGGImh0dHA6Ly9vY3Nw
Mi5nbG9iYWxzaWduLmNvbS9yb290cjMwOwYIKwYBBQUHMAKGL2h0dHA6Ly9zZWN1
cmUuZ2xvYmFsc2lnbi5jb20vY2FjZXJ0L3Jvb3QtcjMuY3J0MDYGA1UdHwQvMC0w
K6ApoCeGJWh0dHA6Ly9jcmwuZ2xvYmFsc2lnbi5jb20vcm9vdC1yMy5jcmwwIQYD
VR0gBBowGDAIBgZngQwBAgIwDAYKKwYBBAGgMgoBAjANBgkqhkiG9w0BAQsFAAOC
AQEAKRic9/f+nmhQU/wz04APZLjgG5OgsuUOyUEZjKVhNGDwxGTvKhyXGGAMW2B/
3bRi+aElpXwoxu3pL6fkElbX3B0BeS5LoDtxkyiVEBMZ8m+sXbocwlPyxrPbX6mY
0rVIvnuUeBH8X0L5IwfpNVvKnBIilTbcebfHyXkPezGwz7E1yhUULjJFm2bt0SdX
y+4X/WeiiYIv+fTVgZZgl+/2MKIsu/qdBJc3f3TvJ8nz+Eax1zgZmww+RSQWeOj3
15Iw6Z5FX+NwzY/Ab+9PosR5UosSeq+9HhtaxZttXG1nVh+avYPGYddWmiMT90J5
ZgKnO/Fx2hBgTxhOTMYaD312kg==
-----END CERTIFICATE-----

-----BEGIN CERTIFICATE-----
MIIDXzCCAkegAwIBAgILBAAAAAABIVhTCKIwDQYJKoZIhvcNAQELBQAwTDEgMB4G
A1UECxMXR2xvYmFsU2lnbiBSb290IENBIC0gUjMxEzARBgNVBAoTCkdsb2JhbFNp
Z24xEzARBgNVBAMTCkdsb2JhbFNpZ24wHhcNMDkwMzE4MTAwMDAwWhcNMjkwMzE4
MTAwMDAwWjBMMSAwHgYDVQQLExdHbG9iYWxTaWduIFJvb3QgQ0EgLSBSMzETMBEG
A1UEChMKR2xvYmFsU2lnbjETMBEGA1UEAxMKR2xvYmFsU2lnbjCCASIwDQYJKoZI
hvcNAQEBBQADggEPADCCAQoCggEBAMwldpB5BngiFvXAg7aEyiie/QV2EcWtiHL8
RgJDx7KKnQRfJMsuS+FggkbhUqsMgUdwbN1k0ev1LKMPgj0MK66X17YUhhB5uzsT
gHeMCOFJ0mpiLx9e+pZo34knlTifBtc+ycsmWQ1z3rDI6SYOgxXG71uL0gRgykmm
KPZpO/bLyCiR5Z2KYVc3rHQU3HTgOu5yLy6c+9C7v/U9AOEGM+iCK65TpjoWc4zd
QQ4gOsC0p6Hpsk+QLjJg6VfLuQSSaGjlOCZgdbKfd/+RFO+uIEn8rUAVSNECMWEZ
XriX7613t2Saer9fwRPvm2L7DWzgVGkWqQPabumDk3F2xmmFghcCAwEAAaNCMEAw
DgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFI/wS3+o
LkUkrk1Q+mOai97i3Ru8MA0GCSqGSIb3DQEBCwUAA4IBAQBLQNvAUKr+yAzv95ZU
RUm7lgAJQayzE4aGKAczymvmdLm6AC2upArT9fHxD4q/c2dKg8dEe3jgr25sbwMp
jjM5RcOO5LlXbKr8EpbsU8Yt5CRsuZRj+9xTaGdWPoO4zzUhw8lo/s7awlOqzJCK
6fBdRoyV3XpYKBovHd7NADdBj+1EbddTKJd+82cEHhXXipa0095MJ6RMG3NzdvQX
mcIfeg7jLQitChws/zyrVQ4PkX4268NXSb7hLi18YIvDQVETI53O9zJrlAGomecs
Mx86OyXShkDOOyyGeMlhLxS67ttVb9+E7gUJTb0o2HLO02JQZR7rkpeDMdmztcpH
WD9f
-----END CERTIFICATE-----`;
    var TLSProfiles = {
      RedisCloudFixed: { ca: RedisCloudCA },
      RedisCloudFlexible: { ca: RedisCloudCA }
    };
    exports2.default = TLSProfiles;
  }
});

var require_utils4 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/utils/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.noop = exports2.defaults = exports2.Debug = exports2.zipMap = exports2.CONNECTION_CLOSED_ERROR_MSG = exports2.shuffle = exports2.sample = exports2.resolveTLSProfile = exports2.parseURL = exports2.optimizeErrorStack = exports2.toArg = exports2.convertMapToArray = exports2.convertObjectToArray = exports2.timeout = exports2.packObject = exports2.isInt = exports2.wrapMultiResult = exports2.convertBufferToString = void 0;
    var url_1 = require("url");
    var lodash_1 = require_lodash3();
    Object.defineProperty(exports2, "defaults", { enumerable: true, get: function() {
      return lodash_1.defaults;
    } });
    Object.defineProperty(exports2, "noop", { enumerable: true, get: function() {
      return lodash_1.noop;
    } });
    var debug_1 = require_debug2();
    exports2.Debug = debug_1.default;
    var TLSProfiles_1 = require_TLSProfiles();
    function convertBufferToString(value, encoding) {
      if (value instanceof Buffer) {
        return value.toString(encoding);
      }
      if (Array.isArray(value)) {
        const length = value.length;
        const res = Array(length);
        for (let i = 0; i < length; ++i) {
          res[i] = value[i] instanceof Buffer && encoding === "utf8" ? value[i].toString() : convertBufferToString(value[i], encoding);
        }
        return res;
      }
      return value;
    }
    exports2.convertBufferToString = convertBufferToString;
    function wrapMultiResult(arr) {
      if (!arr) {
        return null;
      }
      const result = [];
      const length = arr.length;
      for (let i = 0; i < length; ++i) {
        const item = arr[i];
        if (item instanceof Error) {
          result.push([item]);
        } else {
          result.push([null, item]);
        }
      }
      return result;
    }
    exports2.wrapMultiResult = wrapMultiResult;
    function isInt(value) {
      const x = parseFloat(value);
      return !isNaN(value) && (x | 0) === x;
    }
    exports2.isInt = isInt;
    function packObject(array) {
      const result = {};
      const length = array.length;
      for (let i = 1; i < length; i += 2) {
        result[array[i - 1]] = array[i];
      }
      return result;
    }
    exports2.packObject = packObject;
    function timeout(callback, timeout2) {
      let timer = null;
      const run = function() {
        if (timer) {
          clearTimeout(timer);
          timer = null;
          callback.apply(this, arguments);
        }
      };
      timer = setTimeout(run, timeout2, new Error("timeout"));
      return run;
    }
    exports2.timeout = timeout;
    function convertObjectToArray(obj) {
      const result = [];
      const keys = Object.keys(obj);
      for (let i = 0, l = keys.length; i < l; i++) {
        result.push(keys[i], obj[keys[i]]);
      }
      return result;
    }
    exports2.convertObjectToArray = convertObjectToArray;
    function convertMapToArray(map) {
      const result = [];
      let pos = 0;
      map.forEach(function(value, key) {
        result[pos] = key;
        result[pos + 1] = value;
        pos += 2;
      });
      return result;
    }
    exports2.convertMapToArray = convertMapToArray;
    function toArg(arg) {
      if (arg === null || typeof arg === "undefined") {
        return "";
      }
      return String(arg);
    }
    exports2.toArg = toArg;
    function optimizeErrorStack(error, friendlyStack, filterPath) {
      const stacks = friendlyStack.split("\n");
      let lines = "";
      let i;
      for (i = 1; i < stacks.length; ++i) {
        if (stacks[i].indexOf(filterPath) === -1) {
          break;
        }
      }
      for (let j = i; j < stacks.length; ++j) {
        lines += "\n" + stacks[j];
      }
      if (error.stack) {
        const pos = error.stack.indexOf("\n");
        error.stack = error.stack.slice(0, pos) + lines;
      }
      return error;
    }
    exports2.optimizeErrorStack = optimizeErrorStack;
    function parseURL(url) {
      if (isInt(url)) {
        return { port: url };
      }
      let parsed = (0, url_1.parse)(url, true, true);
      if (!parsed.slashes && url[0] !== "/") {
        url = "//" + url;
        parsed = (0, url_1.parse)(url, true, true);
      }
      const options = parsed.query || {};
      const result = {};
      if (parsed.auth) {
        const index = parsed.auth.indexOf(":");
        result.username = index === -1 ? parsed.auth : parsed.auth.slice(0, index);
        result.password = index === -1 ? "" : parsed.auth.slice(index + 1);
      }
      if (parsed.pathname) {
        if (parsed.protocol === "redis:" || parsed.protocol === "rediss:") {
          if (parsed.pathname.length > 1) {
            result.db = parsed.pathname.slice(1);
          }
        } else {
          result.path = parsed.pathname;
        }
      }
      if (parsed.host) {
        result.host = parsed.hostname;
      }
      if (parsed.port) {
        result.port = parsed.port;
      }
      if (typeof options.family === "string") {
        const intFamily = Number.parseInt(options.family, 10);
        if (!Number.isNaN(intFamily)) {
          result.family = intFamily;
        }
      }
      (0, lodash_1.defaults)(result, options);
      return result;
    }
    exports2.parseURL = parseURL;
    function resolveTLSProfile(options) {
      let tls = options === null || options === void 0 ? void 0 : options.tls;
      if (typeof tls === "string")
        tls = { profile: tls };
      const profile = TLSProfiles_1.default[tls === null || tls === void 0 ? void 0 : tls.profile];
      if (profile) {
        tls = Object.assign({}, profile, tls);
        delete tls.profile;
        options = Object.assign({}, options, { tls });
      }
      return options;
    }
    exports2.resolveTLSProfile = resolveTLSProfile;
    function sample(array, from = 0) {
      const length = array.length;
      if (from >= length) {
        return null;
      }
      return array[from + Math.floor(Math.random() * (length - from))];
    }
    exports2.sample = sample;
    function shuffle(array) {
      let counter = array.length;
      while (counter > 0) {
        const index = Math.floor(Math.random() * counter);
        counter--;
        [array[counter], array[index]] = [array[index], array[counter]];
      }
      return array;
    }
    exports2.shuffle = shuffle;
    exports2.CONNECTION_CLOSED_ERROR_MSG = "Connection is closed.";
    function zipMap(keys, values) {
      const map = /* @__PURE__ */ new Map();
      keys.forEach((key, index) => {
        map.set(key, values[index]);
      });
      return map;
    }
    exports2.zipMap = zipMap;
  }
});

var require_Command = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/Command.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var commands_1 = require_built();
    var calculateSlot = require_lib4();
    var standard_as_callback_1 = require_built2();
    var utils_1 = require_utils4();
    var Command = class _Command {
      /**
       * Creates an instance of Command.
       * @param name Command name
       * @param args An array of command arguments
       * @param options
       * @param callback The callback that handles the response.
       * If omit, the response will be handled via Promise
       */
      constructor(name, args = [], options = {}, callback) {
        this.name = name;
        this.inTransaction = false;
        this.isResolved = false;
        this.transformed = false;
        this.replyEncoding = options.replyEncoding;
        this.errorStack = options.errorStack;
        this.args = args.flat();
        this.callback = callback;
        this.initPromise();
        if (options.keyPrefix) {
          const isBufferKeyPrefix = options.keyPrefix instanceof Buffer;
          let keyPrefixBuffer = isBufferKeyPrefix ? options.keyPrefix : null;
          this._iterateKeys((key) => {
            if (key instanceof Buffer) {
              if (keyPrefixBuffer === null) {
                keyPrefixBuffer = Buffer.from(options.keyPrefix);
              }
              return Buffer.concat([keyPrefixBuffer, key]);
            } else if (isBufferKeyPrefix) {
              return Buffer.concat([options.keyPrefix, Buffer.from(String(key))]);
            }
            return options.keyPrefix + key;
          });
        }
        if (options.readOnly) {
          this.isReadOnly = true;
        }
      }
      /**
       * Check whether the command has the flag
       */
      static checkFlag(flagName, commandName) {
        return !!this.getFlagMap()[flagName][commandName];
      }
      static setArgumentTransformer(name, func) {
        this._transformer.argument[name] = func;
      }
      static setReplyTransformer(name, func) {
        this._transformer.reply[name] = func;
      }
      static getFlagMap() {
        if (!this.flagMap) {
          this.flagMap = Object.keys(_Command.FLAGS).reduce((map, flagName) => {
            map[flagName] = {};
            _Command.FLAGS[flagName].forEach((commandName) => {
              map[flagName][commandName] = true;
            });
            return map;
          }, {});
        }
        return this.flagMap;
      }
      getSlot() {
        if (typeof this.slot === "undefined") {
          const key = this.getKeys()[0];
          this.slot = key == null ? null : calculateSlot(key);
        }
        return this.slot;
      }
      getKeys() {
        return this._iterateKeys();
      }
      /**
       * Convert command to writable buffer or string
       */
      toWritable(_socket) {
        let result;
        const commandStr = "*" + (this.args.length + 1) + "\r\n$" + Buffer.byteLength(this.name) + "\r\n" + this.name + "\r\n";
        if (this.bufferMode) {
          const buffers = new MixedBuffers();
          buffers.push(commandStr);
          for (let i = 0; i < this.args.length; ++i) {
            const arg = this.args[i];
            if (arg instanceof Buffer) {
              if (arg.length === 0) {
                buffers.push("$0\r\n\r\n");
              } else {
                buffers.push("$" + arg.length + "\r\n");
                buffers.push(arg);
                buffers.push("\r\n");
              }
            } else {
              buffers.push("$" + Buffer.byteLength(arg) + "\r\n" + arg + "\r\n");
            }
          }
          result = buffers.toBuffer();
        } else {
          result = commandStr;
          for (let i = 0; i < this.args.length; ++i) {
            const arg = this.args[i];
            result += "$" + Buffer.byteLength(arg) + "\r\n" + arg + "\r\n";
          }
        }
        return result;
      }
      stringifyArguments() {
        for (let i = 0; i < this.args.length; ++i) {
          const arg = this.args[i];
          if (typeof arg === "string") {
          } else if (arg instanceof Buffer) {
            this.bufferMode = true;
          } else {
            this.args[i] = (0, utils_1.toArg)(arg);
          }
        }
      }
      /**
       * Convert buffer/buffer[] to string/string[],
       * and apply reply transformer.
       */
      transformReply(result) {
        if (this.replyEncoding) {
          result = (0, utils_1.convertBufferToString)(result, this.replyEncoding);
        }
        const transformer = _Command._transformer.reply[this.name];
        if (transformer) {
          result = transformer(result);
        }
        return result;
      }
      /**
       * Set the wait time before terminating the attempt to execute a command
       * and generating an error.
       */
      setTimeout(ms) {
        if (!this._commandTimeoutTimer) {
          this._commandTimeoutTimer = setTimeout(() => {
            if (!this.isResolved) {
              this.reject(new Error("Command timed out"));
            }
          }, ms);
        }
      }
      initPromise() {
        const promise = new Promise((resolve, reject) => {
          if (!this.transformed) {
            this.transformed = true;
            const transformer = _Command._transformer.argument[this.name];
            if (transformer) {
              this.args = transformer(this.args);
            }
            this.stringifyArguments();
          }
          this.resolve = this._convertValue(resolve);
          if (this.errorStack) {
            this.reject = (err) => {
              reject((0, utils_1.optimizeErrorStack)(err, this.errorStack.stack, __dirname));
            };
          } else {
            this.reject = reject;
          }
        });
        this.promise = (0, standard_as_callback_1.default)(promise, this.callback);
      }
      /**
       * Iterate through the command arguments that are considered keys.
       */
      _iterateKeys(transform = (key) => key) {
        if (typeof this.keys === "undefined") {
          this.keys = [];
          if ((0, commands_1.exists)(this.name)) {
            const keyIndexes = (0, commands_1.getKeyIndexes)(this.name, this.args);
            for (const index of keyIndexes) {
              this.args[index] = transform(this.args[index]);
              this.keys.push(this.args[index]);
            }
          }
        }
        return this.keys;
      }
      /**
       * Convert the value from buffer to the target encoding.
       */
      _convertValue(resolve) {
        return (value) => {
          try {
            const existingTimer = this._commandTimeoutTimer;
            if (existingTimer) {
              clearTimeout(existingTimer);
              delete this._commandTimeoutTimer;
            }
            resolve(this.transformReply(value));
            this.isResolved = true;
          } catch (err) {
            this.reject(err);
          }
          return this.promise;
        };
      }
    };
    exports2.default = Command;
    Command.FLAGS = {
      VALID_IN_SUBSCRIBER_MODE: [
        "subscribe",
        "psubscribe",
        "unsubscribe",
        "punsubscribe",
        "ssubscribe",
        "sunsubscribe",
        "ping",
        "quit"
      ],
      VALID_IN_MONITOR_MODE: ["monitor", "auth"],
      ENTER_SUBSCRIBER_MODE: ["subscribe", "psubscribe", "ssubscribe"],
      EXIT_SUBSCRIBER_MODE: ["unsubscribe", "punsubscribe", "sunsubscribe"],
      WILL_DISCONNECT: ["quit"]
    };
    Command._transformer = {
      argument: {},
      reply: {}
    };
    var msetArgumentTransformer = function(args) {
      if (args.length === 1) {
        if (args[0] instanceof Map) {
          return (0, utils_1.convertMapToArray)(args[0]);
        }
        if (typeof args[0] === "object" && args[0] !== null) {
          return (0, utils_1.convertObjectToArray)(args[0]);
        }
      }
      return args;
    };
    var hsetArgumentTransformer = function(args) {
      if (args.length === 2) {
        if (args[1] instanceof Map) {
          return [args[0]].concat((0, utils_1.convertMapToArray)(args[1]));
        }
        if (typeof args[1] === "object" && args[1] !== null) {
          return [args[0]].concat((0, utils_1.convertObjectToArray)(args[1]));
        }
      }
      return args;
    };
    Command.setArgumentTransformer("mset", msetArgumentTransformer);
    Command.setArgumentTransformer("msetnx", msetArgumentTransformer);
    Command.setArgumentTransformer("hset", hsetArgumentTransformer);
    Command.setArgumentTransformer("hmset", hsetArgumentTransformer);
    Command.setReplyTransformer("hgetall", function(result) {
      if (Array.isArray(result)) {
        const obj = {};
        for (let i = 0; i < result.length; i += 2) {
          const key = result[i];
          const value = result[i + 1];
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value,
              configurable: true,
              enumerable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
        }
        return obj;
      }
      return result;
    });
    var MixedBuffers = class {
      constructor() {
        this.length = 0;
        this.items = [];
      }
      push(x) {
        this.length += Buffer.byteLength(x);
        this.items.push(x);
      }
      toBuffer() {
        const result = Buffer.allocUnsafe(this.length);
        let offset = 0;
        for (const item of this.items) {
          const length = Buffer.byteLength(item);
          Buffer.isBuffer(item) ? item.copy(result, offset) : result.write(item, offset, length);
          offset += length;
        }
        return result;
      }
    };
  }
});

var require_ClusterAllFailedError = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/errors/ClusterAllFailedError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var redis_errors_1 = require_redis_errors();
    var ClusterAllFailedError = class extends redis_errors_1.RedisError {
      constructor(message, lastNodeError) {
        super(message);
        this.lastNodeError = lastNodeError;
        Error.captureStackTrace(this, this.constructor);
      }
      get name() {
        return this.constructor.name;
      }
    };
    exports2.default = ClusterAllFailedError;
    ClusterAllFailedError.defaultMessage = "Failed to refresh slots cache.";
  }
});

var require_ScanStream = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/ScanStream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var stream_1 = require("stream");
    var ScanStream = class extends stream_1.Readable {
      constructor(opt) {
        super(opt);
        this.opt = opt;
        this._redisCursor = "0";
        this._redisDrained = false;
      }
      _read() {
        if (this._redisDrained) {
          this.push(null);
          return;
        }
        const args = [this._redisCursor];
        if (this.opt.key) {
          args.unshift(this.opt.key);
        }
        if (this.opt.match) {
          args.push("MATCH", this.opt.match);
        }
        if (this.opt.type) {
          args.push("TYPE", this.opt.type);
        }
        if (this.opt.count) {
          args.push("COUNT", String(this.opt.count));
        }
        this.opt.redis[this.opt.command](args, (err, res) => {
          if (err) {
            this.emit("error", err);
            return;
          }
          this._redisCursor = res[0] instanceof Buffer ? res[0].toString() : res[0];
          if (this._redisCursor === "0") {
            this._redisDrained = true;
          }
          this.push(res[1]);
        });
      }
      close() {
        this._redisDrained = true;
      }
    };
    exports2.default = ScanStream;
  }
});

var require_autoPipelining = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/autoPipelining.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.executeWithAutoPipelining = exports2.getFirstValueInFlattenedArray = exports2.shouldUseAutoPipelining = exports2.notAllowedAutoPipelineCommands = exports2.kCallbacks = exports2.kExec = void 0;
    var lodash_1 = require_lodash3();
    var calculateSlot = require_lib4();
    var standard_as_callback_1 = require_built2();
    exports2.kExec = Symbol("exec");
    exports2.kCallbacks = Symbol("callbacks");
    exports2.notAllowedAutoPipelineCommands = [
      "auth",
      "info",
      "script",
      "quit",
      "cluster",
      "pipeline",
      "multi",
      "subscribe",
      "psubscribe",
      "unsubscribe",
      "unpsubscribe",
      "select"
    ];
    function executeAutoPipeline(client, slotKey) {
      if (client._runningAutoPipelines.has(slotKey)) {
        return;
      }
      if (!client._autoPipelines.has(slotKey)) {
        return;
      }
      client._runningAutoPipelines.add(slotKey);
      const pipeline = client._autoPipelines.get(slotKey);
      client._autoPipelines.delete(slotKey);
      const callbacks = pipeline[exports2.kCallbacks];
      pipeline[exports2.kCallbacks] = null;
      pipeline.exec(function(err, results) {
        client._runningAutoPipelines.delete(slotKey);
        if (err) {
          for (let i = 0; i < callbacks.length; i++) {
            process.nextTick(callbacks[i], err);
          }
        } else {
          for (let i = 0; i < callbacks.length; i++) {
            process.nextTick(callbacks[i], ...results[i]);
          }
        }
        if (client._autoPipelines.has(slotKey)) {
          executeAutoPipeline(client, slotKey);
        }
      });
    }
    function shouldUseAutoPipelining(client, functionName, commandName) {
      return functionName && client.options.enableAutoPipelining && !client.isPipeline && !exports2.notAllowedAutoPipelineCommands.includes(commandName) && !client.options.autoPipeliningIgnoredCommands.includes(commandName);
    }
    exports2.shouldUseAutoPipelining = shouldUseAutoPipelining;
    function getFirstValueInFlattenedArray(args) {
      for (let i = 0; i < args.length; i++) {
        const arg = args[i];
        if (typeof arg === "string") {
          return arg;
        } else if (Array.isArray(arg) || (0, lodash_1.isArguments)(arg)) {
          if (arg.length === 0) {
            continue;
          }
          return arg[0];
        }
        const flattened = [arg].flat();
        if (flattened.length > 0) {
          return flattened[0];
        }
      }
      return void 0;
    }
    exports2.getFirstValueInFlattenedArray = getFirstValueInFlattenedArray;
    function executeWithAutoPipelining(client, functionName, commandName, args, callback) {
      if (client.isCluster && !client.slots.length) {
        if (client.status === "wait")
          client.connect().catch(lodash_1.noop);
        return (0, standard_as_callback_1.default)(new Promise(function(resolve, reject) {
          client.delayUntilReady((err) => {
            if (err) {
              reject(err);
              return;
            }
            executeWithAutoPipelining(client, functionName, commandName, args, null).then(resolve, reject);
          });
        }), callback);
      }
      const prefix = client.options.keyPrefix || "";
      const slotKey = client.isCluster ? client.slots[calculateSlot(`${prefix}${getFirstValueInFlattenedArray(args)}`)].join(",") : "main";
      if (!client._autoPipelines.has(slotKey)) {
        const pipeline2 = client.pipeline();
        pipeline2[exports2.kExec] = false;
        pipeline2[exports2.kCallbacks] = [];
        client._autoPipelines.set(slotKey, pipeline2);
      }
      const pipeline = client._autoPipelines.get(slotKey);
      if (!pipeline[exports2.kExec]) {
        pipeline[exports2.kExec] = true;
        setImmediate(executeAutoPipeline, client, slotKey);
      }
      const autoPipelinePromise = new Promise(function(resolve, reject) {
        pipeline[exports2.kCallbacks].push(function(err, value) {
          if (err) {
            reject(err);
            return;
          }
          resolve(value);
        });
        if (functionName === "call") {
          args.unshift(commandName);
        }
        pipeline[functionName](...args);
      });
      return (0, standard_as_callback_1.default)(autoPipelinePromise, callback);
    }
    exports2.executeWithAutoPipelining = executeWithAutoPipelining;
  }
});

var require_Script = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/Script.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var crypto_1 = require("crypto");
    var Command_1 = require_Command();
    var standard_as_callback_1 = require_built2();
    var Script = class {
      constructor(lua, numberOfKeys = null, keyPrefix = "", readOnly = false) {
        this.lua = lua;
        this.numberOfKeys = numberOfKeys;
        this.keyPrefix = keyPrefix;
        this.readOnly = readOnly;
        this.sha = (0, crypto_1.createHash)("sha1").update(lua).digest("hex");
        const sha = this.sha;
        const socketHasScriptLoaded = /* @__PURE__ */ new WeakSet();
        this.Command = class CustomScriptCommand extends Command_1.default {
          toWritable(socket) {
            const origReject = this.reject;
            this.reject = (err) => {
              if (err.message.indexOf("NOSCRIPT") !== -1) {
                socketHasScriptLoaded.delete(socket);
              }
              origReject.call(this, err);
            };
            if (!socketHasScriptLoaded.has(socket)) {
              socketHasScriptLoaded.add(socket);
              this.name = "eval";
              this.args[0] = lua;
            } else if (this.name === "eval") {
              this.name = "evalsha";
              this.args[0] = sha;
            }
            return super.toWritable(socket);
          }
        };
      }
      execute(container, args, options, callback) {
        if (typeof this.numberOfKeys === "number") {
          args.unshift(this.numberOfKeys);
        }
        if (this.keyPrefix) {
          options.keyPrefix = this.keyPrefix;
        }
        if (this.readOnly) {
          options.readOnly = true;
        }
        const evalsha = new this.Command("evalsha", [this.sha, ...args], options);
        evalsha.promise = evalsha.promise.catch((err) => {
          if (err.message.indexOf("NOSCRIPT") === -1) {
            throw err;
          }
          const resend = new this.Command("evalsha", [this.sha, ...args], options);
          const client = container.isPipeline ? container.redis : container;
          return client.sendCommand(resend);
        });
        (0, standard_as_callback_1.default)(evalsha.promise, callback);
        return container.sendCommand(evalsha);
      }
    };
    exports2.default = Script;
  }
});

var require_Commander = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/utils/Commander.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var commands_1 = require_built();
    var autoPipelining_1 = require_autoPipelining();
    var Command_1 = require_Command();
    var Script_1 = require_Script();
    var Commander = class {
      constructor() {
        this.options = {};
        this.scriptsSet = {};
        this.addedBuiltinSet = /* @__PURE__ */ new Set();
      }
      /**
       * Return supported builtin commands
       */
      getBuiltinCommands() {
        return commands.slice(0);
      }
      /**
       * Create a builtin command
       */
      createBuiltinCommand(commandName) {
        return {
          string: generateFunction(null, commandName, "utf8"),
          buffer: generateFunction(null, commandName, null)
        };
      }
      /**
       * Create add builtin command
       */
      addBuiltinCommand(commandName) {
        this.addedBuiltinSet.add(commandName);
        this[commandName] = generateFunction(commandName, commandName, "utf8");
        this[commandName + "Buffer"] = generateFunction(commandName + "Buffer", commandName, null);
      }
      /**
       * Define a custom command using lua script
       */
      defineCommand(name, definition) {
        const script = new Script_1.default(definition.lua, definition.numberOfKeys, this.options.keyPrefix, definition.readOnly);
        this.scriptsSet[name] = script;
        this[name] = generateScriptingFunction(name, name, script, "utf8");
        this[name + "Buffer"] = generateScriptingFunction(name + "Buffer", name, script, null);
      }
      /**
       * @ignore
       */
      sendCommand(command, stream, node) {
        throw new Error('"sendCommand" is not implemented');
      }
    };
    var commands = commands_1.list.filter((command) => command !== "monitor");
    commands.push("sentinel");
    commands.forEach(function(commandName) {
      Commander.prototype[commandName] = generateFunction(commandName, commandName, "utf8");
      Commander.prototype[commandName + "Buffer"] = generateFunction(commandName + "Buffer", commandName, null);
    });
    Commander.prototype.call = generateFunction("call", "utf8");
    Commander.prototype.callBuffer = generateFunction("callBuffer", null);
    Commander.prototype.send_command = Commander.prototype.call;
    function generateFunction(functionName, _commandName, _encoding) {
      if (typeof _encoding === "undefined") {
        _encoding = _commandName;
        _commandName = null;
      }
      return function(...args) {
        const commandName = _commandName || args.shift();
        let callback = args[args.length - 1];
        if (typeof callback === "function") {
          args.pop();
        } else {
          callback = void 0;
        }
        const options = {
          errorStack: this.options.showFriendlyErrorStack ? new Error() : void 0,
          keyPrefix: this.options.keyPrefix,
          replyEncoding: _encoding
        };
        if (!(0, autoPipelining_1.shouldUseAutoPipelining)(this, functionName, commandName)) {
          return this.sendCommand(
            // @ts-expect-error
            new Command_1.default(commandName, args, options, callback)
          );
        }
        return (0, autoPipelining_1.executeWithAutoPipelining)(
          this,
          functionName,
          commandName,
          // @ts-expect-error
          args,
          callback
        );
      };
    }
    function generateScriptingFunction(functionName, commandName, script, encoding) {
      return function(...args) {
        const callback = typeof args[args.length - 1] === "function" ? args.pop() : void 0;
        const options = {
          replyEncoding: encoding
        };
        if (this.options.showFriendlyErrorStack) {
          options.errorStack = new Error();
        }
        if (!(0, autoPipelining_1.shouldUseAutoPipelining)(this, functionName, commandName)) {
          return script.execute(this, args, options, callback);
        }
        return (0, autoPipelining_1.executeWithAutoPipelining)(this, functionName, commandName, args, callback);
      };
    }
    exports2.default = Commander;
  }
});

var require_Pipeline = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/Pipeline.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var calculateSlot = require_lib4();
    var commands_1 = require_built();
    var standard_as_callback_1 = require_built2();
    var util_1 = require("util");
    var Command_1 = require_Command();
    var utils_1 = require_utils4();
    var Commander_1 = require_Commander();
    function generateMultiWithNodes(redis, keys) {
      const slot = calculateSlot(keys[0]);
      const target = redis._groupsBySlot[slot];
      for (let i = 1; i < keys.length; i++) {
        if (redis._groupsBySlot[calculateSlot(keys[i])] !== target) {
          return -1;
        }
      }
      return slot;
    }
    var Pipeline = class extends Commander_1.default {
      constructor(redis) {
        super();
        this.redis = redis;
        this.isPipeline = true;
        this.replyPending = 0;
        this._queue = [];
        this._result = [];
        this._transactions = 0;
        this._shaToScript = {};
        this.isCluster = this.redis.constructor.name === "Cluster" || this.redis.isCluster;
        this.options = redis.options;
        Object.keys(redis.scriptsSet).forEach((name) => {
          const script = redis.scriptsSet[name];
          this._shaToScript[script.sha] = script;
          this[name] = redis[name];
          this[name + "Buffer"] = redis[name + "Buffer"];
        });
        redis.addedBuiltinSet.forEach((name) => {
          this[name] = redis[name];
          this[name + "Buffer"] = redis[name + "Buffer"];
        });
        this.promise = new Promise((resolve, reject) => {
          this.resolve = resolve;
          this.reject = reject;
        });
        const _this = this;
        Object.defineProperty(this, "length", {
          get: function() {
            return _this._queue.length;
          }
        });
      }
      fillResult(value, position) {
        if (this._queue[position].name === "exec" && Array.isArray(value[1])) {
          const execLength = value[1].length;
          for (let i = 0; i < execLength; i++) {
            if (value[1][i] instanceof Error) {
              continue;
            }
            const cmd = this._queue[position - (execLength - i)];
            try {
              value[1][i] = cmd.transformReply(value[1][i]);
            } catch (err) {
              value[1][i] = err;
            }
          }
        }
        this._result[position] = value;
        if (--this.replyPending) {
          return;
        }
        if (this.isCluster) {
          let retriable = true;
          let commonError;
          for (let i = 0; i < this._result.length; ++i) {
            const error = this._result[i][0];
            const command = this._queue[i];
            if (error) {
              if (command.name === "exec" && error.message === "EXECABORT Transaction discarded because of previous errors.") {
                continue;
              }
              if (!commonError) {
                commonError = {
                  name: error.name,
                  message: error.message
                };
              } else if (commonError.name !== error.name || commonError.message !== error.message) {
                retriable = false;
                break;
              }
            } else if (!command.inTransaction) {
              const isReadOnly = (0, commands_1.exists)(command.name) && (0, commands_1.hasFlag)(command.name, "readonly");
              if (!isReadOnly) {
                retriable = false;
                break;
              }
            }
          }
          if (commonError && retriable) {
            const _this = this;
            const errv = commonError.message.split(" ");
            const queue = this._queue;
            let inTransaction = false;
            this._queue = [];
            for (let i = 0; i < queue.length; ++i) {
              if (errv[0] === "ASK" && !inTransaction && queue[i].name !== "asking" && (!queue[i - 1] || queue[i - 1].name !== "asking")) {
                const asking = new Command_1.default("asking");
                asking.ignore = true;
                this.sendCommand(asking);
              }
              queue[i].initPromise();
              this.sendCommand(queue[i]);
              inTransaction = queue[i].inTransaction;
            }
            let matched = true;
            if (typeof this.leftRedirections === "undefined") {
              this.leftRedirections = {};
            }
            const exec = function() {
              _this.exec();
            };
            const cluster = this.redis;
            cluster.handleError(commonError, this.leftRedirections, {
              moved: function(_slot, key) {
                _this.preferKey = key;
                cluster.slots[errv[1]] = [key];
                cluster._groupsBySlot[errv[1]] = cluster._groupsIds[cluster.slots[errv[1]].join(";")];
                cluster.refreshSlotsCache();
                _this.exec();
              },
              ask: function(_slot, key) {
                _this.preferKey = key;
                _this.exec();
              },
              tryagain: exec,
              clusterDown: exec,
              connectionClosed: exec,
              maxRedirections: () => {
                matched = false;
              },
              defaults: () => {
                matched = false;
              }
            });
            if (matched) {
              return;
            }
          }
        }
        let ignoredCount = 0;
        for (let i = 0; i < this._queue.length - ignoredCount; ++i) {
          if (this._queue[i + ignoredCount].ignore) {
            ignoredCount += 1;
          }
          this._result[i] = this._result[i + ignoredCount];
        }
        this.resolve(this._result.slice(0, this._result.length - ignoredCount));
      }
      sendCommand(command) {
        if (this._transactions > 0) {
          command.inTransaction = true;
        }
        const position = this._queue.length;
        command.pipelineIndex = position;
        command.promise.then((result) => {
          this.fillResult([null, result], position);
        }).catch((error) => {
          this.fillResult([error], position);
        });
        this._queue.push(command);
        return this;
      }
      addBatch(commands) {
        let command, commandName, args;
        for (let i = 0; i < commands.length; ++i) {
          command = commands[i];
          commandName = command[0];
          args = command.slice(1);
          this[commandName].apply(this, args);
        }
        return this;
      }
    };
    exports2.default = Pipeline;
    var multi = Pipeline.prototype.multi;
    Pipeline.prototype.multi = function() {
      this._transactions += 1;
      return multi.apply(this, arguments);
    };
    var execBuffer = Pipeline.prototype.execBuffer;
    Pipeline.prototype.execBuffer = (0, util_1.deprecate)(function() {
      if (this._transactions > 0) {
        this._transactions -= 1;
      }
      return execBuffer.apply(this, arguments);
    }, "Pipeline#execBuffer: Use Pipeline#exec instead");
    Pipeline.prototype.exec = function(callback) {
      if (this.isCluster && !this.redis.slots.length) {
        if (this.redis.status === "wait")
          this.redis.connect().catch(utils_1.noop);
        if (callback && !this.nodeifiedPromise) {
          this.nodeifiedPromise = true;
          (0, standard_as_callback_1.default)(this.promise, callback);
        }
        this.redis.delayUntilReady((err) => {
          if (err) {
            this.reject(err);
            return;
          }
          this.exec(callback);
        });
        return this.promise;
      }
      if (this._transactions > 0) {
        this._transactions -= 1;
        return execBuffer.apply(this, arguments);
      }
      if (!this.nodeifiedPromise) {
        this.nodeifiedPromise = true;
        (0, standard_as_callback_1.default)(this.promise, callback);
      }
      if (!this._queue.length) {
        this.resolve([]);
      }
      let pipelineSlot;
      if (this.isCluster) {
        const sampleKeys = [];
        for (let i = 0; i < this._queue.length; i++) {
          const keys = this._queue[i].getKeys();
          if (keys.length) {
            sampleKeys.push(keys[0]);
          }
          if (keys.length && calculateSlot.generateMulti(keys) < 0) {
            this.reject(new Error("All the keys in a pipeline command should belong to the same slot"));
            return this.promise;
          }
        }
        if (sampleKeys.length) {
          pipelineSlot = generateMultiWithNodes(this.redis, sampleKeys);
          if (pipelineSlot < 0) {
            this.reject(new Error("All keys in the pipeline should belong to the same slots allocation group"));
            return this.promise;
          }
        } else {
          pipelineSlot = Math.random() * 16384 | 0;
        }
      }
      const _this = this;
      execPipeline();
      return this.promise;
      function execPipeline() {
        let writePending = _this.replyPending = _this._queue.length;
        let node;
        if (_this.isCluster) {
          node = {
            slot: pipelineSlot,
            redis: _this.redis.connectionPool.nodes.all[_this.preferKey]
          };
        }
        let data = "";
        let buffers;
        const stream = {
          isPipeline: true,
          destination: _this.isCluster ? node : { redis: _this.redis },
          write(writable) {
            if (typeof writable !== "string") {
              if (!buffers) {
                buffers = [];
              }
              if (data) {
                buffers.push(Buffer.from(data, "utf8"));
                data = "";
              }
              buffers.push(writable);
            } else {
              data += writable;
            }
            if (!--writePending) {
              if (buffers) {
                if (data) {
                  buffers.push(Buffer.from(data, "utf8"));
                }
                stream.destination.redis.stream.write(Buffer.concat(buffers));
              } else {
                stream.destination.redis.stream.write(data);
              }
              writePending = _this._queue.length;
              data = "";
              buffers = void 0;
            }
          }
        };
        for (let i = 0; i < _this._queue.length; ++i) {
          _this.redis.sendCommand(_this._queue[i], stream, node);
        }
        return _this.promise;
      }
    };
  }
});

var require_transaction = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/transaction.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.addTransactionSupport = void 0;
    var utils_1 = require_utils4();
    var standard_as_callback_1 = require_built2();
    var Pipeline_1 = require_Pipeline();
    function addTransactionSupport(redis) {
      redis.pipeline = function(commands) {
        const pipeline = new Pipeline_1.default(this);
        if (Array.isArray(commands)) {
          pipeline.addBatch(commands);
        }
        return pipeline;
      };
      const { multi } = redis;
      redis.multi = function(commands, options) {
        if (typeof options === "undefined" && !Array.isArray(commands)) {
          options = commands;
          commands = null;
        }
        if (options && options.pipeline === false) {
          return multi.call(this);
        }
        const pipeline = new Pipeline_1.default(this);
        pipeline.multi();
        if (Array.isArray(commands)) {
          pipeline.addBatch(commands);
        }
        const exec2 = pipeline.exec;
        pipeline.exec = function(callback) {
          if (this.isCluster && !this.redis.slots.length) {
            if (this.redis.status === "wait")
              this.redis.connect().catch(utils_1.noop);
            return (0, standard_as_callback_1.default)(new Promise((resolve, reject) => {
              this.redis.delayUntilReady((err) => {
                if (err) {
                  reject(err);
                  return;
                }
                this.exec(pipeline).then(resolve, reject);
              });
            }), callback);
          }
          if (this._transactions > 0) {
            exec2.call(pipeline);
          }
          if (this.nodeifiedPromise) {
            return exec2.call(pipeline);
          }
          const promise = exec2.call(pipeline);
          return (0, standard_as_callback_1.default)(promise.then(function(result) {
            const execResult = result[result.length - 1];
            if (typeof execResult === "undefined") {
              throw new Error("Pipeline cannot be used to send any commands when the `exec()` has been called on it.");
            }
            if (execResult[0]) {
              execResult[0].previousErrors = [];
              for (let i = 0; i < result.length - 1; ++i) {
                if (result[i][0]) {
                  execResult[0].previousErrors.push(result[i][0]);
                }
              }
              throw execResult[0];
            }
            return (0, utils_1.wrapMultiResult)(execResult[1]);
          }), callback);
        };
        const { execBuffer } = pipeline;
        pipeline.execBuffer = function(callback) {
          if (this._transactions > 0) {
            execBuffer.call(pipeline);
          }
          return pipeline.exec(callback);
        };
        return pipeline;
      };
      const { exec } = redis;
      redis.exec = function(callback) {
        return (0, standard_as_callback_1.default)(exec.call(this).then(function(results) {
          if (Array.isArray(results)) {
            results = (0, utils_1.wrapMultiResult)(results);
          }
          return results;
        }), callback);
      };
    }
    exports2.addTransactionSupport = addTransactionSupport;
  }
});

var require_applyMixin = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/utils/applyMixin.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function applyMixin(derivedConstructor, mixinConstructor) {
      Object.getOwnPropertyNames(mixinConstructor.prototype).forEach((name) => {
        Object.defineProperty(derivedConstructor.prototype, name, Object.getOwnPropertyDescriptor(mixinConstructor.prototype, name));
      });
    }
    exports2.default = applyMixin;
  }
});

var require_ClusterOptions = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/cluster/ClusterOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DEFAULT_CLUSTER_OPTIONS = void 0;
    var dns_1 = require("dns");
    exports2.DEFAULT_CLUSTER_OPTIONS = {
      clusterRetryStrategy: (times) => Math.min(100 + times * 2, 2e3),
      enableOfflineQueue: true,
      enableReadyCheck: true,
      scaleReads: "master",
      maxRedirections: 16,
      retryDelayOnMoved: 0,
      retryDelayOnFailover: 100,
      retryDelayOnClusterDown: 100,
      retryDelayOnTryAgain: 100,
      slotsRefreshTimeout: 1e3,
      useSRVRecords: false,
      resolveSrv: dns_1.resolveSrv,
      dnsLookup: dns_1.lookup,
      enableAutoPipelining: false,
      autoPipeliningIgnoredCommands: []
    };
  }
});

var require_util6 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/cluster/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getConnectionName = exports2.weightSrvRecords = exports2.groupSrvRecords = exports2.getUniqueHostnamesFromOptions = exports2.normalizeNodeOptions = exports2.nodeKeyToRedisOptions = exports2.getNodeKey = void 0;
    var utils_1 = require_utils4();
    var net_1 = require("net");
    function getNodeKey(node) {
      node.port = node.port || 6379;
      node.host = node.host || "127.0.0.1";
      return node.host + ":" + node.port;
    }
    exports2.getNodeKey = getNodeKey;
    function nodeKeyToRedisOptions(nodeKey) {
      const portIndex = nodeKey.lastIndexOf(":");
      if (portIndex === -1) {
        throw new Error(`Invalid node key ${nodeKey}`);
      }
      return {
        host: nodeKey.slice(0, portIndex),
        port: Number(nodeKey.slice(portIndex + 1))
      };
    }
    exports2.nodeKeyToRedisOptions = nodeKeyToRedisOptions;
    function normalizeNodeOptions(nodes) {
      return nodes.map((node) => {
        const options = {};
        if (typeof node === "object") {
          Object.assign(options, node);
        } else if (typeof node === "string") {
          Object.assign(options, (0, utils_1.parseURL)(node));
        } else if (typeof node === "number") {
          options.port = node;
        } else {
          throw new Error("Invalid argument " + node);
        }
        if (typeof options.port === "string") {
          options.port = parseInt(options.port, 10);
        }
        delete options.db;
        if (!options.port) {
          options.port = 6379;
        }
        if (!options.host) {
          options.host = "127.0.0.1";
        }
        return (0, utils_1.resolveTLSProfile)(options);
      });
    }
    exports2.normalizeNodeOptions = normalizeNodeOptions;
    function getUniqueHostnamesFromOptions(nodes) {
      const uniqueHostsMap = {};
      nodes.forEach((node) => {
        uniqueHostsMap[node.host] = true;
      });
      return Object.keys(uniqueHostsMap).filter((host) => !(0, net_1.isIP)(host));
    }
    exports2.getUniqueHostnamesFromOptions = getUniqueHostnamesFromOptions;
    function groupSrvRecords(records) {
      const recordsByPriority = {};
      for (const record of records) {
        if (!recordsByPriority.hasOwnProperty(record.priority)) {
          recordsByPriority[record.priority] = {
            totalWeight: record.weight,
            records: [record]
          };
        } else {
          recordsByPriority[record.priority].totalWeight += record.weight;
          recordsByPriority[record.priority].records.push(record);
        }
      }
      return recordsByPriority;
    }
    exports2.groupSrvRecords = groupSrvRecords;
    function weightSrvRecords(recordsGroup) {
      if (recordsGroup.records.length === 1) {
        recordsGroup.totalWeight = 0;
        return recordsGroup.records.shift();
      }
      const random = Math.floor(Math.random() * (recordsGroup.totalWeight + recordsGroup.records.length));
      let total = 0;
      for (const [i, record] of recordsGroup.records.entries()) {
        total += 1 + record.weight;
        if (total > random) {
          recordsGroup.totalWeight -= record.weight;
          recordsGroup.records.splice(i, 1);
          return record;
        }
      }
    }
    exports2.weightSrvRecords = weightSrvRecords;
    function getConnectionName(component, nodeConnectionName) {
      const prefix = `ioredis-cluster(${component})`;
      return nodeConnectionName ? `${prefix}:${nodeConnectionName}` : prefix;
    }
    exports2.getConnectionName = getConnectionName;
  }
});

var require_ClusterSubscriber = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/cluster/ClusterSubscriber.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var util_1 = require_util6();
    var utils_1 = require_utils4();
    var Redis_1 = require_Redis();
    var debug = (0, utils_1.Debug)("cluster:subscriber");
    var ClusterSubscriber = class {
      constructor(connectionPool, emitter) {
        this.connectionPool = connectionPool;
        this.emitter = emitter;
        this.started = false;
        this.subscriber = null;
        this.onSubscriberEnd = () => {
          if (!this.started) {
            debug("subscriber has disconnected, but ClusterSubscriber is not started, so not reconnecting.");
            return;
          }
          debug("subscriber has disconnected, selecting a new one...");
          this.selectSubscriber();
        };
        this.connectionPool.on("-node", (_, key) => {
          if (!this.started || !this.subscriber) {
            return;
          }
          if ((0, util_1.getNodeKey)(this.subscriber.options) === key) {
            debug("subscriber has left, selecting a new one...");
            this.selectSubscriber();
          }
        });
        this.connectionPool.on("+node", () => {
          if (!this.started || this.subscriber) {
            return;
          }
          debug("a new node is discovered and there is no subscriber, selecting a new one...");
          this.selectSubscriber();
        });
      }
      getInstance() {
        return this.subscriber;
      }
      start() {
        this.started = true;
        this.selectSubscriber();
        debug("started");
      }
      stop() {
        this.started = false;
        if (this.subscriber) {
          this.subscriber.disconnect();
          this.subscriber = null;
        }
        debug("stopped");
      }
      selectSubscriber() {
        const lastActiveSubscriber = this.lastActiveSubscriber;
        if (lastActiveSubscriber) {
          lastActiveSubscriber.off("end", this.onSubscriberEnd);
          lastActiveSubscriber.disconnect();
        }
        if (this.subscriber) {
          this.subscriber.off("end", this.onSubscriberEnd);
          this.subscriber.disconnect();
        }
        const sampleNode = (0, utils_1.sample)(this.connectionPool.getNodes());
        if (!sampleNode) {
          debug("selecting subscriber failed since there is no node discovered in the cluster yet");
          this.subscriber = null;
          return;
        }
        const { options } = sampleNode;
        debug("selected a subscriber %s:%s", options.host, options.port);
        this.subscriber = new Redis_1.default({
          port: options.port,
          host: options.host,
          username: options.username,
          password: options.password,
          enableReadyCheck: true,
          connectionName: (0, util_1.getConnectionName)("subscriber", options.connectionName),
          lazyConnect: true,
          tls: options.tls,
          // Don't try to reconnect the subscriber connection. If the connection fails
          // we will get an end event (handled below), at which point we'll pick a new
          // node from the pool and try to connect to that as the subscriber connection.
          retryStrategy: null
        });
        this.subscriber.on("error", utils_1.noop);
        this.subscriber.once("end", this.onSubscriberEnd);
        const previousChannels = { subscribe: [], psubscribe: [], ssubscribe: [] };
        if (lastActiveSubscriber) {
          const condition = lastActiveSubscriber.condition || lastActiveSubscriber.prevCondition;
          if (condition && condition.subscriber) {
            previousChannels.subscribe = condition.subscriber.channels("subscribe");
            previousChannels.psubscribe = condition.subscriber.channels("psubscribe");
            previousChannels.ssubscribe = condition.subscriber.channels("ssubscribe");
          }
        }
        if (previousChannels.subscribe.length || previousChannels.psubscribe.length || previousChannels.ssubscribe.length) {
          let pending = 0;
          for (const type of ["subscribe", "psubscribe", "ssubscribe"]) {
            const channels = previousChannels[type];
            if (channels.length) {
              pending += 1;
              debug("%s %d channels", type, channels.length);
              this.subscriber[type](channels).then(() => {
                if (!--pending) {
                  this.lastActiveSubscriber = this.subscriber;
                }
              }).catch(() => {
                debug("failed to %s %d channels", type, channels.length);
              });
            }
          }
        } else {
          this.lastActiveSubscriber = this.subscriber;
        }
        for (const event of [
          "message",
          "messageBuffer",
          "smessage",
          "smessageBuffer"
        ]) {
          this.subscriber.on(event, (arg1, arg2) => {
            this.emitter.emit(event, arg1, arg2);
          });
        }
        for (const event of ["pmessage", "pmessageBuffer"]) {
          this.subscriber.on(event, (arg1, arg2, arg3) => {
            this.emitter.emit(event, arg1, arg2, arg3);
          });
        }
      }
    };
    exports2.default = ClusterSubscriber;
  }
});

var require_ConnectionPool = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/cluster/ConnectionPool.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var events_1 = require("events");
    var utils_1 = require_utils4();
    var util_1 = require_util6();
    var Redis_1 = require_Redis();
    var debug = (0, utils_1.Debug)("cluster:connectionPool");
    var ConnectionPool = class extends events_1.EventEmitter {
      constructor(redisOptions) {
        super();
        this.redisOptions = redisOptions;
        this.nodes = {
          all: {},
          master: {},
          slave: {}
        };
        this.specifiedOptions = {};
      }
      getNodes(role = "all") {
        const nodes = this.nodes[role];
        return Object.keys(nodes).map((key) => nodes[key]);
      }
      getInstanceByKey(key) {
        return this.nodes.all[key];
      }
      getSampleInstance(role) {
        const keys = Object.keys(this.nodes[role]);
        const sampleKey = (0, utils_1.sample)(keys);
        return this.nodes[role][sampleKey];
      }
      /**
       * Find or create a connection to the node
       */
      findOrCreate(node, readOnly = false) {
        const key = (0, util_1.getNodeKey)(node);
        readOnly = Boolean(readOnly);
        if (this.specifiedOptions[key]) {
          Object.assign(node, this.specifiedOptions[key]);
        } else {
          this.specifiedOptions[key] = node;
        }
        let redis;
        if (this.nodes.all[key]) {
          redis = this.nodes.all[key];
          if (redis.options.readOnly !== readOnly) {
            redis.options.readOnly = readOnly;
            debug("Change role of %s to %s", key, readOnly ? "slave" : "master");
            redis[readOnly ? "readonly" : "readwrite"]().catch(utils_1.noop);
            if (readOnly) {
              delete this.nodes.master[key];
              this.nodes.slave[key] = redis;
            } else {
              delete this.nodes.slave[key];
              this.nodes.master[key] = redis;
            }
          }
        } else {
          debug("Connecting to %s as %s", key, readOnly ? "slave" : "master");
          redis = new Redis_1.default((0, utils_1.defaults)({
            // Never try to reconnect when a node is lose,
            // instead, waiting for a `MOVED` error and
            // fetch the slots again.
            retryStrategy: null,
            // Offline queue should be enabled so that
            // we don't need to wait for the `ready` event
            // before sending commands to the node.
            enableOfflineQueue: true,
            readOnly
          }, node, this.redisOptions, { lazyConnect: true }));
          this.nodes.all[key] = redis;
          this.nodes[readOnly ? "slave" : "master"][key] = redis;
          redis.once("end", () => {
            this.removeNode(key);
            this.emit("-node", redis, key);
            if (!Object.keys(this.nodes.all).length) {
              this.emit("drain");
            }
          });
          this.emit("+node", redis, key);
          redis.on("error", function(error) {
            this.emit("nodeError", error, key);
          });
        }
        return redis;
      }
      /**
       * Reset the pool with a set of nodes.
       * The old node will be removed.
       */
      reset(nodes) {
        debug("Reset with %O", nodes);
        const newNodes = {};
        nodes.forEach((node) => {
          const key = (0, util_1.getNodeKey)(node);
          if (!(node.readOnly && newNodes[key])) {
            newNodes[key] = node;
          }
        });
        Object.keys(this.nodes.all).forEach((key) => {
          if (!newNodes[key]) {
            debug("Disconnect %s because the node does not hold any slot", key);
            this.nodes.all[key].disconnect();
            this.removeNode(key);
          }
        });
        Object.keys(newNodes).forEach((key) => {
          const node = newNodes[key];
          this.findOrCreate(node, node.readOnly);
        });
      }
      /**
       * Remove a node from the pool.
       */
      removeNode(key) {
        const { nodes } = this;
        if (nodes.all[key]) {
          debug("Remove %s from the pool", key);
          delete nodes.all[key];
        }
        delete nodes.master[key];
        delete nodes.slave[key];
      }
    };
    exports2.default = ConnectionPool;
  }
});

var require_denque = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/denque/index.js"(exports2, module2) {
    "use strict";
    function Denque(array, options) {
      var options = options || {};
      this._capacity = options.capacity;
      this._head = 0;
      this._tail = 0;
      if (Array.isArray(array)) {
        this._fromArray(array);
      } else {
        this._capacityMask = 3;
        this._list = new Array(4);
      }
    }
    Denque.prototype.peekAt = function peekAt(index) {
      var i = index;
      if (i !== (i | 0)) {
        return void 0;
      }
      var len = this.size();
      if (i >= len || i < -len)
        return void 0;
      if (i < 0)
        i += len;
      i = this._head + i & this._capacityMask;
      return this._list[i];
    };
    Denque.prototype.get = function get(i) {
      return this.peekAt(i);
    };
    Denque.prototype.peek = function peek() {
      if (this._head === this._tail)
        return void 0;
      return this._list[this._head];
    };
    Denque.prototype.peekFront = function peekFront() {
      return this.peek();
    };
    Denque.prototype.peekBack = function peekBack() {
      return this.peekAt(-1);
    };
    Object.defineProperty(Denque.prototype, "length", {
      get: function length() {
        return this.size();
      }
    });
    Denque.prototype.size = function size() {
      if (this._head === this._tail)
        return 0;
      if (this._head < this._tail)
        return this._tail - this._head;
      else
        return this._capacityMask + 1 - (this._head - this._tail);
    };
    Denque.prototype.unshift = function unshift(item) {
      if (arguments.length === 0)
        return this.size();
      var len = this._list.length;
      this._head = this._head - 1 + len & this._capacityMask;
      this._list[this._head] = item;
      if (this._tail === this._head)
        this._growArray();
      if (this._capacity && this.size() > this._capacity)
        this.pop();
      if (this._head < this._tail)
        return this._tail - this._head;
      else
        return this._capacityMask + 1 - (this._head - this._tail);
    };
    Denque.prototype.shift = function shift() {
      var head = this._head;
      if (head === this._tail)
        return void 0;
      var item = this._list[head];
      this._list[head] = void 0;
      this._head = head + 1 & this._capacityMask;
      if (head < 2 && this._tail > 1e4 && this._tail <= this._list.length >>> 2)
        this._shrinkArray();
      return item;
    };
    Denque.prototype.push = function push(item) {
      if (arguments.length === 0)
        return this.size();
      var tail = this._tail;
      this._list[tail] = item;
      this._tail = tail + 1 & this._capacityMask;
      if (this._tail === this._head) {
        this._growArray();
      }
      if (this._capacity && this.size() > this._capacity) {
        this.shift();
      }
      if (this._head < this._tail)
        return this._tail - this._head;
      else
        return this._capacityMask + 1 - (this._head - this._tail);
    };
    Denque.prototype.pop = function pop() {
      var tail = this._tail;
      if (tail === this._head)
        return void 0;
      var len = this._list.length;
      this._tail = tail - 1 + len & this._capacityMask;
      var item = this._list[this._tail];
      this._list[this._tail] = void 0;
      if (this._head < 2 && tail > 1e4 && tail <= len >>> 2)
        this._shrinkArray();
      return item;
    };
    Denque.prototype.removeOne = function removeOne(index) {
      var i = index;
      if (i !== (i | 0)) {
        return void 0;
      }
      if (this._head === this._tail)
        return void 0;
      var size = this.size();
      var len = this._list.length;
      if (i >= size || i < -size)
        return void 0;
      if (i < 0)
        i += size;
      i = this._head + i & this._capacityMask;
      var item = this._list[i];
      var k;
      if (index < size / 2) {
        for (k = index; k > 0; k--) {
          this._list[i] = this._list[i = i - 1 + len & this._capacityMask];
        }
        this._list[i] = void 0;
        this._head = this._head + 1 + len & this._capacityMask;
      } else {
        for (k = size - 1 - index; k > 0; k--) {
          this._list[i] = this._list[i = i + 1 + len & this._capacityMask];
        }
        this._list[i] = void 0;
        this._tail = this._tail - 1 + len & this._capacityMask;
      }
      return item;
    };
    Denque.prototype.remove = function remove(index, count) {
      var i = index;
      var removed;
      var del_count = count;
      if (i !== (i | 0)) {
        return void 0;
      }
      if (this._head === this._tail)
        return void 0;
      var size = this.size();
      var len = this._list.length;
      if (i >= size || i < -size || count < 1)
        return void 0;
      if (i < 0)
        i += size;
      if (count === 1 || !count) {
        removed = new Array(1);
        removed[0] = this.removeOne(i);
        return removed;
      }
      if (i === 0 && i + count >= size) {
        removed = this.toArray();
        this.clear();
        return removed;
      }
      if (i + count > size)
        count = size - i;
      var k;
      removed = new Array(count);
      for (k = 0; k < count; k++) {
        removed[k] = this._list[this._head + i + k & this._capacityMask];
      }
      i = this._head + i & this._capacityMask;
      if (index + count === size) {
        this._tail = this._tail - count + len & this._capacityMask;
        for (k = count; k > 0; k--) {
          this._list[i = i + 1 + len & this._capacityMask] = void 0;
        }
        return removed;
      }
      if (index === 0) {
        this._head = this._head + count + len & this._capacityMask;
        for (k = count - 1; k > 0; k--) {
          this._list[i = i + 1 + len & this._capacityMask] = void 0;
        }
        return removed;
      }
      if (i < size / 2) {
        this._head = this._head + index + count + len & this._capacityMask;
        for (k = index; k > 0; k--) {
          this.unshift(this._list[i = i - 1 + len & this._capacityMask]);
        }
        i = this._head - 1 + len & this._capacityMask;
        while (del_count > 0) {
          this._list[i = i - 1 + len & this._capacityMask] = void 0;
          del_count--;
        }
        if (index < 0)
          this._tail = i;
      } else {
        this._tail = i;
        i = i + count + len & this._capacityMask;
        for (k = size - (count + index); k > 0; k--) {
          this.push(this._list[i++]);
        }
        i = this._tail;
        while (del_count > 0) {
          this._list[i = i + 1 + len & this._capacityMask] = void 0;
          del_count--;
        }
      }
      if (this._head < 2 && this._tail > 1e4 && this._tail <= len >>> 2)
        this._shrinkArray();
      return removed;
    };
    Denque.prototype.splice = function splice(index, count) {
      var i = index;
      if (i !== (i | 0)) {
        return void 0;
      }
      var size = this.size();
      if (i < 0)
        i += size;
      if (i > size)
        return void 0;
      if (arguments.length > 2) {
        var k;
        var temp;
        var removed;
        var arg_len = arguments.length;
        var len = this._list.length;
        var arguments_index = 2;
        if (!size || i < size / 2) {
          temp = new Array(i);
          for (k = 0; k < i; k++) {
            temp[k] = this._list[this._head + k & this._capacityMask];
          }
          if (count === 0) {
            removed = [];
            if (i > 0) {
              this._head = this._head + i + len & this._capacityMask;
            }
          } else {
            removed = this.remove(i, count);
            this._head = this._head + i + len & this._capacityMask;
          }
          while (arg_len > arguments_index) {
            this.unshift(arguments[--arg_len]);
          }
          for (k = i; k > 0; k--) {
            this.unshift(temp[k - 1]);
          }
        } else {
          temp = new Array(size - (i + count));
          var leng = temp.length;
          for (k = 0; k < leng; k++) {
            temp[k] = this._list[this._head + i + count + k & this._capacityMask];
          }
          if (count === 0) {
            removed = [];
            if (i != size) {
              this._tail = this._head + i + len & this._capacityMask;
            }
          } else {
            removed = this.remove(i, count);
            this._tail = this._tail - leng + len & this._capacityMask;
          }
          while (arguments_index < arg_len) {
            this.push(arguments[arguments_index++]);
          }
          for (k = 0; k < leng; k++) {
            this.push(temp[k]);
          }
        }
        return removed;
      } else {
        return this.remove(i, count);
      }
    };
    Denque.prototype.clear = function clear() {
      this._list = new Array(this._list.length);
      this._head = 0;
      this._tail = 0;
    };
    Denque.prototype.isEmpty = function isEmpty() {
      return this._head === this._tail;
    };
    Denque.prototype.toArray = function toArray() {
      return this._copyArray(false);
    };
    Denque.prototype._fromArray = function _fromArray(array) {
      var length = array.length;
      var capacity = this._nextPowerOf2(length);
      this._list = new Array(capacity);
      this._capacityMask = capacity - 1;
      this._tail = length;
      for (var i = 0; i < length; i++)
        this._list[i] = array[i];
    };
    Denque.prototype._copyArray = function _copyArray(fullCopy, size) {
      var src = this._list;
      var capacity = src.length;
      var length = this.length;
      size = size | length;
      if (size == length && this._head < this._tail) {
        return this._list.slice(this._head, this._tail);
      }
      var dest = new Array(size);
      var k = 0;
      var i;
      if (fullCopy || this._head > this._tail) {
        for (i = this._head; i < capacity; i++)
          dest[k++] = src[i];
        for (i = 0; i < this._tail; i++)
          dest[k++] = src[i];
      } else {
        for (i = this._head; i < this._tail; i++)
          dest[k++] = src[i];
      }
      return dest;
    };
    Denque.prototype._growArray = function _growArray() {
      if (this._head != 0) {
        var newList = this._copyArray(true, this._list.length << 1);
        this._tail = this._list.length;
        this._head = 0;
        this._list = newList;
      } else {
        this._tail = this._list.length;
        this._list.length <<= 1;
      }
      this._capacityMask = this._capacityMask << 1 | 1;
    };
    Denque.prototype._shrinkArray = function _shrinkArray() {
      this._list.length >>>= 1;
      this._capacityMask >>>= 1;
    };
    Denque.prototype._nextPowerOf2 = function _nextPowerOf2(num) {
      var log2 = Math.log(num) / Math.log(2);
      var nextPow2 = 1 << log2 + 1;
      return Math.max(nextPow2, 4);
    };
    module2.exports = Denque;
  }
});

var require_DelayQueue = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/cluster/DelayQueue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var utils_1 = require_utils4();
    var Deque = require_denque();
    var debug = (0, utils_1.Debug)("delayqueue");
    var DelayQueue = class {
      constructor() {
        this.queues = {};
        this.timeouts = {};
      }
      /**
       * Add a new item to the queue
       *
       * @param bucket bucket name
       * @param item function that will run later
       * @param options
       */
      push(bucket, item, options) {
        const callback = options.callback || process.nextTick;
        if (!this.queues[bucket]) {
          this.queues[bucket] = new Deque();
        }
        const queue = this.queues[bucket];
        queue.push(item);
        if (!this.timeouts[bucket]) {
          this.timeouts[bucket] = setTimeout(() => {
            callback(() => {
              this.timeouts[bucket] = null;
              this.execute(bucket);
            });
          }, options.timeout);
        }
      }
      execute(bucket) {
        const queue = this.queues[bucket];
        if (!queue) {
          return;
        }
        const { length } = queue;
        if (!length) {
          return;
        }
        debug("send %d commands in %s queue", length, bucket);
        this.queues[bucket] = null;
        while (queue.length > 0) {
          queue.shift()();
        }
      }
    };
    exports2.default = DelayQueue;
  }
});

var require_cluster = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/cluster/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var commands_1 = require_built();
    var events_1 = require("events");
    var redis_errors_1 = require_redis_errors();
    var standard_as_callback_1 = require_built2();
    var Command_1 = require_Command();
    var ClusterAllFailedError_1 = require_ClusterAllFailedError();
    var Redis_1 = require_Redis();
    var ScanStream_1 = require_ScanStream();
    var transaction_1 = require_transaction();
    var utils_1 = require_utils4();
    var applyMixin_1 = require_applyMixin();
    var Commander_1 = require_Commander();
    var ClusterOptions_1 = require_ClusterOptions();
    var ClusterSubscriber_1 = require_ClusterSubscriber();
    var ConnectionPool_1 = require_ConnectionPool();
    var DelayQueue_1 = require_DelayQueue();
    var util_1 = require_util6();
    var Deque = require_denque();
    var debug = (0, utils_1.Debug)("cluster");
    var REJECT_OVERWRITTEN_COMMANDS = /* @__PURE__ */ new WeakSet();
    var Cluster = class _Cluster extends Commander_1.default {
      /**
       * Creates an instance of Cluster.
       */
      constructor(startupNodes, options = {}) {
        super();
        this.slots = [];
        this._groupsIds = {};
        this._groupsBySlot = Array(16384);
        this.isCluster = true;
        this.retryAttempts = 0;
        this.delayQueue = new DelayQueue_1.default();
        this.offlineQueue = new Deque();
        this.isRefreshing = false;
        this._autoPipelines = /* @__PURE__ */ new Map();
        this._runningAutoPipelines = /* @__PURE__ */ new Set();
        this._readyDelayedCallbacks = [];
        this.connectionEpoch = 0;
        events_1.EventEmitter.call(this);
        this.startupNodes = startupNodes;
        this.options = (0, utils_1.defaults)({}, options, ClusterOptions_1.DEFAULT_CLUSTER_OPTIONS, this.options);
        if (this.options.redisOptions && this.options.redisOptions.keyPrefix && !this.options.keyPrefix) {
          this.options.keyPrefix = this.options.redisOptions.keyPrefix;
        }
        if (typeof this.options.scaleReads !== "function" && ["all", "master", "slave"].indexOf(this.options.scaleReads) === -1) {
          throw new Error('Invalid option scaleReads "' + this.options.scaleReads + '". Expected "all", "master", "slave" or a custom function');
        }
        this.connectionPool = new ConnectionPool_1.default(this.options.redisOptions);
        this.connectionPool.on("-node", (redis, key) => {
          this.emit("-node", redis);
        });
        this.connectionPool.on("+node", (redis) => {
          this.emit("+node", redis);
        });
        this.connectionPool.on("drain", () => {
          this.setStatus("close");
        });
        this.connectionPool.on("nodeError", (error, key) => {
          this.emit("node error", error, key);
        });
        this.subscriber = new ClusterSubscriber_1.default(this.connectionPool, this);
        if (this.options.scripts) {
          Object.entries(this.options.scripts).forEach(([name, definition]) => {
            this.defineCommand(name, definition);
          });
        }
        if (this.options.lazyConnect) {
          this.setStatus("wait");
        } else {
          this.connect().catch((err) => {
            debug("connecting failed: %s", err);
          });
        }
      }
      /**
       * Connect to a cluster
       */
      connect() {
        return new Promise((resolve, reject) => {
          if (this.status === "connecting" || this.status === "connect" || this.status === "ready") {
            reject(new Error("Redis is already connecting/connected"));
            return;
          }
          const epoch = ++this.connectionEpoch;
          this.setStatus("connecting");
          this.resolveStartupNodeHostnames().then((nodes) => {
            if (this.connectionEpoch !== epoch) {
              debug("discard connecting after resolving startup nodes because epoch not match: %d != %d", epoch, this.connectionEpoch);
              reject(new redis_errors_1.RedisError("Connection is discarded because a new connection is made"));
              return;
            }
            if (this.status !== "connecting") {
              debug("discard connecting after resolving startup nodes because the status changed to %s", this.status);
              reject(new redis_errors_1.RedisError("Connection is aborted"));
              return;
            }
            this.connectionPool.reset(nodes);
            const readyHandler = () => {
              this.setStatus("ready");
              this.retryAttempts = 0;
              this.executeOfflineCommands();
              this.resetNodesRefreshInterval();
              resolve();
            };
            let closeListener = void 0;
            const refreshListener = () => {
              this.invokeReadyDelayedCallbacks(void 0);
              this.removeListener("close", closeListener);
              this.manuallyClosing = false;
              this.setStatus("connect");
              if (this.options.enableReadyCheck) {
                this.readyCheck((err, fail) => {
                  if (err || fail) {
                    debug("Ready check failed (%s). Reconnecting...", err || fail);
                    if (this.status === "connect") {
                      this.disconnect(true);
                    }
                  } else {
                    readyHandler();
                  }
                });
              } else {
                readyHandler();
              }
            };
            closeListener = () => {
              const error = new Error("None of startup nodes is available");
              this.removeListener("refresh", refreshListener);
              this.invokeReadyDelayedCallbacks(error);
              reject(error);
            };
            this.once("refresh", refreshListener);
            this.once("close", closeListener);
            this.once("close", this.handleCloseEvent.bind(this));
            this.refreshSlotsCache((err) => {
              if (err && err.message === ClusterAllFailedError_1.default.defaultMessage) {
                Redis_1.default.prototype.silentEmit.call(this, "error", err);
                this.connectionPool.reset([]);
              }
            });
            this.subscriber.start();
          }).catch((err) => {
            this.setStatus("close");
            this.handleCloseEvent(err);
            this.invokeReadyDelayedCallbacks(err);
            reject(err);
          });
        });
      }
      /**
       * Disconnect from every node in the cluster.
       */
      disconnect(reconnect = false) {
        const status = this.status;
        this.setStatus("disconnecting");
        if (!reconnect) {
          this.manuallyClosing = true;
        }
        if (this.reconnectTimeout && !reconnect) {
          clearTimeout(this.reconnectTimeout);
          this.reconnectTimeout = null;
          debug("Canceled reconnecting attempts");
        }
        this.clearNodesRefreshInterval();
        this.subscriber.stop();
        if (status === "wait") {
          this.setStatus("close");
          this.handleCloseEvent();
        } else {
          this.connectionPool.reset([]);
        }
      }
      /**
       * Quit the cluster gracefully.
       */
      quit(callback) {
        const status = this.status;
        this.setStatus("disconnecting");
        this.manuallyClosing = true;
        if (this.reconnectTimeout) {
          clearTimeout(this.reconnectTimeout);
          this.reconnectTimeout = null;
        }
        this.clearNodesRefreshInterval();
        this.subscriber.stop();
        if (status === "wait") {
          const ret = (0, standard_as_callback_1.default)(Promise.resolve("OK"), callback);
          setImmediate(function() {
            this.setStatus("close");
            this.handleCloseEvent();
          }.bind(this));
          return ret;
        }
        return (0, standard_as_callback_1.default)(Promise.all(this.nodes().map((node) => node.quit().catch((err) => {
          if (err.message === utils_1.CONNECTION_CLOSED_ERROR_MSG) {
            return "OK";
          }
          throw err;
        }))).then(() => "OK"), callback);
      }
      /**
       * Create a new instance with the same startup nodes and options as the current one.
       *
       * @example
       * ```js
       * var cluster = new Redis.Cluster([{ host: "127.0.0.1", port: "30001" }]);
       * var anotherCluster = cluster.duplicate();
       * ```
       */
      duplicate(overrideStartupNodes = [], overrideOptions = {}) {
        const startupNodes = overrideStartupNodes.length > 0 ? overrideStartupNodes : this.startupNodes.slice(0);
        const options = Object.assign({}, this.options, overrideOptions);
        return new _Cluster(startupNodes, options);
      }
      /**
       * Get nodes with the specified role
       */
      nodes(role = "all") {
        if (role !== "all" && role !== "master" && role !== "slave") {
          throw new Error('Invalid role "' + role + '". Expected "all", "master" or "slave"');
        }
        return this.connectionPool.getNodes(role);
      }
      /**
       * This is needed in order not to install a listener for each auto pipeline
       *
       * @ignore
       */
      delayUntilReady(callback) {
        this._readyDelayedCallbacks.push(callback);
      }
      /**
       * Get the number of commands queued in automatic pipelines.
       *
       * This is not available (and returns 0) until the cluster is connected and slots information have been received.
       */
      get autoPipelineQueueSize() {
        let queued = 0;
        for (const pipeline of this._autoPipelines.values()) {
          queued += pipeline.length;
        }
        return queued;
      }
      /**
       * Refresh the slot cache
       *
       * @ignore
       */
      refreshSlotsCache(callback) {
        if (this.isRefreshing) {
          if (callback) {
            process.nextTick(callback);
          }
          return;
        }
        this.isRefreshing = true;
        const _this = this;
        const wrapper = (error) => {
          this.isRefreshing = false;
          if (callback) {
            callback(error);
          }
        };
        const nodes = (0, utils_1.shuffle)(this.connectionPool.getNodes());
        let lastNodeError = null;
        function tryNode(index) {
          if (index === nodes.length) {
            const error = new ClusterAllFailedError_1.default(ClusterAllFailedError_1.default.defaultMessage, lastNodeError);
            return wrapper(error);
          }
          const node = nodes[index];
          const key = `${node.options.host}:${node.options.port}`;
          debug("getting slot cache from %s", key);
          _this.getInfoFromNode(node, function(err) {
            switch (_this.status) {
              case "close":
              case "end":
                return wrapper(new Error("Cluster is disconnected."));
              case "disconnecting":
                return wrapper(new Error("Cluster is disconnecting."));
            }
            if (err) {
              _this.emit("node error", err, key);
              lastNodeError = err;
              tryNode(index + 1);
            } else {
              _this.emit("refresh");
              wrapper();
            }
          });
        }
        tryNode(0);
      }
      /**
       * @ignore
       */
      sendCommand(command, stream, node) {
        if (this.status === "wait") {
          this.connect().catch(utils_1.noop);
        }
        if (this.status === "end") {
          command.reject(new Error(utils_1.CONNECTION_CLOSED_ERROR_MSG));
          return command.promise;
        }
        let to = this.options.scaleReads;
        if (to !== "master") {
          const isCommandReadOnly = command.isReadOnly || (0, commands_1.exists)(command.name) && (0, commands_1.hasFlag)(command.name, "readonly");
          if (!isCommandReadOnly) {
            to = "master";
          }
        }
        let targetSlot = node ? node.slot : command.getSlot();
        const ttl = {};
        const _this = this;
        if (!node && !REJECT_OVERWRITTEN_COMMANDS.has(command)) {
          REJECT_OVERWRITTEN_COMMANDS.add(command);
          const reject = command.reject;
          command.reject = function(err) {
            const partialTry = tryConnection.bind(null, true);
            _this.handleError(err, ttl, {
              moved: function(slot, key) {
                debug("command %s is moved to %s", command.name, key);
                targetSlot = Number(slot);
                if (_this.slots[slot]) {
                  _this.slots[slot][0] = key;
                } else {
                  _this.slots[slot] = [key];
                }
                _this._groupsBySlot[slot] = _this._groupsIds[_this.slots[slot].join(";")];
                _this.connectionPool.findOrCreate(_this.natMapper(key));
                tryConnection();
                debug("refreshing slot caches... (triggered by MOVED error)");
                _this.refreshSlotsCache();
              },
              ask: function(slot, key) {
                debug("command %s is required to ask %s:%s", command.name, key);
                const mapped = _this.natMapper(key);
                _this.connectionPool.findOrCreate(mapped);
                tryConnection(false, `${mapped.host}:${mapped.port}`);
              },
              tryagain: partialTry,
              clusterDown: partialTry,
              connectionClosed: partialTry,
              maxRedirections: function(redirectionError) {
                reject.call(command, redirectionError);
              },
              defaults: function() {
                reject.call(command, err);
              }
            });
          };
        }
        tryConnection();
        function tryConnection(random, asking) {
          if (_this.status === "end") {
            command.reject(new redis_errors_1.AbortError("Cluster is ended."));
            return;
          }
          let redis;
          if (_this.status === "ready" || command.name === "cluster") {
            if (node && node.redis) {
              redis = node.redis;
            } else if (Command_1.default.checkFlag("ENTER_SUBSCRIBER_MODE", command.name) || Command_1.default.checkFlag("EXIT_SUBSCRIBER_MODE", command.name)) {
              redis = _this.subscriber.getInstance();
              if (!redis) {
                command.reject(new redis_errors_1.AbortError("No subscriber for the cluster"));
                return;
              }
            } else {
              if (!random) {
                if (typeof targetSlot === "number" && _this.slots[targetSlot]) {
                  const nodeKeys = _this.slots[targetSlot];
                  if (typeof to === "function") {
                    const nodes = nodeKeys.map(function(key) {
                      return _this.connectionPool.getInstanceByKey(key);
                    });
                    redis = to(nodes, command);
                    if (Array.isArray(redis)) {
                      redis = (0, utils_1.sample)(redis);
                    }
                    if (!redis) {
                      redis = nodes[0];
                    }
                  } else {
                    let key;
                    if (to === "all") {
                      key = (0, utils_1.sample)(nodeKeys);
                    } else if (to === "slave" && nodeKeys.length > 1) {
                      key = (0, utils_1.sample)(nodeKeys, 1);
                    } else {
                      key = nodeKeys[0];
                    }
                    redis = _this.connectionPool.getInstanceByKey(key);
                  }
                }
                if (asking) {
                  redis = _this.connectionPool.getInstanceByKey(asking);
                  redis.asking();
                }
              }
              if (!redis) {
                redis = (typeof to === "function" ? null : _this.connectionPool.getSampleInstance(to)) || _this.connectionPool.getSampleInstance("all");
              }
            }
            if (node && !node.redis) {
              node.redis = redis;
            }
          }
          if (redis) {
            redis.sendCommand(command, stream);
          } else if (_this.options.enableOfflineQueue) {
            _this.offlineQueue.push({
              command,
              stream,
              node
            });
          } else {
            command.reject(new Error("Cluster isn't ready and enableOfflineQueue options is false"));
          }
        }
        return command.promise;
      }
      sscanStream(key, options) {
        return this.createScanStream("sscan", { key, options });
      }
      sscanBufferStream(key, options) {
        return this.createScanStream("sscanBuffer", { key, options });
      }
      hscanStream(key, options) {
        return this.createScanStream("hscan", { key, options });
      }
      hscanBufferStream(key, options) {
        return this.createScanStream("hscanBuffer", { key, options });
      }
      zscanStream(key, options) {
        return this.createScanStream("zscan", { key, options });
      }
      zscanBufferStream(key, options) {
        return this.createScanStream("zscanBuffer", { key, options });
      }
      /**
       * @ignore
       */
      handleError(error, ttl, handlers) {
        if (typeof ttl.value === "undefined") {
          ttl.value = this.options.maxRedirections;
        } else {
          ttl.value -= 1;
        }
        if (ttl.value <= 0) {
          handlers.maxRedirections(new Error("Too many Cluster redirections. Last error: " + error));
          return;
        }
        const errv = error.message.split(" ");
        if (errv[0] === "MOVED") {
          const timeout = this.options.retryDelayOnMoved;
          if (timeout && typeof timeout === "number") {
            this.delayQueue.push("moved", handlers.moved.bind(null, errv[1], errv[2]), { timeout });
          } else {
            handlers.moved(errv[1], errv[2]);
          }
        } else if (errv[0] === "ASK") {
          handlers.ask(errv[1], errv[2]);
        } else if (errv[0] === "TRYAGAIN") {
          this.delayQueue.push("tryagain", handlers.tryagain, {
            timeout: this.options.retryDelayOnTryAgain
          });
        } else if (errv[0] === "CLUSTERDOWN" && this.options.retryDelayOnClusterDown > 0) {
          this.delayQueue.push("clusterdown", handlers.connectionClosed, {
            timeout: this.options.retryDelayOnClusterDown,
            callback: this.refreshSlotsCache.bind(this)
          });
        } else if (error.message === utils_1.CONNECTION_CLOSED_ERROR_MSG && this.options.retryDelayOnFailover > 0 && this.status === "ready") {
          this.delayQueue.push("failover", handlers.connectionClosed, {
            timeout: this.options.retryDelayOnFailover,
            callback: this.refreshSlotsCache.bind(this)
          });
        } else {
          handlers.defaults();
        }
      }
      resetOfflineQueue() {
        this.offlineQueue = new Deque();
      }
      clearNodesRefreshInterval() {
        if (this.slotsTimer) {
          clearTimeout(this.slotsTimer);
          this.slotsTimer = null;
        }
      }
      resetNodesRefreshInterval() {
        if (this.slotsTimer || !this.options.slotsRefreshInterval) {
          return;
        }
        const nextRound = () => {
          this.slotsTimer = setTimeout(() => {
            debug('refreshing slot caches... (triggered by "slotsRefreshInterval" option)');
            this.refreshSlotsCache(() => {
              nextRound();
            });
          }, this.options.slotsRefreshInterval);
        };
        nextRound();
      }
      /**
       * Change cluster instance's status
       */
      setStatus(status) {
        debug("status: %s -> %s", this.status || "[empty]", status);
        this.status = status;
        process.nextTick(() => {
          this.emit(status);
        });
      }
      /**
       * Called when closed to check whether a reconnection should be made
       */
      handleCloseEvent(reason) {
        if (reason) {
          debug("closed because %s", reason);
        }
        let retryDelay;
        if (!this.manuallyClosing && typeof this.options.clusterRetryStrategy === "function") {
          retryDelay = this.options.clusterRetryStrategy.call(this, ++this.retryAttempts, reason);
        }
        if (typeof retryDelay === "number") {
          this.setStatus("reconnecting");
          this.reconnectTimeout = setTimeout(() => {
            this.reconnectTimeout = null;
            debug("Cluster is disconnected. Retrying after %dms", retryDelay);
            this.connect().catch(function(err) {
              debug("Got error %s when reconnecting. Ignoring...", err);
            });
          }, retryDelay);
        } else {
          this.setStatus("end");
          this.flushQueue(new Error("None of startup nodes is available"));
        }
      }
      /**
       * Flush offline queue with error.
       */
      flushQueue(error) {
        let item;
        while (item = this.offlineQueue.shift()) {
          item.command.reject(error);
        }
      }
      executeOfflineCommands() {
        if (this.offlineQueue.length) {
          debug("send %d commands in offline queue", this.offlineQueue.length);
          const offlineQueue = this.offlineQueue;
          this.resetOfflineQueue();
          let item;
          while (item = offlineQueue.shift()) {
            this.sendCommand(item.command, item.stream, item.node);
          }
        }
      }
      natMapper(nodeKey) {
        if (this.options.natMap && typeof this.options.natMap === "object") {
          const key = typeof nodeKey === "string" ? nodeKey : `${nodeKey.host}:${nodeKey.port}`;
          const mapped = this.options.natMap[key];
          if (mapped) {
            debug("NAT mapping %s -> %O", key, mapped);
            return Object.assign({}, mapped);
          }
        }
        return typeof nodeKey === "string" ? (0, util_1.nodeKeyToRedisOptions)(nodeKey) : nodeKey;
      }
      getInfoFromNode(redis, callback) {
        if (!redis) {
          return callback(new Error("Node is disconnected"));
        }
        const duplicatedConnection = redis.duplicate({
          enableOfflineQueue: true,
          enableReadyCheck: false,
          retryStrategy: null,
          connectionName: (0, util_1.getConnectionName)("refresher", this.options.redisOptions && this.options.redisOptions.connectionName)
        });
        duplicatedConnection.on("error", utils_1.noop);
        duplicatedConnection.cluster("SLOTS", (0, utils_1.timeout)((err, result) => {
          duplicatedConnection.disconnect();
          if (err) {
            return callback(err);
          }
          if (this.status === "disconnecting" || this.status === "close" || this.status === "end") {
            debug("ignore CLUSTER.SLOTS results (count: %d) since cluster status is %s", result.length, this.status);
            callback();
            return;
          }
          const nodes = [];
          debug("cluster slots result count: %d", result.length);
          for (let i = 0; i < result.length; ++i) {
            const items = result[i];
            const slotRangeStart = items[0];
            const slotRangeEnd = items[1];
            const keys = [];
            for (let j2 = 2; j2 < items.length; j2++) {
              if (!items[j2][0]) {
                continue;
              }
              const node = this.natMapper({
                host: items[j2][0],
                port: items[j2][1]
              });
              node.readOnly = j2 !== 2;
              nodes.push(node);
              keys.push(node.host + ":" + node.port);
            }
            debug("cluster slots result [%d]: slots %d~%d served by %s", i, slotRangeStart, slotRangeEnd, keys);
            for (let slot = slotRangeStart; slot <= slotRangeEnd; slot++) {
              this.slots[slot] = keys;
            }
          }
          this._groupsIds = /* @__PURE__ */ Object.create(null);
          let j = 0;
          for (let i = 0; i < 16384; i++) {
            const target = (this.slots[i] || []).join(";");
            if (!target.length) {
              this._groupsBySlot[i] = void 0;
              continue;
            }
            if (!this._groupsIds[target]) {
              this._groupsIds[target] = ++j;
            }
            this._groupsBySlot[i] = this._groupsIds[target];
          }
          this.connectionPool.reset(nodes);
          callback();
        }, this.options.slotsRefreshTimeout));
      }
      invokeReadyDelayedCallbacks(err) {
        for (const c of this._readyDelayedCallbacks) {
          process.nextTick(c, err);
        }
        this._readyDelayedCallbacks = [];
      }
      /**
       * Check whether Cluster is able to process commands
       */
      readyCheck(callback) {
        this.cluster("INFO", (err, res) => {
          if (err) {
            return callback(err);
          }
          if (typeof res !== "string") {
            return callback();
          }
          let state;
          const lines = res.split("\r\n");
          for (let i = 0; i < lines.length; ++i) {
            const parts = lines[i].split(":");
            if (parts[0] === "cluster_state") {
              state = parts[1];
              break;
            }
          }
          if (state === "fail") {
            debug("cluster state not ok (%s)", state);
            callback(null, state);
          } else {
            callback();
          }
        });
      }
      resolveSrv(hostname) {
        return new Promise((resolve, reject) => {
          this.options.resolveSrv(hostname, (err, records) => {
            if (err) {
              return reject(err);
            }
            const self = this, groupedRecords = (0, util_1.groupSrvRecords)(records), sortedKeys = Object.keys(groupedRecords).sort((a, b) => parseInt(a) - parseInt(b));
            function tryFirstOne(err2) {
              if (!sortedKeys.length) {
                return reject(err2);
              }
              const key = sortedKeys[0], group = groupedRecords[key], record = (0, util_1.weightSrvRecords)(group);
              if (!group.records.length) {
                sortedKeys.shift();
              }
              self.dnsLookup(record.name).then((host) => resolve({
                host,
                port: record.port
              }), tryFirstOne);
            }
            tryFirstOne();
          });
        });
      }
      dnsLookup(hostname) {
        return new Promise((resolve, reject) => {
          this.options.dnsLookup(hostname, (err, address) => {
            if (err) {
              debug("failed to resolve hostname %s to IP: %s", hostname, err.message);
              reject(err);
            } else {
              debug("resolved hostname %s to IP %s", hostname, address);
              resolve(address);
            }
          });
        });
      }
      /**
       * Normalize startup nodes, and resolving hostnames to IPs.
       *
       * This process happens every time when #connect() is called since
       * #startupNodes and DNS records may chanage.
       */
      async resolveStartupNodeHostnames() {
        if (!Array.isArray(this.startupNodes) || this.startupNodes.length === 0) {
          throw new Error("`startupNodes` should contain at least one node.");
        }
        const startupNodes = (0, util_1.normalizeNodeOptions)(this.startupNodes);
        const hostnames = (0, util_1.getUniqueHostnamesFromOptions)(startupNodes);
        if (hostnames.length === 0) {
          return startupNodes;
        }
        const configs = await Promise.all(hostnames.map((this.options.useSRVRecords ? this.resolveSrv : this.dnsLookup).bind(this)));
        const hostnameToConfig = (0, utils_1.zipMap)(hostnames, configs);
        return startupNodes.map((node) => {
          const config = hostnameToConfig.get(node.host);
          if (!config) {
            return node;
          }
          if (this.options.useSRVRecords) {
            return Object.assign({}, node, config);
          }
          return Object.assign({}, node, { host: config });
        });
      }
      createScanStream(command, { key, options = {} }) {
        return new ScanStream_1.default({
          objectMode: true,
          key,
          redis: this,
          command,
          ...options
        });
      }
    };
    (0, applyMixin_1.default)(Cluster, events_1.EventEmitter);
    (0, transaction_1.addTransactionSupport)(Cluster.prototype);
    exports2.default = Cluster;
  }
});

var require_AbstractConnector = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/connectors/AbstractConnector.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var utils_1 = require_utils4();
    var debug = (0, utils_1.Debug)("AbstractConnector");
    var AbstractConnector = class {
      constructor(disconnectTimeout) {
        this.connecting = false;
        this.disconnectTimeout = disconnectTimeout;
      }
      check(info) {
        return true;
      }
      disconnect() {
        this.connecting = false;
        if (this.stream) {
          const stream = this.stream;
          const timeout = setTimeout(() => {
            debug("stream %s:%s still open, destroying it", stream.remoteAddress, stream.remotePort);
            stream.destroy();
          }, this.disconnectTimeout);
          stream.on("close", () => clearTimeout(timeout));
          stream.end();
        }
      }
    };
    exports2.default = AbstractConnector;
  }
});

var require_StandaloneConnector = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/connectors/StandaloneConnector.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var net_1 = require("net");
    var tls_1 = require("tls");
    var utils_1 = require_utils4();
    var AbstractConnector_1 = require_AbstractConnector();
    var StandaloneConnector = class extends AbstractConnector_1.default {
      constructor(options) {
        super(options.disconnectTimeout);
        this.options = options;
      }
      connect(_) {
        const { options } = this;
        this.connecting = true;
        let connectionOptions;
        if ("path" in options && options.path) {
          connectionOptions = {
            path: options.path
          };
        } else {
          connectionOptions = {};
          if ("port" in options && options.port != null) {
            connectionOptions.port = options.port;
          }
          if ("host" in options && options.host != null) {
            connectionOptions.host = options.host;
          }
          if ("family" in options && options.family != null) {
            connectionOptions.family = options.family;
          }
        }
        if (options.tls) {
          Object.assign(connectionOptions, options.tls);
        }
        return new Promise((resolve, reject) => {
          process.nextTick(() => {
            if (!this.connecting) {
              reject(new Error(utils_1.CONNECTION_CLOSED_ERROR_MSG));
              return;
            }
            try {
              if (options.tls) {
                this.stream = (0, tls_1.connect)(connectionOptions);
              } else {
                this.stream = (0, net_1.createConnection)(connectionOptions);
              }
            } catch (err) {
              reject(err);
              return;
            }
            this.stream.once("error", (err) => {
              this.firstError = err;
            });
            resolve(this.stream);
          });
        });
      }
    };
    exports2.default = StandaloneConnector;
  }
});

var require_SentinelIterator = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/connectors/SentinelConnector/SentinelIterator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function isSentinelEql(a, b) {
      return (a.host || "127.0.0.1") === (b.host || "127.0.0.1") && (a.port || 26379) === (b.port || 26379);
    }
    var SentinelIterator = class {
      constructor(sentinels) {
        this.cursor = 0;
        this.sentinels = sentinels.slice(0);
      }
      next() {
        const done = this.cursor >= this.sentinels.length;
        return { done, value: done ? void 0 : this.sentinels[this.cursor++] };
      }
      reset(moveCurrentEndpointToFirst) {
        if (moveCurrentEndpointToFirst && this.sentinels.length > 1 && this.cursor !== 1) {
          this.sentinels.unshift(...this.sentinels.splice(this.cursor - 1));
        }
        this.cursor = 0;
      }
      add(sentinel) {
        for (let i = 0; i < this.sentinels.length; i++) {
          if (isSentinelEql(sentinel, this.sentinels[i])) {
            return false;
          }
        }
        this.sentinels.push(sentinel);
        return true;
      }
      toString() {
        return `${JSON.stringify(this.sentinels)} @${this.cursor}`;
      }
    };
    exports2.default = SentinelIterator;
  }
});

var require_FailoverDetector = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/connectors/SentinelConnector/FailoverDetector.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FailoverDetector = void 0;
    var utils_1 = require_utils4();
    var debug = (0, utils_1.Debug)("FailoverDetector");
    var CHANNEL_NAME = "+switch-master";
    var FailoverDetector = class {
      // sentinels can't be used for regular commands after this
      constructor(connector, sentinels) {
        this.isDisconnected = false;
        this.connector = connector;
        this.sentinels = sentinels;
      }
      cleanup() {
        this.isDisconnected = true;
        for (const sentinel of this.sentinels) {
          sentinel.client.disconnect();
        }
      }
      async subscribe() {
        debug("Starting FailoverDetector");
        const promises = [];
        for (const sentinel of this.sentinels) {
          const promise = sentinel.client.subscribe(CHANNEL_NAME).catch((err) => {
            debug("Failed to subscribe to failover messages on sentinel %s:%s (%s)", sentinel.address.host || "127.0.0.1", sentinel.address.port || 26739, err.message);
          });
          promises.push(promise);
          sentinel.client.on("message", (channel) => {
            if (!this.isDisconnected && channel === CHANNEL_NAME) {
              this.disconnect();
            }
          });
        }
        await Promise.all(promises);
      }
      disconnect() {
        this.isDisconnected = true;
        debug("Failover detected, disconnecting");
        this.connector.disconnect();
      }
    };
    exports2.FailoverDetector = FailoverDetector;
  }
});

var require_SentinelConnector = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/connectors/SentinelConnector/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SentinelIterator = void 0;
    var net_1 = require("net");
    var utils_1 = require_utils4();
    var tls_1 = require("tls");
    var SentinelIterator_1 = require_SentinelIterator();
    exports2.SentinelIterator = SentinelIterator_1.default;
    var AbstractConnector_1 = require_AbstractConnector();
    var Redis_1 = require_Redis();
    var FailoverDetector_1 = require_FailoverDetector();
    var debug = (0, utils_1.Debug)("SentinelConnector");
    var SentinelConnector = class extends AbstractConnector_1.default {
      constructor(options) {
        super(options.disconnectTimeout);
        this.options = options;
        this.emitter = null;
        this.failoverDetector = null;
        if (!this.options.sentinels.length) {
          throw new Error("Requires at least one sentinel to connect to.");
        }
        if (!this.options.name) {
          throw new Error("Requires the name of master.");
        }
        this.sentinelIterator = new SentinelIterator_1.default(this.options.sentinels);
      }
      check(info) {
        const roleMatches = !info.role || this.options.role === info.role;
        if (!roleMatches) {
          debug("role invalid, expected %s, but got %s", this.options.role, info.role);
          this.sentinelIterator.next();
          this.sentinelIterator.next();
          this.sentinelIterator.reset(true);
        }
        return roleMatches;
      }
      disconnect() {
        super.disconnect();
        if (this.failoverDetector) {
          this.failoverDetector.cleanup();
        }
      }
      connect(eventEmitter) {
        this.connecting = true;
        this.retryAttempts = 0;
        let lastError;
        const connectToNext = async () => {
          const endpoint = this.sentinelIterator.next();
          if (endpoint.done) {
            this.sentinelIterator.reset(false);
            const retryDelay = typeof this.options.sentinelRetryStrategy === "function" ? this.options.sentinelRetryStrategy(++this.retryAttempts) : null;
            let errorMsg = typeof retryDelay !== "number" ? "All sentinels are unreachable and retry is disabled." : `All sentinels are unreachable. Retrying from scratch after ${retryDelay}ms.`;
            if (lastError) {
              errorMsg += ` Last error: ${lastError.message}`;
            }
            debug(errorMsg);
            const error = new Error(errorMsg);
            if (typeof retryDelay === "number") {
              eventEmitter("error", error);
              await new Promise((resolve) => setTimeout(resolve, retryDelay));
              return connectToNext();
            } else {
              throw error;
            }
          }
          let resolved = null;
          let err = null;
          try {
            resolved = await this.resolve(endpoint.value);
          } catch (error) {
            err = error;
          }
          if (!this.connecting) {
            throw new Error(utils_1.CONNECTION_CLOSED_ERROR_MSG);
          }
          const endpointAddress = endpoint.value.host + ":" + endpoint.value.port;
          if (resolved) {
            debug("resolved: %s:%s from sentinel %s", resolved.host, resolved.port, endpointAddress);
            if (this.options.enableTLSForSentinelMode && this.options.tls) {
              Object.assign(resolved, this.options.tls);
              this.stream = (0, tls_1.connect)(resolved);
              this.stream.once("secureConnect", this.initFailoverDetector.bind(this));
            } else {
              this.stream = (0, net_1.createConnection)(resolved);
              this.stream.once("connect", this.initFailoverDetector.bind(this));
            }
            this.stream.once("error", (err2) => {
              this.firstError = err2;
            });
            return this.stream;
          } else {
            const errorMsg = err ? "failed to connect to sentinel " + endpointAddress + " because " + err.message : "connected to sentinel " + endpointAddress + " successfully, but got an invalid reply: " + resolved;
            debug(errorMsg);
            eventEmitter("sentinelError", new Error(errorMsg));
            if (err) {
              lastError = err;
            }
            return connectToNext();
          }
        };
        return connectToNext();
      }
      async updateSentinels(client) {
        if (!this.options.updateSentinels) {
          return;
        }
        const result = await client.sentinel("sentinels", this.options.name);
        if (!Array.isArray(result)) {
          return;
        }
        result.map(utils_1.packObject).forEach((sentinel) => {
          const flags = sentinel.flags ? sentinel.flags.split(",") : [];
          if (flags.indexOf("disconnected") === -1 && sentinel.ip && sentinel.port) {
            const endpoint = this.sentinelNatResolve(addressResponseToAddress(sentinel));
            if (this.sentinelIterator.add(endpoint)) {
              debug("adding sentinel %s:%s", endpoint.host, endpoint.port);
            }
          }
        });
        debug("Updated internal sentinels: %s", this.sentinelIterator);
      }
      async resolveMaster(client) {
        const result = await client.sentinel("get-master-addr-by-name", this.options.name);
        await this.updateSentinels(client);
        return this.sentinelNatResolve(Array.isArray(result) ? { host: result[0], port: Number(result[1]) } : null);
      }
      async resolveSlave(client) {
        const result = await client.sentinel("slaves", this.options.name);
        if (!Array.isArray(result)) {
          return null;
        }
        const availableSlaves = result.map(utils_1.packObject).filter((slave) => slave.flags && !slave.flags.match(/(disconnected|s_down|o_down)/));
        return this.sentinelNatResolve(selectPreferredSentinel(availableSlaves, this.options.preferredSlaves));
      }
      sentinelNatResolve(item) {
        if (!item || !this.options.natMap)
          return item;
        return this.options.natMap[`${item.host}:${item.port}`] || item;
      }
      connectToSentinel(endpoint, options) {
        const redis = new Redis_1.default({
          port: endpoint.port || 26379,
          host: endpoint.host,
          username: this.options.sentinelUsername || null,
          password: this.options.sentinelPassword || null,
          family: endpoint.family || // @ts-expect-error
          ("path" in this.options && this.options.path ? void 0 : (
            // @ts-expect-error
            this.options.family
          )),
          tls: this.options.sentinelTLS,
          retryStrategy: null,
          enableReadyCheck: false,
          connectTimeout: this.options.connectTimeout,
          commandTimeout: this.options.sentinelCommandTimeout,
          ...options
        });
        return redis;
      }
      async resolve(endpoint) {
        const client = this.connectToSentinel(endpoint);
        client.on("error", noop);
        try {
          if (this.options.role === "slave") {
            return await this.resolveSlave(client);
          } else {
            return await this.resolveMaster(client);
          }
        } finally {
          client.disconnect();
        }
      }
      async initFailoverDetector() {
        var _a;
        if (!this.options.failoverDetector) {
          return;
        }
        this.sentinelIterator.reset(true);
        const sentinels = [];
        while (sentinels.length < this.options.sentinelMaxConnections) {
          const { done, value } = this.sentinelIterator.next();
          if (done) {
            break;
          }
          const client = this.connectToSentinel(value, {
            lazyConnect: true,
            retryStrategy: this.options.sentinelReconnectStrategy
          });
          client.on("reconnecting", () => {
            var _a2;
            (_a2 = this.emitter) === null || _a2 === void 0 ? void 0 : _a2.emit("sentinelReconnecting");
          });
          sentinels.push({ address: value, client });
        }
        this.sentinelIterator.reset(false);
        if (this.failoverDetector) {
          this.failoverDetector.cleanup();
        }
        this.failoverDetector = new FailoverDetector_1.FailoverDetector(this, sentinels);
        await this.failoverDetector.subscribe();
        (_a = this.emitter) === null || _a === void 0 ? void 0 : _a.emit("failoverSubscribed");
      }
    };
    exports2.default = SentinelConnector;
    function selectPreferredSentinel(availableSlaves, preferredSlaves) {
      if (availableSlaves.length === 0) {
        return null;
      }
      let selectedSlave;
      if (typeof preferredSlaves === "function") {
        selectedSlave = preferredSlaves(availableSlaves);
      } else if (preferredSlaves !== null && typeof preferredSlaves === "object") {
        const preferredSlavesArray = Array.isArray(preferredSlaves) ? preferredSlaves : [preferredSlaves];
        preferredSlavesArray.sort((a, b) => {
          if (!a.prio) {
            a.prio = 1;
          }
          if (!b.prio) {
            b.prio = 1;
          }
          if (a.prio < b.prio) {
            return -1;
          }
          if (a.prio > b.prio) {
            return 1;
          }
          return 0;
        });
        for (let p = 0; p < preferredSlavesArray.length; p++) {
          for (let a = 0; a < availableSlaves.length; a++) {
            const slave = availableSlaves[a];
            if (slave.ip === preferredSlavesArray[p].ip) {
              if (slave.port === preferredSlavesArray[p].port) {
                selectedSlave = slave;
                break;
              }
            }
          }
          if (selectedSlave) {
            break;
          }
        }
      }
      if (!selectedSlave) {
        selectedSlave = (0, utils_1.sample)(availableSlaves);
      }
      return addressResponseToAddress(selectedSlave);
    }
    function addressResponseToAddress(input) {
      return { host: input.ip, port: Number(input.port) };
    }
    function noop() {
    }
  }
});

var require_connectors = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/connectors/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SentinelConnector = exports2.StandaloneConnector = void 0;
    var StandaloneConnector_1 = require_StandaloneConnector();
    exports2.StandaloneConnector = StandaloneConnector_1.default;
    var SentinelConnector_1 = require_SentinelConnector();
    exports2.SentinelConnector = SentinelConnector_1.default;
  }
});

var require_MaxRetriesPerRequestError = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/errors/MaxRetriesPerRequestError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var redis_errors_1 = require_redis_errors();
    var MaxRetriesPerRequestError = class extends redis_errors_1.AbortError {
      constructor(maxRetriesPerRequest) {
        const message = `Reached the max retries per request limit (which is ${maxRetriesPerRequest}). Refer to "maxRetriesPerRequest" option for details.`;
        super(message);
        Error.captureStackTrace(this, this.constructor);
      }
      get name() {
        return this.constructor.name;
      }
    };
    exports2.default = MaxRetriesPerRequestError;
  }
});

var require_errors = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/errors/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MaxRetriesPerRequestError = void 0;
    var MaxRetriesPerRequestError_1 = require_MaxRetriesPerRequestError();
    exports2.MaxRetriesPerRequestError = MaxRetriesPerRequestError_1.default;
  }
});

var require_parser = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/redis-parser/lib/parser.js"(exports2, module2) {
    "use strict";
    var Buffer2 = require("buffer").Buffer;
    var StringDecoder = require("string_decoder").StringDecoder;
    var decoder = new StringDecoder();
    var errors = require_redis_errors();
    var ReplyError = errors.ReplyError;
    var ParserError = errors.ParserError;
    var bufferPool = Buffer2.allocUnsafe(32 * 1024);
    var bufferOffset = 0;
    var interval = null;
    var counter = 0;
    var notDecreased = 0;
    function parseSimpleNumbers(parser) {
      const length = parser.buffer.length - 1;
      var offset = parser.offset;
      var number = 0;
      var sign = 1;
      if (parser.buffer[offset] === 45) {
        sign = -1;
        offset++;
      }
      while (offset < length) {
        const c1 = parser.buffer[offset++];
        if (c1 === 13) {
          parser.offset = offset + 1;
          return sign * number;
        }
        number = number * 10 + (c1 - 48);
      }
    }
    function parseStringNumbers(parser) {
      const length = parser.buffer.length - 1;
      var offset = parser.offset;
      var number = 0;
      var res = "";
      if (parser.buffer[offset] === 45) {
        res += "-";
        offset++;
      }
      while (offset < length) {
        var c1 = parser.buffer[offset++];
        if (c1 === 13) {
          parser.offset = offset + 1;
          if (number !== 0) {
            res += number;
          }
          return res;
        } else if (number > 429496728) {
          res += number * 10 + (c1 - 48);
          number = 0;
        } else if (c1 === 48 && number === 0) {
          res += 0;
        } else {
          number = number * 10 + (c1 - 48);
        }
      }
    }
    function parseSimpleString(parser) {
      const start = parser.offset;
      const buffer = parser.buffer;
      const length = buffer.length - 1;
      var offset = start;
      while (offset < length) {
        if (buffer[offset++] === 13) {
          parser.offset = offset + 1;
          if (parser.optionReturnBuffers === true) {
            return parser.buffer.slice(start, offset - 1);
          }
          return parser.buffer.toString("utf8", start, offset - 1);
        }
      }
    }
    function parseLength(parser) {
      const length = parser.buffer.length - 1;
      var offset = parser.offset;
      var number = 0;
      while (offset < length) {
        const c1 = parser.buffer[offset++];
        if (c1 === 13) {
          parser.offset = offset + 1;
          return number;
        }
        number = number * 10 + (c1 - 48);
      }
    }
    function parseInteger(parser) {
      if (parser.optionStringNumbers === true) {
        return parseStringNumbers(parser);
      }
      return parseSimpleNumbers(parser);
    }
    function parseBulkString(parser) {
      const length = parseLength(parser);
      if (length === void 0) {
        return;
      }
      if (length < 0) {
        return null;
      }
      const offset = parser.offset + length;
      if (offset + 2 > parser.buffer.length) {
        parser.bigStrSize = offset + 2;
        parser.totalChunkSize = parser.buffer.length;
        parser.bufferCache.push(parser.buffer);
        return;
      }
      const start = parser.offset;
      parser.offset = offset + 2;
      if (parser.optionReturnBuffers === true) {
        return parser.buffer.slice(start, offset);
      }
      return parser.buffer.toString("utf8", start, offset);
    }
    function parseError(parser) {
      var string = parseSimpleString(parser);
      if (string !== void 0) {
        if (parser.optionReturnBuffers === true) {
          string = string.toString();
        }
        return new ReplyError(string);
      }
    }
    function handleError(parser, type) {
      const err = new ParserError(
        "Protocol error, got " + JSON.stringify(String.fromCharCode(type)) + " as reply type byte",
        JSON.stringify(parser.buffer),
        parser.offset
      );
      parser.buffer = null;
      parser.returnFatalError(err);
    }
    function parseArray(parser) {
      const length = parseLength(parser);
      if (length === void 0) {
        return;
      }
      if (length < 0) {
        return null;
      }
      const responses = new Array(length);
      return parseArrayElements(parser, responses, 0);
    }
    function pushArrayCache(parser, array, pos) {
      parser.arrayCache.push(array);
      parser.arrayPos.push(pos);
    }
    function parseArrayChunks(parser) {
      const tmp = parser.arrayCache.pop();
      var pos = parser.arrayPos.pop();
      if (parser.arrayCache.length) {
        const res = parseArrayChunks(parser);
        if (res === void 0) {
          pushArrayCache(parser, tmp, pos);
          return;
        }
        tmp[pos++] = res;
      }
      return parseArrayElements(parser, tmp, pos);
    }
    function parseArrayElements(parser, responses, i) {
      const bufferLength = parser.buffer.length;
      while (i < responses.length) {
        const offset = parser.offset;
        if (parser.offset >= bufferLength) {
          pushArrayCache(parser, responses, i);
          return;
        }
        const response = parseType(parser, parser.buffer[parser.offset++]);
        if (response === void 0) {
          if (!(parser.arrayCache.length || parser.bufferCache.length)) {
            parser.offset = offset;
          }
          pushArrayCache(parser, responses, i);
          return;
        }
        responses[i] = response;
        i++;
      }
      return responses;
    }
    function parseType(parser, type) {
      switch (type) {
        case 36:
          return parseBulkString(parser);
        case 43:
          return parseSimpleString(parser);
        case 42:
          return parseArray(parser);
        case 58:
          return parseInteger(parser);
        case 45:
          return parseError(parser);
        default:
          return handleError(parser, type);
      }
    }
    function decreaseBufferPool() {
      if (bufferPool.length > 50 * 1024) {
        if (counter === 1 || notDecreased > counter * 2) {
          const minSliceLen = Math.floor(bufferPool.length / 10);
          const sliceLength = minSliceLen < bufferOffset ? bufferOffset : minSliceLen;
          bufferOffset = 0;
          bufferPool = bufferPool.slice(sliceLength, bufferPool.length);
        } else {
          notDecreased++;
          counter--;
        }
      } else {
        clearInterval(interval);
        counter = 0;
        notDecreased = 0;
        interval = null;
      }
    }
    function resizeBuffer(length) {
      if (bufferPool.length < length + bufferOffset) {
        const multiplier = length > 1024 * 1024 * 75 ? 2 : 3;
        if (bufferOffset > 1024 * 1024 * 111) {
          bufferOffset = 1024 * 1024 * 50;
        }
        bufferPool = Buffer2.allocUnsafe(length * multiplier + bufferOffset);
        bufferOffset = 0;
        counter++;
        if (interval === null) {
          interval = setInterval(decreaseBufferPool, 50);
        }
      }
    }
    function concatBulkString(parser) {
      const list = parser.bufferCache;
      const oldOffset = parser.offset;
      var chunks = list.length;
      var offset = parser.bigStrSize - parser.totalChunkSize;
      parser.offset = offset;
      if (offset <= 2) {
        if (chunks === 2) {
          return list[0].toString("utf8", oldOffset, list[0].length + offset - 2);
        }
        chunks--;
        offset = list[list.length - 2].length + offset;
      }
      var res = decoder.write(list[0].slice(oldOffset));
      for (var i = 1; i < chunks - 1; i++) {
        res += decoder.write(list[i]);
      }
      res += decoder.end(list[i].slice(0, offset - 2));
      return res;
    }
    function concatBulkBuffer(parser) {
      const list = parser.bufferCache;
      const oldOffset = parser.offset;
      const length = parser.bigStrSize - oldOffset - 2;
      var chunks = list.length;
      var offset = parser.bigStrSize - parser.totalChunkSize;
      parser.offset = offset;
      if (offset <= 2) {
        if (chunks === 2) {
          return list[0].slice(oldOffset, list[0].length + offset - 2);
        }
        chunks--;
        offset = list[list.length - 2].length + offset;
      }
      resizeBuffer(length);
      const start = bufferOffset;
      list[0].copy(bufferPool, start, oldOffset, list[0].length);
      bufferOffset += list[0].length - oldOffset;
      for (var i = 1; i < chunks - 1; i++) {
        list[i].copy(bufferPool, bufferOffset);
        bufferOffset += list[i].length;
      }
      list[i].copy(bufferPool, bufferOffset, 0, offset - 2);
      bufferOffset += offset - 2;
      return bufferPool.slice(start, bufferOffset);
    }
    var JavascriptRedisParser = class {
      /**
       * Javascript Redis Parser constructor
       * @param {{returnError: Function, returnReply: Function, returnFatalError?: Function, returnBuffers: boolean, stringNumbers: boolean }} options
       * @constructor
       */
      constructor(options) {
        if (!options) {
          throw new TypeError("Options are mandatory.");
        }
        if (typeof options.returnError !== "function" || typeof options.returnReply !== "function") {
          throw new TypeError("The returnReply and returnError options have to be functions.");
        }
        this.setReturnBuffers(!!options.returnBuffers);
        this.setStringNumbers(!!options.stringNumbers);
        this.returnError = options.returnError;
        this.returnFatalError = options.returnFatalError || options.returnError;
        this.returnReply = options.returnReply;
        this.reset();
      }
      /**
       * Reset the parser values to the initial state
       *
       * @returns {undefined}
       */
      reset() {
        this.offset = 0;
        this.buffer = null;
        this.bigStrSize = 0;
        this.totalChunkSize = 0;
        this.bufferCache = [];
        this.arrayCache = [];
        this.arrayPos = [];
      }
      /**
       * Set the returnBuffers option
       *
       * @param {boolean} returnBuffers
       * @returns {undefined}
       */
      setReturnBuffers(returnBuffers) {
        if (typeof returnBuffers !== "boolean") {
          throw new TypeError("The returnBuffers argument has to be a boolean");
        }
        this.optionReturnBuffers = returnBuffers;
      }
      /**
       * Set the stringNumbers option
       *
       * @param {boolean} stringNumbers
       * @returns {undefined}
       */
      setStringNumbers(stringNumbers) {
        if (typeof stringNumbers !== "boolean") {
          throw new TypeError("The stringNumbers argument has to be a boolean");
        }
        this.optionStringNumbers = stringNumbers;
      }
      /**
       * Parse the redis buffer
       * @param {Buffer} buffer
       * @returns {undefined}
       */
      execute(buffer) {
        if (this.buffer === null) {
          this.buffer = buffer;
          this.offset = 0;
        } else if (this.bigStrSize === 0) {
          const oldLength = this.buffer.length;
          const remainingLength = oldLength - this.offset;
          const newBuffer = Buffer2.allocUnsafe(remainingLength + buffer.length);
          this.buffer.copy(newBuffer, 0, this.offset, oldLength);
          buffer.copy(newBuffer, remainingLength, 0, buffer.length);
          this.buffer = newBuffer;
          this.offset = 0;
          if (this.arrayCache.length) {
            const arr = parseArrayChunks(this);
            if (arr === void 0) {
              return;
            }
            this.returnReply(arr);
          }
        } else if (this.totalChunkSize + buffer.length >= this.bigStrSize) {
          this.bufferCache.push(buffer);
          var tmp = this.optionReturnBuffers ? concatBulkBuffer(this) : concatBulkString(this);
          this.bigStrSize = 0;
          this.bufferCache = [];
          this.buffer = buffer;
          if (this.arrayCache.length) {
            this.arrayCache[0][this.arrayPos[0]++] = tmp;
            tmp = parseArrayChunks(this);
            if (tmp === void 0) {
              return;
            }
          }
          this.returnReply(tmp);
        } else {
          this.bufferCache.push(buffer);
          this.totalChunkSize += buffer.length;
          return;
        }
        while (this.offset < this.buffer.length) {
          const offset = this.offset;
          const type = this.buffer[this.offset++];
          const response = parseType(this, type);
          if (response === void 0) {
            if (!(this.arrayCache.length || this.bufferCache.length)) {
              this.offset = offset;
            }
            return;
          }
          if (type === 45) {
            this.returnError(response);
          } else {
            this.returnReply(response);
          }
        }
        this.buffer = null;
      }
    };
    module2.exports = JavascriptRedisParser;
  }
});

var require_redis_parser = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/redis-parser/index.js"(exports2, module2) {
    "use strict";
    module2.exports = require_parser();
  }
});

var require_SubscriptionSet = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/SubscriptionSet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var SubscriptionSet = class {
      constructor() {
        this.set = {
          subscribe: {},
          psubscribe: {},
          ssubscribe: {}
        };
      }
      add(set, channel) {
        this.set[mapSet(set)][channel] = true;
      }
      del(set, channel) {
        delete this.set[mapSet(set)][channel];
      }
      channels(set) {
        return Object.keys(this.set[mapSet(set)]);
      }
      isEmpty() {
        return this.channels("subscribe").length === 0 && this.channels("psubscribe").length === 0 && this.channels("ssubscribe").length === 0;
      }
    };
    exports2.default = SubscriptionSet;
    function mapSet(set) {
      if (set === "unsubscribe") {
        return "subscribe";
      }
      if (set === "punsubscribe") {
        return "psubscribe";
      }
      if (set === "sunsubscribe") {
        return "ssubscribe";
      }
      return set;
    }
  }
});

var require_DataHandler = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/DataHandler.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var Command_1 = require_Command();
    var utils_1 = require_utils4();
    var RedisParser = require_redis_parser();
    var SubscriptionSet_1 = require_SubscriptionSet();
    var debug = (0, utils_1.Debug)("dataHandler");
    var DataHandler = class {
      constructor(redis, parserOptions) {
        this.redis = redis;
        const parser = new RedisParser({
          stringNumbers: parserOptions.stringNumbers,
          returnBuffers: true,
          returnError: (err) => {
            this.returnError(err);
          },
          returnFatalError: (err) => {
            this.returnFatalError(err);
          },
          returnReply: (reply) => {
            this.returnReply(reply);
          }
        });
        redis.stream.on("data", (data) => {
          parser.execute(data);
        });
      }
      returnFatalError(err) {
        err.message += ". Please report this.";
        this.redis.recoverFromFatalError(err, err, { offlineQueue: false });
      }
      returnError(err) {
        const item = this.shiftCommand(err);
        if (!item) {
          return;
        }
        err.command = {
          name: item.command.name,
          args: item.command.args
        };
        this.redis.handleReconnection(err, item);
      }
      returnReply(reply) {
        if (this.handleMonitorReply(reply)) {
          return;
        }
        if (this.handleSubscriberReply(reply)) {
          return;
        }
        const item = this.shiftCommand(reply);
        if (!item) {
          return;
        }
        if (Command_1.default.checkFlag("ENTER_SUBSCRIBER_MODE", item.command.name)) {
          this.redis.condition.subscriber = new SubscriptionSet_1.default();
          this.redis.condition.subscriber.add(item.command.name, reply[1].toString());
          if (!fillSubCommand(item.command, reply[2])) {
            this.redis.commandQueue.unshift(item);
          }
        } else if (Command_1.default.checkFlag("EXIT_SUBSCRIBER_MODE", item.command.name)) {
          if (!fillUnsubCommand(item.command, reply[2])) {
            this.redis.commandQueue.unshift(item);
          }
        } else {
          item.command.resolve(reply);
        }
      }
      handleSubscriberReply(reply) {
        if (!this.redis.condition.subscriber) {
          return false;
        }
        const replyType = Array.isArray(reply) ? reply[0].toString() : null;
        debug('receive reply "%s" in subscriber mode', replyType);
        switch (replyType) {
          case "message":
            if (this.redis.listeners("message").length > 0) {
              this.redis.emit("message", reply[1].toString(), reply[2] ? reply[2].toString() : "");
            }
            this.redis.emit("messageBuffer", reply[1], reply[2]);
            break;
          case "pmessage": {
            const pattern = reply[1].toString();
            if (this.redis.listeners("pmessage").length > 0) {
              this.redis.emit("pmessage", pattern, reply[2].toString(), reply[3].toString());
            }
            this.redis.emit("pmessageBuffer", pattern, reply[2], reply[3]);
            break;
          }
          case "smessage": {
            if (this.redis.listeners("smessage").length > 0) {
              this.redis.emit("smessage", reply[1].toString(), reply[2] ? reply[2].toString() : "");
            }
            this.redis.emit("smessageBuffer", reply[1], reply[2]);
            break;
          }
          case "ssubscribe":
          case "subscribe":
          case "psubscribe": {
            const channel = reply[1].toString();
            this.redis.condition.subscriber.add(replyType, channel);
            const item = this.shiftCommand(reply);
            if (!item) {
              return;
            }
            if (!fillSubCommand(item.command, reply[2])) {
              this.redis.commandQueue.unshift(item);
            }
            break;
          }
          case "sunsubscribe":
          case "unsubscribe":
          case "punsubscribe": {
            const channel = reply[1] ? reply[1].toString() : null;
            if (channel) {
              this.redis.condition.subscriber.del(replyType, channel);
            }
            const count = reply[2];
            if (Number(count) === 0) {
              this.redis.condition.subscriber = false;
            }
            const item = this.shiftCommand(reply);
            if (!item) {
              return;
            }
            if (!fillUnsubCommand(item.command, count)) {
              this.redis.commandQueue.unshift(item);
            }
            break;
          }
          default: {
            const item = this.shiftCommand(reply);
            if (!item) {
              return;
            }
            item.command.resolve(reply);
          }
        }
        return true;
      }
      handleMonitorReply(reply) {
        if (this.redis.status !== "monitoring") {
          return false;
        }
        const replyStr = reply.toString();
        if (replyStr === "OK") {
          return false;
        }
        const len = replyStr.indexOf(" ");
        const timestamp = replyStr.slice(0, len);
        const argIndex = replyStr.indexOf('"');
        const args = replyStr.slice(argIndex + 1, -1).split('" "').map((elem) => elem.replace(/\\"/g, '"'));
        const dbAndSource = replyStr.slice(len + 2, argIndex - 2).split(" ");
        this.redis.emit("monitor", timestamp, args, dbAndSource[1], dbAndSource[0]);
        return true;
      }
      shiftCommand(reply) {
        const item = this.redis.commandQueue.shift();
        if (!item) {
          const message = "Command queue state error. If you can reproduce this, please report it.";
          const error = new Error(message + (reply instanceof Error ? ` Last error: ${reply.message}` : ` Last reply: ${reply.toString()}`));
          this.redis.emit("error", error);
          return null;
        }
        return item;
      }
    };
    exports2.default = DataHandler;
    var remainingRepliesMap = /* @__PURE__ */ new WeakMap();
    function fillSubCommand(command, count) {
      let remainingReplies = remainingRepliesMap.has(command) ? remainingRepliesMap.get(command) : command.args.length;
      remainingReplies -= 1;
      if (remainingReplies <= 0) {
        command.resolve(count);
        remainingRepliesMap.delete(command);
        return true;
      }
      remainingRepliesMap.set(command, remainingReplies);
      return false;
    }
    function fillUnsubCommand(command, count) {
      let remainingReplies = remainingRepliesMap.has(command) ? remainingRepliesMap.get(command) : command.args.length;
      if (remainingReplies === 0) {
        if (Number(count) === 0) {
          remainingRepliesMap.delete(command);
          command.resolve(count);
          return true;
        }
        return false;
      }
      remainingReplies -= 1;
      if (remainingReplies <= 0) {
        command.resolve(count);
        return true;
      }
      remainingRepliesMap.set(command, remainingReplies);
      return false;
    }
  }
});

var require_event_handler = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/redis/event_handler.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.readyHandler = exports2.errorHandler = exports2.closeHandler = exports2.connectHandler = void 0;
    var redis_errors_1 = require_redis_errors();
    var Command_1 = require_Command();
    var errors_1 = require_errors();
    var utils_1 = require_utils4();
    var DataHandler_1 = require_DataHandler();
    var debug = (0, utils_1.Debug)("connection");
    function connectHandler(self) {
      return function() {
        self.setStatus("connect");
        self.resetCommandQueue();
        let flushed = false;
        const { connectionEpoch } = self;
        if (self.condition.auth) {
          self.auth(self.condition.auth, function(err) {
            if (connectionEpoch !== self.connectionEpoch) {
              return;
            }
            if (err) {
              if (err.message.indexOf("no password is set") !== -1) {
                console.warn("[WARN] Redis server does not require a password, but a password was supplied.");
              } else if (err.message.indexOf("without any password configured for the default user") !== -1) {
                console.warn("[WARN] This Redis server's `default` user does not require a password, but a password was supplied");
              } else if (err.message.indexOf("wrong number of arguments for 'auth' command") !== -1) {
                console.warn(`[ERROR] The server returned "wrong number of arguments for 'auth' command". You are probably passing both username and password to Redis version 5 or below. You should only pass the 'password' option for Redis version 5 and under.`);
              } else {
                flushed = true;
                self.recoverFromFatalError(err, err);
              }
            }
          });
        }
        if (self.condition.select) {
          self.select(self.condition.select).catch((err) => {
            self.silentEmit("error", err);
          });
        }
        if (!self.options.enableReadyCheck) {
          exports2.readyHandler(self)();
        }
        new DataHandler_1.default(self, {
          stringNumbers: self.options.stringNumbers
        });
        if (self.options.enableReadyCheck) {
          self._readyCheck(function(err, info) {
            if (connectionEpoch !== self.connectionEpoch) {
              return;
            }
            if (err) {
              if (!flushed) {
                self.recoverFromFatalError(new Error("Ready check failed: " + err.message), err);
              }
            } else {
              if (self.connector.check(info)) {
                exports2.readyHandler(self)();
              } else {
                self.disconnect(true);
              }
            }
          });
        }
      };
    }
    exports2.connectHandler = connectHandler;
    function abortError(command) {
      const err = new redis_errors_1.AbortError("Command aborted due to connection close");
      err.command = {
        name: command.name,
        args: command.args
      };
      return err;
    }
    function abortIncompletePipelines(commandQueue) {
      var _a;
      let expectedIndex = 0;
      for (let i = 0; i < commandQueue.length; ) {
        const command = (_a = commandQueue.peekAt(i)) === null || _a === void 0 ? void 0 : _a.command;
        const pipelineIndex = command.pipelineIndex;
        if (pipelineIndex === void 0 || pipelineIndex === 0) {
          expectedIndex = 0;
        }
        if (pipelineIndex !== void 0 && pipelineIndex !== expectedIndex++) {
          commandQueue.remove(i, 1);
          command.reject(abortError(command));
          continue;
        }
        i++;
      }
    }
    function abortTransactionFragments(commandQueue) {
      var _a;
      for (let i = 0; i < commandQueue.length; ) {
        const command = (_a = commandQueue.peekAt(i)) === null || _a === void 0 ? void 0 : _a.command;
        if (command.name === "multi") {
          break;
        }
        if (command.name === "exec") {
          commandQueue.remove(i, 1);
          command.reject(abortError(command));
          break;
        }
        if (command.inTransaction) {
          commandQueue.remove(i, 1);
          command.reject(abortError(command));
        } else {
          i++;
        }
      }
    }
    function closeHandler(self) {
      return function() {
        const prevStatus = self.status;
        self.setStatus("close");
        if (self.commandQueue.length) {
          abortIncompletePipelines(self.commandQueue);
        }
        if (self.offlineQueue.length) {
          abortTransactionFragments(self.offlineQueue);
        }
        if (prevStatus === "ready") {
          if (!self.prevCondition) {
            self.prevCondition = self.condition;
          }
          if (self.commandQueue.length) {
            self.prevCommandQueue = self.commandQueue;
          }
        }
        if (self.manuallyClosing) {
          self.manuallyClosing = false;
          debug("skip reconnecting since the connection is manually closed.");
          return close();
        }
        if (typeof self.options.retryStrategy !== "function") {
          debug("skip reconnecting because `retryStrategy` is not a function");
          return close();
        }
        const retryDelay = self.options.retryStrategy(++self.retryAttempts);
        if (typeof retryDelay !== "number") {
          debug("skip reconnecting because `retryStrategy` doesn't return a number");
          return close();
        }
        debug("reconnect in %sms", retryDelay);
        self.setStatus("reconnecting", retryDelay);
        self.reconnectTimeout = setTimeout(function() {
          self.reconnectTimeout = null;
          self.connect().catch(utils_1.noop);
        }, retryDelay);
        const { maxRetriesPerRequest } = self.options;
        if (typeof maxRetriesPerRequest === "number") {
          if (maxRetriesPerRequest < 0) {
            debug("maxRetriesPerRequest is negative, ignoring...");
          } else {
            const remainder = self.retryAttempts % (maxRetriesPerRequest + 1);
            if (remainder === 0) {
              debug("reach maxRetriesPerRequest limitation, flushing command queue...");
              self.flushQueue(new errors_1.MaxRetriesPerRequestError(maxRetriesPerRequest));
            }
          }
        }
      };
      function close() {
        self.setStatus("end");
        self.flushQueue(new Error(utils_1.CONNECTION_CLOSED_ERROR_MSG));
      }
    }
    exports2.closeHandler = closeHandler;
    function errorHandler(self) {
      return function(error) {
        debug("error: %s", error);
        self.silentEmit("error", error);
      };
    }
    exports2.errorHandler = errorHandler;
    function readyHandler(self) {
      return function() {
        self.setStatus("ready");
        self.retryAttempts = 0;
        if (self.options.monitor) {
          self.call("monitor").then(() => self.setStatus("monitoring"), (error) => self.emit("error", error));
          const { sendCommand } = self;
          self.sendCommand = function(command) {
            if (Command_1.default.checkFlag("VALID_IN_MONITOR_MODE", command.name)) {
              return sendCommand.call(self, command);
            }
            command.reject(new Error("Connection is in monitoring mode, can't process commands."));
            return command.promise;
          };
          self.once("close", function() {
            delete self.sendCommand;
          });
          return;
        }
        const finalSelect = self.prevCondition ? self.prevCondition.select : self.condition.select;
        if (self.options.connectionName) {
          debug("set the connection name [%s]", self.options.connectionName);
          self.client("setname", self.options.connectionName).catch(utils_1.noop);
        }
        if (self.options.readOnly) {
          debug("set the connection to readonly mode");
          self.readonly().catch(utils_1.noop);
        }
        if (self.prevCondition) {
          const condition = self.prevCondition;
          self.prevCondition = null;
          if (condition.subscriber && self.options.autoResubscribe) {
            if (self.condition.select !== finalSelect) {
              debug("connect to db [%d]", finalSelect);
              self.select(finalSelect);
            }
            const subscribeChannels = condition.subscriber.channels("subscribe");
            if (subscribeChannels.length) {
              debug("subscribe %d channels", subscribeChannels.length);
              self.subscribe(subscribeChannels);
            }
            const psubscribeChannels = condition.subscriber.channels("psubscribe");
            if (psubscribeChannels.length) {
              debug("psubscribe %d channels", psubscribeChannels.length);
              self.psubscribe(psubscribeChannels);
            }
            const ssubscribeChannels = condition.subscriber.channels("ssubscribe");
            if (ssubscribeChannels.length) {
              debug("ssubscribe %d channels", ssubscribeChannels.length);
              self.ssubscribe(ssubscribeChannels);
            }
          }
        }
        if (self.prevCommandQueue) {
          if (self.options.autoResendUnfulfilledCommands) {
            debug("resend %d unfulfilled commands", self.prevCommandQueue.length);
            while (self.prevCommandQueue.length > 0) {
              const item = self.prevCommandQueue.shift();
              if (item.select !== self.condition.select && item.command.name !== "select") {
                self.select(item.select);
              }
              self.sendCommand(item.command, item.stream);
            }
          } else {
            self.prevCommandQueue = null;
          }
        }
        if (self.offlineQueue.length) {
          debug("send %d commands in offline queue", self.offlineQueue.length);
          const offlineQueue = self.offlineQueue;
          self.resetOfflineQueue();
          while (offlineQueue.length > 0) {
            const item = offlineQueue.shift();
            if (item.select !== self.condition.select && item.command.name !== "select") {
              self.select(item.select);
            }
            self.sendCommand(item.command, item.stream);
          }
        }
        if (self.condition.select !== finalSelect) {
          debug("connect to db [%d]", finalSelect);
          self.select(finalSelect);
        }
      };
    }
    exports2.readyHandler = readyHandler;
  }
});

var require_RedisOptions = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/redis/RedisOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DEFAULT_REDIS_OPTIONS = void 0;
    exports2.DEFAULT_REDIS_OPTIONS = {
      // Connection
      port: 6379,
      host: "localhost",
      family: 4,
      connectTimeout: 1e4,
      disconnectTimeout: 2e3,
      retryStrategy: function(times) {
        return Math.min(times * 50, 2e3);
      },
      keepAlive: 0,
      noDelay: true,
      connectionName: null,
      // Sentinel
      sentinels: null,
      name: null,
      role: "master",
      sentinelRetryStrategy: function(times) {
        return Math.min(times * 10, 1e3);
      },
      sentinelReconnectStrategy: function() {
        return 6e4;
      },
      natMap: null,
      enableTLSForSentinelMode: false,
      updateSentinels: true,
      failoverDetector: false,
      // Status
      username: null,
      password: null,
      db: 0,
      // Others
      enableOfflineQueue: true,
      enableReadyCheck: true,
      autoResubscribe: true,
      autoResendUnfulfilledCommands: true,
      lazyConnect: false,
      keyPrefix: "",
      reconnectOnError: null,
      readOnly: false,
      stringNumbers: false,
      maxRetriesPerRequest: 20,
      maxLoadingRetryTime: 1e4,
      enableAutoPipelining: false,
      autoPipeliningIgnoredCommands: [],
      sentinelMaxConnections: 10
    };
  }
});

var require_Redis = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/Redis.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var commands_1 = require_built();
    var events_1 = require("events");
    var standard_as_callback_1 = require_built2();
    var cluster_1 = require_cluster();
    var Command_1 = require_Command();
    var connectors_1 = require_connectors();
    var SentinelConnector_1 = require_SentinelConnector();
    var eventHandler = require_event_handler();
    var RedisOptions_1 = require_RedisOptions();
    var ScanStream_1 = require_ScanStream();
    var transaction_1 = require_transaction();
    var utils_1 = require_utils4();
    var applyMixin_1 = require_applyMixin();
    var Commander_1 = require_Commander();
    var lodash_1 = require_lodash3();
    var Deque = require_denque();
    var debug = (0, utils_1.Debug)("redis");
    var Redis = class _Redis extends Commander_1.default {
      constructor(arg1, arg2, arg3) {
        super();
        this.status = "wait";
        this.isCluster = false;
        this.reconnectTimeout = null;
        this.connectionEpoch = 0;
        this.retryAttempts = 0;
        this.manuallyClosing = false;
        this._autoPipelines = /* @__PURE__ */ new Map();
        this._runningAutoPipelines = /* @__PURE__ */ new Set();
        this.parseOptions(arg1, arg2, arg3);
        events_1.EventEmitter.call(this);
        this.resetCommandQueue();
        this.resetOfflineQueue();
        if (this.options.Connector) {
          this.connector = new this.options.Connector(this.options);
        } else if (this.options.sentinels) {
          const sentinelConnector = new SentinelConnector_1.default(this.options);
          sentinelConnector.emitter = this;
          this.connector = sentinelConnector;
        } else {
          this.connector = new connectors_1.StandaloneConnector(this.options);
        }
        if (this.options.scripts) {
          Object.entries(this.options.scripts).forEach(([name, definition]) => {
            this.defineCommand(name, definition);
          });
        }
        if (this.options.lazyConnect) {
          this.setStatus("wait");
        } else {
          this.connect().catch(lodash_1.noop);
        }
      }
      /**
       * Create a Redis instance.
       * This is the same as `new Redis()` but is included for compatibility with node-redis.
       */
      static createClient(...args) {
        return new _Redis(...args);
      }
      get autoPipelineQueueSize() {
        let queued = 0;
        for (const pipeline of this._autoPipelines.values()) {
          queued += pipeline.length;
        }
        return queued;
      }
      /**
       * Create a connection to Redis.
       * This method will be invoked automatically when creating a new Redis instance
       * unless `lazyConnect: true` is passed.
       *
       * When calling this method manually, a Promise is returned, which will
       * be resolved when the connection status is ready.
       */
      connect(callback) {
        const promise = new Promise((resolve, reject) => {
          if (this.status === "connecting" || this.status === "connect" || this.status === "ready") {
            reject(new Error("Redis is already connecting/connected"));
            return;
          }
          this.connectionEpoch += 1;
          this.setStatus("connecting");
          const { options } = this;
          this.condition = {
            select: options.db,
            auth: options.username ? [options.username, options.password] : options.password,
            subscriber: false
          };
          const _this = this;
          (0, standard_as_callback_1.default)(this.connector.connect(function(type, err) {
            _this.silentEmit(type, err);
          }), function(err, stream) {
            if (err) {
              _this.flushQueue(err);
              _this.silentEmit("error", err);
              reject(err);
              _this.setStatus("end");
              return;
            }
            let CONNECT_EVENT = options.tls ? "secureConnect" : "connect";
            if ("sentinels" in options && options.sentinels && !options.enableTLSForSentinelMode) {
              CONNECT_EVENT = "connect";
            }
            _this.stream = stream;
            if (options.noDelay) {
              stream.setNoDelay(true);
            }
            if (typeof options.keepAlive === "number") {
              if (stream.connecting) {
                stream.once(CONNECT_EVENT, () => {
                  stream.setKeepAlive(true, options.keepAlive);
                });
              } else {
                stream.setKeepAlive(true, options.keepAlive);
              }
            }
            if (stream.connecting) {
              stream.once(CONNECT_EVENT, eventHandler.connectHandler(_this));
              if (options.connectTimeout) {
                let connectTimeoutCleared = false;
                stream.setTimeout(options.connectTimeout, function() {
                  if (connectTimeoutCleared) {
                    return;
                  }
                  stream.setTimeout(0);
                  stream.destroy();
                  const err2 = new Error("connect ETIMEDOUT");
                  err2.errorno = "ETIMEDOUT";
                  err2.code = "ETIMEDOUT";
                  err2.syscall = "connect";
                  eventHandler.errorHandler(_this)(err2);
                });
                stream.once(CONNECT_EVENT, function() {
                  connectTimeoutCleared = true;
                  stream.setTimeout(0);
                });
              }
            } else if (stream.destroyed) {
              const firstError = _this.connector.firstError;
              if (firstError) {
                process.nextTick(() => {
                  eventHandler.errorHandler(_this)(firstError);
                });
              }
              process.nextTick(eventHandler.closeHandler(_this));
            } else {
              process.nextTick(eventHandler.connectHandler(_this));
            }
            if (!stream.destroyed) {
              stream.once("error", eventHandler.errorHandler(_this));
              stream.once("close", eventHandler.closeHandler(_this));
            }
            const connectionReadyHandler = function() {
              _this.removeListener("close", connectionCloseHandler);
              resolve();
            };
            var connectionCloseHandler = function() {
              _this.removeListener("ready", connectionReadyHandler);
              reject(new Error(utils_1.CONNECTION_CLOSED_ERROR_MSG));
            };
            _this.once("ready", connectionReadyHandler);
            _this.once("close", connectionCloseHandler);
          });
        });
        return (0, standard_as_callback_1.default)(promise, callback);
      }
      /**
       * Disconnect from Redis.
       *
       * This method closes the connection immediately,
       * and may lose some pending replies that haven't written to client.
       * If you want to wait for the pending replies, use Redis#quit instead.
       */
      disconnect(reconnect = false) {
        if (!reconnect) {
          this.manuallyClosing = true;
        }
        if (this.reconnectTimeout && !reconnect) {
          clearTimeout(this.reconnectTimeout);
          this.reconnectTimeout = null;
        }
        if (this.status === "wait") {
          eventHandler.closeHandler(this)();
        } else {
          this.connector.disconnect();
        }
      }
      /**
       * Disconnect from Redis.
       *
       * @deprecated
       */
      end() {
        this.disconnect();
      }
      /**
       * Create a new instance with the same options as the current one.
       *
       * @example
       * ```js
       * var redis = new Redis(6380);
       * var anotherRedis = redis.duplicate();
       * ```
       */
      duplicate(override) {
        return new _Redis({ ...this.options, ...override });
      }
      /**
       * Mode of the connection.
       *
       * One of `"normal"`, `"subscriber"`, or `"monitor"`. When the connection is
       * not in `"normal"` mode, certain commands are not allowed.
       */
      get mode() {
        var _a;
        return this.options.monitor ? "monitor" : ((_a = this.condition) === null || _a === void 0 ? void 0 : _a.subscriber) ? "subscriber" : "normal";
      }
      /**
       * Listen for all requests received by the server in real time.
       *
       * This command will create a new connection to Redis and send a
       * MONITOR command via the new connection in order to avoid disturbing
       * the current connection.
       *
       * @param callback The callback function. If omit, a promise will be returned.
       * @example
       * ```js
       * var redis = new Redis();
       * redis.monitor(function (err, monitor) {
       *   // Entering monitoring mode.
       *   monitor.on('monitor', function (time, args, source, database) {
       *     console.log(time + ": " + util.inspect(args));
       *   });
       * });
       *
       * // supports promise as well as other commands
       * redis.monitor().then(function (monitor) {
       *   monitor.on('monitor', function (time, args, source, database) {
       *     console.log(time + ": " + util.inspect(args));
       *   });
       * });
       * ```
       */
      monitor(callback) {
        const monitorInstance = this.duplicate({
          monitor: true,
          lazyConnect: false
        });
        return (0, standard_as_callback_1.default)(new Promise(function(resolve, reject) {
          monitorInstance.once("error", reject);
          monitorInstance.once("monitoring", function() {
            resolve(monitorInstance);
          });
        }), callback);
      }
      /**
       * Send a command to Redis
       *
       * This method is used internally and in most cases you should not
       * use it directly. If you need to send a command that is not supported
       * by the library, you can use the `call` method:
       *
       * ```js
       * const redis = new Redis();
       *
       * redis.call('set', 'foo', 'bar');
       * // or
       * redis.call(['set', 'foo', 'bar']);
       * ```
       *
       * @ignore
       */
      sendCommand(command, stream) {
        var _a, _b;
        if (this.status === "wait") {
          this.connect().catch(lodash_1.noop);
        }
        if (this.status === "end") {
          command.reject(new Error(utils_1.CONNECTION_CLOSED_ERROR_MSG));
          return command.promise;
        }
        if (((_a = this.condition) === null || _a === void 0 ? void 0 : _a.subscriber) && !Command_1.default.checkFlag("VALID_IN_SUBSCRIBER_MODE", command.name)) {
          command.reject(new Error("Connection in subscriber mode, only subscriber commands may be used"));
          return command.promise;
        }
        if (typeof this.options.commandTimeout === "number") {
          command.setTimeout(this.options.commandTimeout);
        }
        let writable = this.status === "ready" || !stream && this.status === "connect" && (0, commands_1.exists)(command.name) && (0, commands_1.hasFlag)(command.name, "loading");
        if (!this.stream) {
          writable = false;
        } else if (!this.stream.writable) {
          writable = false;
        } else if (this.stream._writableState && this.stream._writableState.ended) {
          writable = false;
        }
        if (!writable) {
          if (!this.options.enableOfflineQueue) {
            command.reject(new Error("Stream isn't writeable and enableOfflineQueue options is false"));
            return command.promise;
          }
          if (command.name === "quit" && this.offlineQueue.length === 0) {
            this.disconnect();
            command.resolve(Buffer.from("OK"));
            return command.promise;
          }
          if (debug.enabled) {
            debug("queue command[%s]: %d -> %s(%o)", this._getDescription(), this.condition.select, command.name, command.args);
          }
          this.offlineQueue.push({
            command,
            stream,
            select: this.condition.select
          });
        } else {
          if (debug.enabled) {
            debug("write command[%s]: %d -> %s(%o)", this._getDescription(), (_b = this.condition) === null || _b === void 0 ? void 0 : _b.select, command.name, command.args);
          }
          if (stream) {
            if ("isPipeline" in stream && stream.isPipeline) {
              stream.write(command.toWritable(stream.destination.redis.stream));
            } else {
              stream.write(command.toWritable(stream));
            }
          } else {
            this.stream.write(command.toWritable(this.stream));
          }
          this.commandQueue.push({
            command,
            stream,
            select: this.condition.select
          });
          if (Command_1.default.checkFlag("WILL_DISCONNECT", command.name)) {
            this.manuallyClosing = true;
          }
        }
        if (command.name === "select" && (0, utils_1.isInt)(command.args[0])) {
          const db = parseInt(command.args[0], 10);
          if (this.condition.select !== db) {
            this.condition.select = db;
            this.emit("select", db);
            debug("switch to db [%d]", this.condition.select);
          }
        }
        return command.promise;
      }
      scanStream(options) {
        return this.createScanStream("scan", { options });
      }
      scanBufferStream(options) {
        return this.createScanStream("scanBuffer", { options });
      }
      sscanStream(key, options) {
        return this.createScanStream("sscan", { key, options });
      }
      sscanBufferStream(key, options) {
        return this.createScanStream("sscanBuffer", { key, options });
      }
      hscanStream(key, options) {
        return this.createScanStream("hscan", { key, options });
      }
      hscanBufferStream(key, options) {
        return this.createScanStream("hscanBuffer", { key, options });
      }
      zscanStream(key, options) {
        return this.createScanStream("zscan", { key, options });
      }
      zscanBufferStream(key, options) {
        return this.createScanStream("zscanBuffer", { key, options });
      }
      /**
       * Emit only when there's at least one listener.
       *
       * @ignore
       */
      silentEmit(eventName, arg) {
        let error;
        if (eventName === "error") {
          error = arg;
          if (this.status === "end") {
            return;
          }
          if (this.manuallyClosing) {
            if (error instanceof Error && (error.message === utils_1.CONNECTION_CLOSED_ERROR_MSG || // @ts-expect-error
            error.syscall === "connect" || // @ts-expect-error
            error.syscall === "read")) {
              return;
            }
          }
        }
        if (this.listeners(eventName).length > 0) {
          return this.emit.apply(this, arguments);
        }
        if (error && error instanceof Error) {
          console.error("[ioredis] Unhandled error event:", error.stack);
        }
        return false;
      }
      /**
       * @ignore
       */
      recoverFromFatalError(_commandError, err, options) {
        this.flushQueue(err, options);
        this.silentEmit("error", err);
        this.disconnect(true);
      }
      /**
       * @ignore
       */
      handleReconnection(err, item) {
        var _a;
        let needReconnect = false;
        if (this.options.reconnectOnError) {
          needReconnect = this.options.reconnectOnError(err);
        }
        switch (needReconnect) {
          case 1:
          case true:
            if (this.status !== "reconnecting") {
              this.disconnect(true);
            }
            item.command.reject(err);
            break;
          case 2:
            if (this.status !== "reconnecting") {
              this.disconnect(true);
            }
            if (((_a = this.condition) === null || _a === void 0 ? void 0 : _a.select) !== item.select && item.command.name !== "select") {
              this.select(item.select);
            }
            this.sendCommand(item.command);
            break;
          default:
            item.command.reject(err);
        }
      }
      /**
       * Get description of the connection. Used for debugging.
       */
      _getDescription() {
        let description;
        if ("path" in this.options && this.options.path) {
          description = this.options.path;
        } else if (this.stream && this.stream.remoteAddress && this.stream.remotePort) {
          description = this.stream.remoteAddress + ":" + this.stream.remotePort;
        } else if ("host" in this.options && this.options.host) {
          description = this.options.host + ":" + this.options.port;
        } else {
          description = "";
        }
        if (this.options.connectionName) {
          description += ` (${this.options.connectionName})`;
        }
        return description;
      }
      resetCommandQueue() {
        this.commandQueue = new Deque();
      }
      resetOfflineQueue() {
        this.offlineQueue = new Deque();
      }
      parseOptions(...args) {
        const options = {};
        let isTls = false;
        for (let i = 0; i < args.length; ++i) {
          const arg = args[i];
          if (arg === null || typeof arg === "undefined") {
            continue;
          }
          if (typeof arg === "object") {
            (0, lodash_1.defaults)(options, arg);
          } else if (typeof arg === "string") {
            (0, lodash_1.defaults)(options, (0, utils_1.parseURL)(arg));
            if (arg.startsWith("rediss://")) {
              isTls = true;
            }
          } else if (typeof arg === "number") {
            options.port = arg;
          } else {
            throw new Error("Invalid argument " + arg);
          }
        }
        if (isTls) {
          (0, lodash_1.defaults)(options, { tls: true });
        }
        (0, lodash_1.defaults)(options, _Redis.defaultOptions);
        if (typeof options.port === "string") {
          options.port = parseInt(options.port, 10);
        }
        if (typeof options.db === "string") {
          options.db = parseInt(options.db, 10);
        }
        this.options = (0, utils_1.resolveTLSProfile)(options);
      }
      /**
       * Change instance's status
       */
      setStatus(status, arg) {
        if (debug.enabled) {
          debug("status[%s]: %s -> %s", this._getDescription(), this.status || "[empty]", status);
        }
        this.status = status;
        process.nextTick(this.emit.bind(this, status, arg));
      }
      createScanStream(command, { key, options = {} }) {
        return new ScanStream_1.default({
          objectMode: true,
          key,
          redis: this,
          command,
          ...options
        });
      }
      /**
       * Flush offline queue and command queue with error.
       *
       * @param error The error object to send to the commands
       * @param options options
       */
      flushQueue(error, options) {
        options = (0, lodash_1.defaults)({}, options, {
          offlineQueue: true,
          commandQueue: true
        });
        let item;
        if (options.offlineQueue) {
          while (item = this.offlineQueue.shift()) {
            item.command.reject(error);
          }
        }
        if (options.commandQueue) {
          if (this.commandQueue.length > 0) {
            if (this.stream) {
              this.stream.removeAllListeners("data");
            }
            while (item = this.commandQueue.shift()) {
              item.command.reject(error);
            }
          }
        }
      }
      /**
       * Check whether Redis has finished loading the persistent data and is able to
       * process commands.
       */
      _readyCheck(callback) {
        const _this = this;
        this.info(function(err, res) {
          if (err) {
            if (err.message && err.message.includes("NOPERM")) {
              console.warn(`Skipping the ready check because INFO command fails: "${err.message}". You can disable ready check with "enableReadyCheck". More: https://github.com/luin/ioredis/wiki/Disable-ready-check.`);
              return callback(null, {});
            }
            return callback(err);
          }
          if (typeof res !== "string") {
            return callback(null, res);
          }
          const info = {};
          const lines = res.split("\r\n");
          for (let i = 0; i < lines.length; ++i) {
            const [fieldName, ...fieldValueParts] = lines[i].split(":");
            const fieldValue = fieldValueParts.join(":");
            if (fieldValue) {
              info[fieldName] = fieldValue;
            }
          }
          if (!info.loading || info.loading === "0") {
            callback(null, info);
          } else {
            const loadingEtaMs = (info.loading_eta_seconds || 1) * 1e3;
            const retryTime = _this.options.maxLoadingRetryTime && _this.options.maxLoadingRetryTime < loadingEtaMs ? _this.options.maxLoadingRetryTime : loadingEtaMs;
            debug("Redis server still loading, trying again in " + retryTime + "ms");
            setTimeout(function() {
              _this._readyCheck(callback);
            }, retryTime);
          }
        }).catch(lodash_1.noop);
      }
    };
    Redis.Cluster = cluster_1.default;
    Redis.Command = Command_1.default;
    Redis.defaultOptions = RedisOptions_1.DEFAULT_REDIS_OPTIONS;
    (0, applyMixin_1.default)(Redis, events_1.EventEmitter);
    (0, transaction_1.addTransactionSupport)(Redis.prototype);
    exports2.default = Redis;
  }
});

var require_built3 = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/ioredis/built/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.print = exports2.ReplyError = exports2.SentinelIterator = exports2.SentinelConnector = exports2.AbstractConnector = exports2.Pipeline = exports2.ScanStream = exports2.Command = exports2.Cluster = exports2.Redis = exports2.default = void 0;
    exports2 = module2.exports = require_Redis().default;
    var Redis_1 = require_Redis();
    Object.defineProperty(exports2, "default", { enumerable: true, get: function() {
      return Redis_1.default;
    } });
    var Redis_2 = require_Redis();
    Object.defineProperty(exports2, "Redis", { enumerable: true, get: function() {
      return Redis_2.default;
    } });
    var cluster_1 = require_cluster();
    Object.defineProperty(exports2, "Cluster", { enumerable: true, get: function() {
      return cluster_1.default;
    } });
    var Command_1 = require_Command();
    Object.defineProperty(exports2, "Command", { enumerable: true, get: function() {
      return Command_1.default;
    } });
    var ScanStream_1 = require_ScanStream();
    Object.defineProperty(exports2, "ScanStream", { enumerable: true, get: function() {
      return ScanStream_1.default;
    } });
    var Pipeline_1 = require_Pipeline();
    Object.defineProperty(exports2, "Pipeline", { enumerable: true, get: function() {
      return Pipeline_1.default;
    } });
    var AbstractConnector_1 = require_AbstractConnector();
    Object.defineProperty(exports2, "AbstractConnector", { enumerable: true, get: function() {
      return AbstractConnector_1.default;
    } });
    var SentinelConnector_1 = require_SentinelConnector();
    Object.defineProperty(exports2, "SentinelConnector", { enumerable: true, get: function() {
      return SentinelConnector_1.default;
    } });
    Object.defineProperty(exports2, "SentinelIterator", { enumerable: true, get: function() {
      return SentinelConnector_1.SentinelIterator;
    } });
    exports2.ReplyError = require_redis_errors().ReplyError;
    Object.defineProperty(exports2, "Promise", {
      get() {
        console.warn("ioredis v5 does not support plugging third-party Promise library anymore. Native Promise will be used.");
        return Promise;
      },
      set(_lib) {
        console.warn("ioredis v5 does not support plugging third-party Promise library anymore. Native Promise will be used.");
      }
    });
    function print(err, reply) {
      if (err) {
        console.log("Error: " + err);
      } else {
        console.log("Reply: " + reply);
      }
    }
    exports2.print = print;
  }
});

var require_redis_inflight = __commonJS({
  "../../.asdf/installs/nodejs/19.6.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/target-tf-aws/redis.inflight.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RedisClient = void 0;
    var client_elasticache_1 = require_dist_cjs54();
    var ex_1 = require_ex();
    var IoRedis = require_built3();
    var RedisClient = class extends ex_1.RedisClientBase {
      constructor(clusterId, connection, elasticacheClient = new client_elasticache_1.ElastiCacheClient({})) {
        super();
        this.clusterId = clusterId;
        this.connection = connection;
        this.elasticacheClient = elasticacheClient;
      }
      /**
       * The Redis cluster endpoint is not available to inject from the cdktf resource,
       * therefore we need to query the AWS API to get it. This is a helper function that will
       * use the cluster id to get the endpoint.
       *
       * @returns The Redis cluster endpoint
       */
      async getEndpoint() {
        const command = new client_elasticache_1.DescribeCacheClustersCommand({
          CacheClusterId: this.clusterId,
          ShowCacheNodeInfo: true
        });
        const resp = await this.elasticacheClient.send(command);
        if (!resp.CacheClusters) {
          throw new Error("No Redis cache clusters found");
        }
        const cluster = resp.CacheClusters[0];
        if (!cluster.CacheNodes) {
          throw new Error("No Redis cache nodes found");
        }
        const cacheNode = cluster.CacheNodes[0];
        if (!cacheNode.Endpoint) {
          throw new Error("No Redis cache node endpoint found");
        }
        return cacheNode.Endpoint.Address;
      }
      async rawClient() {
        if (!this.clusterId) {
          throw new Error("No cluster id provided");
        }
        if (this.connection) {
          return this.connection;
        }
        if (!this.connectionUrl) {
          this.connectionUrl = await this.getEndpoint();
        }
        this.connection = new IoRedis(this.connectionUrl);
        return this.connection;
      }
      async url() {
        if (this.connectionUrl == void 0) {
          this.connectionUrl = await this.getEndpoint();
        }
        return this.connectionUrl;
      }
    };
    exports2.RedisClient = RedisClient;
  }
});

exports.handler = async function(event) {
  return await new (require_api_onrequest_inflight()).ApiOnRequestHandlerClient({
    handler: await (async () => {
      const $Closure2Client = require_inflight_Closure2_1()({
        $__parent_this_2_manager: await (async () => {
          const LinkManagerClient = require_inflight_LinkManager_1()({
            $util_Util: require_util().Util
          });
          const client2 = new LinkManagerClient({
            $this_db: new (require_redis_inflight()).RedisClient(process.env["REDIS_CLUSTER_ID_55db844d"])
          });
          if (client2.$inflight_init) {
            await client2.$inflight_init();
          }
          return client2;
        })()
      });
      const client = new $Closure2Client({});
      if (client.$inflight_init) {
        await client.$inflight_init();
      }
      return client;
    })(),
    args: { "corsHeaders": { "Access-Control-Allow-Origin": "*", "Access-Control-Expose-Headers": "", "Access-Control-Allow-Credentials": "false" } }
  }).handle(event);
};
